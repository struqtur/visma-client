<?php
/**
 * InventoryEventApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * InventoryEventApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryEventApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryEventApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'voucher_id' => 'string',
        'bookkeeping_date' => '\DateTime',
        'undo_voucher_id' => 'string',
        'undo_bookkeeping_date' => '\DateTime',
        'type' => 'int',
        'amount' => 'double',
        'current_value_before_event' => 'double',
        'created_utc' => '\DateTime',
        'undone' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'voucher_id' => 'uuid',
        'bookkeeping_date' => 'date-time',
        'undo_voucher_id' => 'uuid',
        'undo_bookkeeping_date' => 'date-time',
        'type' => 'int32',
        'amount' => 'double',
        'current_value_before_event' => 'double',
        'created_utc' => 'date-time',
        'undone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'voucher_id' => 'VoucherId',
        'bookkeeping_date' => 'BookkeepingDate',
        'undo_voucher_id' => 'UndoVoucherId',
        'undo_bookkeeping_date' => 'UndoBookkeepingDate',
        'type' => 'Type',
        'amount' => 'Amount',
        'current_value_before_event' => 'CurrentValueBeforeEvent',
        'created_utc' => 'CreatedUtc',
        'undone' => 'Undone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'voucher_id' => 'setVoucherId',
        'bookkeeping_date' => 'setBookkeepingDate',
        'undo_voucher_id' => 'setUndoVoucherId',
        'undo_bookkeeping_date' => 'setUndoBookkeepingDate',
        'type' => 'setType',
        'amount' => 'setAmount',
        'current_value_before_event' => 'setCurrentValueBeforeEvent',
        'created_utc' => 'setCreatedUtc',
        'undone' => 'setUndone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'voucher_id' => 'getVoucherId',
        'bookkeeping_date' => 'getBookkeepingDate',
        'undo_voucher_id' => 'getUndoVoucherId',
        'undo_bookkeeping_date' => 'getUndoBookkeepingDate',
        'type' => 'getType',
        'amount' => 'getAmount',
        'current_value_before_event' => 'getCurrentValueBeforeEvent',
        'created_utc' => 'getCreatedUtc',
        'undone' => 'getUndone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_0 = 0;
    const TYPE_1 = 1;
    const TYPE_4 = 4;
    const TYPE_5 = 5;
    const TYPE_6 = 6;
    const TYPE_7 = 7;
    const TYPE_8 = 8;
    const TYPE_9 = 9;
    const TYPE_10 = 10;
    const TYPE_11 = 11;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_0,
            self::TYPE_1,
            self::TYPE_4,
            self::TYPE_5,
            self::TYPE_6,
            self::TYPE_7,
            self::TYPE_8,
            self::TYPE_9,
            self::TYPE_10,
            self::TYPE_11,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['bookkeeping_date'] = isset($data['bookkeeping_date']) ? $data['bookkeeping_date'] : null;
        $this->container['undo_voucher_id'] = isset($data['undo_voucher_id']) ? $data['undo_voucher_id'] : null;
        $this->container['undo_bookkeeping_date'] = isset($data['undo_bookkeeping_date']) ? $data['undo_bookkeeping_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['current_value_before_event'] = isset($data['current_value_before_event']) ? $data['current_value_before_event'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['undone'] = isset($data['undone']) ? $data['undone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets bookkeeping_date
     *
     * @return \DateTime
     */
    public function getBookkeepingDate()
    {
        return $this->container['bookkeeping_date'];
    }

    /**
     * Sets bookkeeping_date
     *
     * @param \DateTime $bookkeeping_date bookkeeping_date
     *
     * @return $this
     */
    public function setBookkeepingDate($bookkeeping_date)
    {
        $this->container['bookkeeping_date'] = $bookkeeping_date;

        return $this;
    }

    /**
     * Gets undo_voucher_id
     *
     * @return string
     */
    public function getUndoVoucherId()
    {
        return $this->container['undo_voucher_id'];
    }

    /**
     * Sets undo_voucher_id
     *
     * @param string $undo_voucher_id undo_voucher_id
     *
     * @return $this
     */
    public function setUndoVoucherId($undo_voucher_id)
    {
        $this->container['undo_voucher_id'] = $undo_voucher_id;

        return $this;
    }

    /**
     * Gets undo_bookkeeping_date
     *
     * @return \DateTime
     */
    public function getUndoBookkeepingDate()
    {
        return $this->container['undo_bookkeeping_date'];
    }

    /**
     * Sets undo_bookkeeping_date
     *
     * @param \DateTime $undo_bookkeeping_date undo_bookkeeping_date
     *
     * @return $this
     */
    public function setUndoBookkeepingDate($undo_bookkeeping_date)
    {
        $this->container['undo_bookkeeping_date'] = $undo_bookkeeping_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Depreciation = 0, Sale = 1, Disposal = 4, ValueChange = 5, Appreciation = 6, ImpairmentLoss = 7, ReversalOfImpairment = 8, AdditionalDepreciation = 9, CostOfAquisitionAdjustement = 10, DepreciationBasisAdjustement = 11
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets current_value_before_event
     *
     * @return double
     */
    public function getCurrentValueBeforeEvent()
    {
        return $this->container['current_value_before_event'];
    }

    /**
     * Sets current_value_before_event
     *
     * @param double $current_value_before_event current_value_before_event
     *
     * @return $this
     */
    public function setCurrentValueBeforeEvent($current_value_before_event)
    {
        $this->container['current_value_before_event'] = $current_value_before_event;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets undone
     *
     * @return bool
     */
    public function getUndone()
    {
        return $this->container['undone'];
    }

    /**
     * Sets undone
     *
     * @param bool $undone undone
     *
     * @return $this
     */
    public function setUndone($undone)
    {
        $this->container['undone'] = $undone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


