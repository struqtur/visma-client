<?php
/**
 * ArticleAccountCodingAPI
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * ArticleAccountCodingAPI Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticleAccountCodingAPI implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArticleAccountCodingAPI';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'name_english' => 'string',
        'type' => 'string',
        'vat_rate' => 'string',
        'is_active' => 'bool',
        'vat_rate_percent' => 'double',
        'domestic_sales_subject_to_reversed_construction_vat_account_number' => 'int',
        'domestic_sales_subject_to_vat_account_number' => 'int',
        'domestic_sales_vat_exempt_account_number' => 'int',
        'foreign_sales_subject_to_moss_account_number' => 'int',
        'foreign_sales_subject_to_third_party_sales_account_number' => 'int',
        'foreign_sales_subject_to_vat_within_eu_account_number' => 'int',
        'foreign_sales_vat_exempt_outside_eu_account_number' => 'int',
        'foreign_sales_vat_exempt_within_eu_account_number' => 'int',
        'domestic_sales_vat_code_exempt_account_number' => 'int',
        'changed_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'name_english' => null,
        'type' => null,
        'vat_rate' => null,
        'is_active' => null,
        'vat_rate_percent' => 'double',
        'domestic_sales_subject_to_reversed_construction_vat_account_number' => 'int64',
        'domestic_sales_subject_to_vat_account_number' => 'int64',
        'domestic_sales_vat_exempt_account_number' => 'int64',
        'foreign_sales_subject_to_moss_account_number' => 'int64',
        'foreign_sales_subject_to_third_party_sales_account_number' => 'int64',
        'foreign_sales_subject_to_vat_within_eu_account_number' => 'int64',
        'foreign_sales_vat_exempt_outside_eu_account_number' => 'int64',
        'foreign_sales_vat_exempt_within_eu_account_number' => 'int64',
        'domestic_sales_vat_code_exempt_account_number' => 'int64',
        'changed_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'name_english' => 'NameEnglish',
        'type' => 'Type',
        'vat_rate' => 'VatRate',
        'is_active' => 'IsActive',
        'vat_rate_percent' => 'VatRatePercent',
        'domestic_sales_subject_to_reversed_construction_vat_account_number' => 'DomesticSalesSubjectToReversedConstructionVatAccountNumber',
        'domestic_sales_subject_to_vat_account_number' => 'DomesticSalesSubjectToVatAccountNumber',
        'domestic_sales_vat_exempt_account_number' => 'DomesticSalesVatExemptAccountNumber',
        'foreign_sales_subject_to_moss_account_number' => 'ForeignSalesSubjectToMossAccountNumber',
        'foreign_sales_subject_to_third_party_sales_account_number' => 'ForeignSalesSubjectToThirdPartySalesAccountNumber',
        'foreign_sales_subject_to_vat_within_eu_account_number' => 'ForeignSalesSubjectToVatWithinEuAccountNumber',
        'foreign_sales_vat_exempt_outside_eu_account_number' => 'ForeignSalesVatExemptOutsideEuAccountNumber',
        'foreign_sales_vat_exempt_within_eu_account_number' => 'ForeignSalesVatExemptWithinEuAccountNumber',
        'domestic_sales_vat_code_exempt_account_number' => 'DomesticSalesVatCodeExemptAccountNumber',
        'changed_utc' => 'ChangedUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'name_english' => 'setNameEnglish',
        'type' => 'setType',
        'vat_rate' => 'setVatRate',
        'is_active' => 'setIsActive',
        'vat_rate_percent' => 'setVatRatePercent',
        'domestic_sales_subject_to_reversed_construction_vat_account_number' => 'setDomesticSalesSubjectToReversedConstructionVatAccountNumber',
        'domestic_sales_subject_to_vat_account_number' => 'setDomesticSalesSubjectToVatAccountNumber',
        'domestic_sales_vat_exempt_account_number' => 'setDomesticSalesVatExemptAccountNumber',
        'foreign_sales_subject_to_moss_account_number' => 'setForeignSalesSubjectToMossAccountNumber',
        'foreign_sales_subject_to_third_party_sales_account_number' => 'setForeignSalesSubjectToThirdPartySalesAccountNumber',
        'foreign_sales_subject_to_vat_within_eu_account_number' => 'setForeignSalesSubjectToVatWithinEuAccountNumber',
        'foreign_sales_vat_exempt_outside_eu_account_number' => 'setForeignSalesVatExemptOutsideEuAccountNumber',
        'foreign_sales_vat_exempt_within_eu_account_number' => 'setForeignSalesVatExemptWithinEuAccountNumber',
        'domestic_sales_vat_code_exempt_account_number' => 'setDomesticSalesVatCodeExemptAccountNumber',
        'changed_utc' => 'setChangedUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'name_english' => 'getNameEnglish',
        'type' => 'getType',
        'vat_rate' => 'getVatRate',
        'is_active' => 'getIsActive',
        'vat_rate_percent' => 'getVatRatePercent',
        'domestic_sales_subject_to_reversed_construction_vat_account_number' => 'getDomesticSalesSubjectToReversedConstructionVatAccountNumber',
        'domestic_sales_subject_to_vat_account_number' => 'getDomesticSalesSubjectToVatAccountNumber',
        'domestic_sales_vat_exempt_account_number' => 'getDomesticSalesVatExemptAccountNumber',
        'foreign_sales_subject_to_moss_account_number' => 'getForeignSalesSubjectToMossAccountNumber',
        'foreign_sales_subject_to_third_party_sales_account_number' => 'getForeignSalesSubjectToThirdPartySalesAccountNumber',
        'foreign_sales_subject_to_vat_within_eu_account_number' => 'getForeignSalesSubjectToVatWithinEuAccountNumber',
        'foreign_sales_vat_exempt_outside_eu_account_number' => 'getForeignSalesVatExemptOutsideEuAccountNumber',
        'foreign_sales_vat_exempt_within_eu_account_number' => 'getForeignSalesVatExemptWithinEuAccountNumber',
        'domestic_sales_vat_code_exempt_account_number' => 'getDomesticSalesVatCodeExemptAccountNumber',
        'changed_utc' => 'getChangedUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_english'] = isset($data['name_english']) ? $data['name_english'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['vat_rate_percent'] = isset($data['vat_rate_percent']) ? $data['vat_rate_percent'] : null;
        $this->container['domestic_sales_subject_to_reversed_construction_vat_account_number'] = isset($data['domestic_sales_subject_to_reversed_construction_vat_account_number']) ? $data['domestic_sales_subject_to_reversed_construction_vat_account_number'] : null;
        $this->container['domestic_sales_subject_to_vat_account_number'] = isset($data['domestic_sales_subject_to_vat_account_number']) ? $data['domestic_sales_subject_to_vat_account_number'] : null;
        $this->container['domestic_sales_vat_exempt_account_number'] = isset($data['domestic_sales_vat_exempt_account_number']) ? $data['domestic_sales_vat_exempt_account_number'] : null;
        $this->container['foreign_sales_subject_to_moss_account_number'] = isset($data['foreign_sales_subject_to_moss_account_number']) ? $data['foreign_sales_subject_to_moss_account_number'] : null;
        $this->container['foreign_sales_subject_to_third_party_sales_account_number'] = isset($data['foreign_sales_subject_to_third_party_sales_account_number']) ? $data['foreign_sales_subject_to_third_party_sales_account_number'] : null;
        $this->container['foreign_sales_subject_to_vat_within_eu_account_number'] = isset($data['foreign_sales_subject_to_vat_within_eu_account_number']) ? $data['foreign_sales_subject_to_vat_within_eu_account_number'] : null;
        $this->container['foreign_sales_vat_exempt_outside_eu_account_number'] = isset($data['foreign_sales_vat_exempt_outside_eu_account_number']) ? $data['foreign_sales_vat_exempt_outside_eu_account_number'] : null;
        $this->container['foreign_sales_vat_exempt_within_eu_account_number'] = isset($data['foreign_sales_vat_exempt_within_eu_account_number']) ? $data['foreign_sales_vat_exempt_within_eu_account_number'] : null;
        $this->container['domestic_sales_vat_code_exempt_account_number'] = isset($data['domestic_sales_vat_code_exempt_account_number']) ? $data['domestic_sales_vat_code_exempt_account_number'] : null;
        $this->container['changed_utc'] = isset($data['changed_utc']) ? $data['changed_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_english
     *
     * @return string
     */
    public function getNameEnglish()
    {
        return $this->container['name_english'];
    }

    /**
     * Sets name_english
     *
     * @param string $name_english name_english
     *
     * @return $this
     */
    public function setNameEnglish($name_english)
    {
        $this->container['name_english'] = $name_english;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return string
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param string $vat_rate vat_rate
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets vat_rate_percent
     *
     * @return double
     */
    public function getVatRatePercent()
    {
        return $this->container['vat_rate_percent'];
    }

    /**
     * Sets vat_rate_percent
     *
     * @param double $vat_rate_percent vat_rate_percent
     *
     * @return $this
     */
    public function setVatRatePercent($vat_rate_percent)
    {
        $this->container['vat_rate_percent'] = $vat_rate_percent;

        return $this;
    }

    /**
     * Gets domestic_sales_subject_to_reversed_construction_vat_account_number
     *
     * @return int
     */
    public function getDomesticSalesSubjectToReversedConstructionVatAccountNumber()
    {
        return $this->container['domestic_sales_subject_to_reversed_construction_vat_account_number'];
    }

    /**
     * Sets domestic_sales_subject_to_reversed_construction_vat_account_number
     *
     * @param int $domestic_sales_subject_to_reversed_construction_vat_account_number domestic_sales_subject_to_reversed_construction_vat_account_number
     *
     * @return $this
     */
    public function setDomesticSalesSubjectToReversedConstructionVatAccountNumber($domestic_sales_subject_to_reversed_construction_vat_account_number)
    {
        $this->container['domestic_sales_subject_to_reversed_construction_vat_account_number'] = $domestic_sales_subject_to_reversed_construction_vat_account_number;

        return $this;
    }

    /**
     * Gets domestic_sales_subject_to_vat_account_number
     *
     * @return int
     */
    public function getDomesticSalesSubjectToVatAccountNumber()
    {
        return $this->container['domestic_sales_subject_to_vat_account_number'];
    }

    /**
     * Sets domestic_sales_subject_to_vat_account_number
     *
     * @param int $domestic_sales_subject_to_vat_account_number domestic_sales_subject_to_vat_account_number
     *
     * @return $this
     */
    public function setDomesticSalesSubjectToVatAccountNumber($domestic_sales_subject_to_vat_account_number)
    {
        $this->container['domestic_sales_subject_to_vat_account_number'] = $domestic_sales_subject_to_vat_account_number;

        return $this;
    }

    /**
     * Gets domestic_sales_vat_exempt_account_number
     *
     * @return int
     */
    public function getDomesticSalesVatExemptAccountNumber()
    {
        return $this->container['domestic_sales_vat_exempt_account_number'];
    }

    /**
     * Sets domestic_sales_vat_exempt_account_number
     *
     * @param int $domestic_sales_vat_exempt_account_number domestic_sales_vat_exempt_account_number
     *
     * @return $this
     */
    public function setDomesticSalesVatExemptAccountNumber($domestic_sales_vat_exempt_account_number)
    {
        $this->container['domestic_sales_vat_exempt_account_number'] = $domestic_sales_vat_exempt_account_number;

        return $this;
    }

    /**
     * Gets foreign_sales_subject_to_moss_account_number
     *
     * @return int
     */
    public function getForeignSalesSubjectToMossAccountNumber()
    {
        return $this->container['foreign_sales_subject_to_moss_account_number'];
    }

    /**
     * Sets foreign_sales_subject_to_moss_account_number
     *
     * @param int $foreign_sales_subject_to_moss_account_number foreign_sales_subject_to_moss_account_number
     *
     * @return $this
     */
    public function setForeignSalesSubjectToMossAccountNumber($foreign_sales_subject_to_moss_account_number)
    {
        $this->container['foreign_sales_subject_to_moss_account_number'] = $foreign_sales_subject_to_moss_account_number;

        return $this;
    }

    /**
     * Gets foreign_sales_subject_to_third_party_sales_account_number
     *
     * @return int
     */
    public function getForeignSalesSubjectToThirdPartySalesAccountNumber()
    {
        return $this->container['foreign_sales_subject_to_third_party_sales_account_number'];
    }

    /**
     * Sets foreign_sales_subject_to_third_party_sales_account_number
     *
     * @param int $foreign_sales_subject_to_third_party_sales_account_number foreign_sales_subject_to_third_party_sales_account_number
     *
     * @return $this
     */
    public function setForeignSalesSubjectToThirdPartySalesAccountNumber($foreign_sales_subject_to_third_party_sales_account_number)
    {
        $this->container['foreign_sales_subject_to_third_party_sales_account_number'] = $foreign_sales_subject_to_third_party_sales_account_number;

        return $this;
    }

    /**
     * Gets foreign_sales_subject_to_vat_within_eu_account_number
     *
     * @return int
     */
    public function getForeignSalesSubjectToVatWithinEuAccountNumber()
    {
        return $this->container['foreign_sales_subject_to_vat_within_eu_account_number'];
    }

    /**
     * Sets foreign_sales_subject_to_vat_within_eu_account_number
     *
     * @param int $foreign_sales_subject_to_vat_within_eu_account_number foreign_sales_subject_to_vat_within_eu_account_number
     *
     * @return $this
     */
    public function setForeignSalesSubjectToVatWithinEuAccountNumber($foreign_sales_subject_to_vat_within_eu_account_number)
    {
        $this->container['foreign_sales_subject_to_vat_within_eu_account_number'] = $foreign_sales_subject_to_vat_within_eu_account_number;

        return $this;
    }

    /**
     * Gets foreign_sales_vat_exempt_outside_eu_account_number
     *
     * @return int
     */
    public function getForeignSalesVatExemptOutsideEuAccountNumber()
    {
        return $this->container['foreign_sales_vat_exempt_outside_eu_account_number'];
    }

    /**
     * Sets foreign_sales_vat_exempt_outside_eu_account_number
     *
     * @param int $foreign_sales_vat_exempt_outside_eu_account_number foreign_sales_vat_exempt_outside_eu_account_number
     *
     * @return $this
     */
    public function setForeignSalesVatExemptOutsideEuAccountNumber($foreign_sales_vat_exempt_outside_eu_account_number)
    {
        $this->container['foreign_sales_vat_exempt_outside_eu_account_number'] = $foreign_sales_vat_exempt_outside_eu_account_number;

        return $this;
    }

    /**
     * Gets foreign_sales_vat_exempt_within_eu_account_number
     *
     * @return int
     */
    public function getForeignSalesVatExemptWithinEuAccountNumber()
    {
        return $this->container['foreign_sales_vat_exempt_within_eu_account_number'];
    }

    /**
     * Sets foreign_sales_vat_exempt_within_eu_account_number
     *
     * @param int $foreign_sales_vat_exempt_within_eu_account_number foreign_sales_vat_exempt_within_eu_account_number
     *
     * @return $this
     */
    public function setForeignSalesVatExemptWithinEuAccountNumber($foreign_sales_vat_exempt_within_eu_account_number)
    {
        $this->container['foreign_sales_vat_exempt_within_eu_account_number'] = $foreign_sales_vat_exempt_within_eu_account_number;

        return $this;
    }

    /**
     * Gets domestic_sales_vat_code_exempt_account_number
     *
     * @return int
     */
    public function getDomesticSalesVatCodeExemptAccountNumber()
    {
        return $this->container['domestic_sales_vat_code_exempt_account_number'];
    }

    /**
     * Sets domestic_sales_vat_code_exempt_account_number
     *
     * @param int $domestic_sales_vat_code_exempt_account_number domestic_sales_vat_code_exempt_account_number
     *
     * @return $this
     */
    public function setDomesticSalesVatCodeExemptAccountNumber($domestic_sales_vat_code_exempt_account_number)
    {
        $this->container['domestic_sales_vat_code_exempt_account_number'] = $domestic_sales_vat_code_exempt_account_number;

        return $this;
    }

    /**
     * Gets changed_utc
     *
     * @return \DateTime
     */
    public function getChangedUtc()
    {
        return $this->container['changed_utc'];
    }

    /**
     * Sets changed_utc
     *
     * @param \DateTime $changed_utc changed_utc
     *
     * @return $this
     */
    public function setChangedUtc($changed_utc)
    {
        $this->container['changed_utc'] = $changed_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


