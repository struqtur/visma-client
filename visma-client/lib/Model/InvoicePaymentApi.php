<?php
/**
 * InvoicePaymentApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * InvoicePaymentApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicePaymentApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoicePaymentApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_bank_account_id' => 'string',
        'payment_date' => '\DateTime',
        'reference' => 'string',
        'payment_amount' => 'double',
        'payment_currency' => 'string',
        'domestic_payment_amount' => 'double',
        'bank_fee_amount' => 'double',
        'payment_type' => 'int',
        'factoring_fee_amount' => 'double',
        'factoring_fee_account_number' => 'int',
        'bank_transaction_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_bank_account_id' => 'uuid',
        'payment_date' => 'date-time',
        'reference' => null,
        'payment_amount' => 'double',
        'payment_currency' => null,
        'domestic_payment_amount' => 'double',
        'bank_fee_amount' => 'double',
        'payment_type' => 'int32',
        'factoring_fee_amount' => 'double',
        'factoring_fee_account_number' => 'int64',
        'bank_transaction_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_bank_account_id' => 'CompanyBankAccountId',
        'payment_date' => 'PaymentDate',
        'reference' => 'Reference',
        'payment_amount' => 'PaymentAmount',
        'payment_currency' => 'PaymentCurrency',
        'domestic_payment_amount' => 'DomesticPaymentAmount',
        'bank_fee_amount' => 'BankFeeAmount',
        'payment_type' => 'PaymentType',
        'factoring_fee_amount' => 'FactoringFeeAmount',
        'factoring_fee_account_number' => 'FactoringFeeAccountNumber',
        'bank_transaction_id' => 'BankTransactionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_bank_account_id' => 'setCompanyBankAccountId',
        'payment_date' => 'setPaymentDate',
        'reference' => 'setReference',
        'payment_amount' => 'setPaymentAmount',
        'payment_currency' => 'setPaymentCurrency',
        'domestic_payment_amount' => 'setDomesticPaymentAmount',
        'bank_fee_amount' => 'setBankFeeAmount',
        'payment_type' => 'setPaymentType',
        'factoring_fee_amount' => 'setFactoringFeeAmount',
        'factoring_fee_account_number' => 'setFactoringFeeAccountNumber',
        'bank_transaction_id' => 'setBankTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_bank_account_id' => 'getCompanyBankAccountId',
        'payment_date' => 'getPaymentDate',
        'reference' => 'getReference',
        'payment_amount' => 'getPaymentAmount',
        'payment_currency' => 'getPaymentCurrency',
        'domestic_payment_amount' => 'getDomesticPaymentAmount',
        'bank_fee_amount' => 'getBankFeeAmount',
        'payment_type' => 'getPaymentType',
        'factoring_fee_amount' => 'getFactoringFeeAmount',
        'factoring_fee_account_number' => 'getFactoringFeeAccountNumber',
        'bank_transaction_id' => 'getBankTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_TYPE_1 = 1;
    const PAYMENT_TYPE_2 = 2;
    const PAYMENT_TYPE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_1,
            self::PAYMENT_TYPE_2,
            self::PAYMENT_TYPE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_bank_account_id'] = isset($data['company_bank_account_id']) ? $data['company_bank_account_id'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['payment_currency'] = isset($data['payment_currency']) ? $data['payment_currency'] : null;
        $this->container['domestic_payment_amount'] = isset($data['domestic_payment_amount']) ? $data['domestic_payment_amount'] : null;
        $this->container['bank_fee_amount'] = isset($data['bank_fee_amount']) ? $data['bank_fee_amount'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['factoring_fee_amount'] = isset($data['factoring_fee_amount']) ? $data['factoring_fee_amount'] : null;
        $this->container['factoring_fee_account_number'] = isset($data['factoring_fee_account_number']) ? $data['factoring_fee_account_number'] : null;
        $this->container['bank_transaction_id'] = isset($data['bank_transaction_id']) ? $data['bank_transaction_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_bank_account_id'] === null) {
            $invalidProperties[] = "'company_bank_account_id' can't be null";
        }
        if ($this->container['payment_date'] === null) {
            $invalidProperties[] = "'payment_date' can't be null";
        }
        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['payment_amount'] === null) {
            $invalidProperties[] = "'payment_amount' can't be null";
        }
        if ($this->container['payment_currency'] === null) {
            $invalidProperties[] = "'payment_currency' can't be null";
        }
        if (!is_null($this->container['bank_fee_amount']) && ($this->container['bank_fee_amount'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'bank_fee_amount', must be smaller than or equal to 1000000000.";
        }

        if (!is_null($this->container['bank_fee_amount']) && ($this->container['bank_fee_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'bank_fee_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['payment_type'] === null) {
            $invalidProperties[] = "'payment_type' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (($this->container['payment_type'] > 3)) {
            $invalidProperties[] = "invalid value for 'payment_type', must be smaller than or equal to 3.";
        }

        if (($this->container['payment_type'] < 1)) {
            $invalidProperties[] = "invalid value for 'payment_type', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_bank_account_id
     *
     * @return string
     */
    public function getCompanyBankAccountId()
    {
        return $this->container['company_bank_account_id'];
    }

    /**
     * Sets company_bank_account_id
     *
     * @param string $company_bank_account_id The bank account to which the payment is recorded
     *
     * @return $this
     */
    public function setCompanyBankAccountId($company_bank_account_id)
    {
        $this->container['company_bank_account_id'] = $company_bank_account_id;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date Future dates cannot be set. Date format: yyyy-mm-dd
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling InvoicePaymentApi., must be smaller than or equal to 100.');
        }
        if (!is_null($reference) && (mb_strlen($reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling InvoicePaymentApi., must be bigger than or equal to 0.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return double
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param double $payment_amount Amount in invoice currency. If bank fee: for customer invoices, extract that amount here. For supplier invoices, do not extract bank fee amount here.
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets payment_currency
     *
     * @return string
     */
    public function getPaymentCurrency()
    {
        return $this->container['payment_currency'];
    }

    /**
     * Sets payment_currency
     *
     * @param string $payment_currency payment_currency
     *
     * @return $this
     */
    public function setPaymentCurrency($payment_currency)
    {
        $this->container['payment_currency'] = $payment_currency;

        return $this;
    }

    /**
     * Gets domestic_payment_amount
     *
     * @return double
     */
    public function getDomesticPaymentAmount()
    {
        return $this->container['domestic_payment_amount'];
    }

    /**
     * Sets domestic_payment_amount
     *
     * @param double $domestic_payment_amount Only for non domestic invoices paid with cheque account. If bank fee: for customer invoices, extract that amount here. For supplier invoices, do not extract bank fee amount here.
     *
     * @return $this
     */
    public function setDomesticPaymentAmount($domestic_payment_amount)
    {
        $this->container['domestic_payment_amount'] = $domestic_payment_amount;

        return $this;
    }

    /**
     * Gets bank_fee_amount
     *
     * @return double
     */
    public function getBankFeeAmount()
    {
        return $this->container['bank_fee_amount'];
    }

    /**
     * Sets bank_fee_amount
     *
     * @param double $bank_fee_amount bank_fee_amount
     *
     * @return $this
     */
    public function setBankFeeAmount($bank_fee_amount)
    {

        if (!is_null($bank_fee_amount) && ($bank_fee_amount > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $bank_fee_amount when calling InvoicePaymentApi., must be smaller than or equal to 1000000000.');
        }
        if (!is_null($bank_fee_amount) && ($bank_fee_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $bank_fee_amount when calling InvoicePaymentApi., must be bigger than or equal to 0.');
        }

        $this->container['bank_fee_amount'] = $bank_fee_amount;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return int
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param int $payment_type 1 = PartialPayment, 2 = CompletePayment, 3 = Rounding
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (($payment_type > 3)) {
            throw new \InvalidArgumentException('invalid value for $payment_type when calling InvoicePaymentApi., must be smaller than or equal to 3.');
        }
        if (($payment_type < 1)) {
            throw new \InvalidArgumentException('invalid value for $payment_type when calling InvoicePaymentApi., must be bigger than or equal to 1.');
        }

        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets factoring_fee_amount
     *
     * @return double
     */
    public function getFactoringFeeAmount()
    {
        return $this->container['factoring_fee_amount'];
    }

    /**
     * Sets factoring_fee_amount
     *
     * @param double $factoring_fee_amount Factoring fee amount for the current invoice, supported only for customer invoice payments
     *
     * @return $this
     */
    public function setFactoringFeeAmount($factoring_fee_amount)
    {
        $this->container['factoring_fee_amount'] = $factoring_fee_amount;

        return $this;
    }

    /**
     * Gets factoring_fee_account_number
     *
     * @return int
     */
    public function getFactoringFeeAccountNumber()
    {
        return $this->container['factoring_fee_account_number'];
    }

    /**
     * Sets factoring_fee_account_number
     *
     * @param int $factoring_fee_account_number Factoring account number, supported only for customer invoice payments
     *
     * @return $this
     */
    public function setFactoringFeeAccountNumber($factoring_fee_account_number)
    {
        $this->container['factoring_fee_account_number'] = $factoring_fee_account_number;

        return $this;
    }

    /**
     * Gets bank_transaction_id
     *
     * @return string
     */
    public function getBankTransactionId()
    {
        return $this->container['bank_transaction_id'];
    }

    /**
     * Sets bank_transaction_id
     *
     * @param string $bank_transaction_id Purpose: The id inside eAccounting of the bank transaction corresponding to the payment
     *
     * @return $this
     */
    public function setBankTransactionId($bank_transaction_id)
    {
        $this->container['bank_transaction_id'] = $bank_transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


