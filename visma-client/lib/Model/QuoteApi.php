<?php
/**
 * QuoteApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * QuoteApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuoteApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QuoteApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'int',
        'customer_id' => 'string',
        'due_date' => '\DateTime',
        'quote_date' => '\DateTime',
        'created_utc' => '\DateTime',
        'approved_date' => '\DateTime',
        'currency_code' => 'string',
        'status' => 'int',
        'currency_rate' => 'double',
        'company_reference' => 'string',
        'eu_third_party' => 'bool',
        'customer_reference' => 'string',
        'invoice_customer_name' => 'string',
        'invoice_address1' => 'string',
        'invoice_address2' => 'string',
        'invoice_postal_code' => 'string',
        'invoice_city' => 'string',
        'invoice_country_code' => 'string',
        'delivery_customer_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_postal_code' => 'string',
        'delivery_city' => 'string',
        'delivery_country_code' => 'string',
        'delivery_method_name' => 'string',
        'delivery_method_code' => 'string',
        'delivery_term_code' => 'string',
        'delivery_term_name' => 'string',
        'customer_is_private_person' => 'bool',
        'includes_vat' => 'bool',
        'is_domestic' => 'bool',
        'rot_reduced_invoicing_type' => 'int',
        'rot_property_type' => 'int',
        'rot_reduced_invoicing_property_name' => 'string',
        'rot_reduced_invoicing_org_number' => 'string',
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_automatic_distribution' => 'bool',
        'persons' => '\Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]',
        'terms_of_payment' => '\Struqtur\VismaEAccounting\Model\TermsOfPaymentApi',
        'sales_document_attachments' => 'string[]',
        'message_threads' => 'string[]',
        'notes' => 'string[]',
        'rows' => '\Struqtur\VismaEAccounting\Model\QuoteRowApi[]',
        'total_amount' => 'double',
        'vat_amount' => 'double',
        'roundings_amount' => 'double',
        'uses_green_technology' => 'bool',
        'is_not_delivered' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'number' => 'int32',
        'customer_id' => 'uuid',
        'due_date' => 'date-time',
        'quote_date' => 'date-time',
        'created_utc' => 'date-time',
        'approved_date' => 'date-time',
        'currency_code' => null,
        'status' => 'int32',
        'currency_rate' => 'double',
        'company_reference' => null,
        'eu_third_party' => null,
        'customer_reference' => null,
        'invoice_customer_name' => null,
        'invoice_address1' => null,
        'invoice_address2' => null,
        'invoice_postal_code' => null,
        'invoice_city' => null,
        'invoice_country_code' => null,
        'delivery_customer_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_postal_code' => null,
        'delivery_city' => null,
        'delivery_country_code' => null,
        'delivery_method_name' => null,
        'delivery_method_code' => null,
        'delivery_term_code' => null,
        'delivery_term_name' => null,
        'customer_is_private_person' => null,
        'includes_vat' => null,
        'is_domestic' => null,
        'rot_reduced_invoicing_type' => 'int32',
        'rot_property_type' => 'int32',
        'rot_reduced_invoicing_property_name' => null,
        'rot_reduced_invoicing_org_number' => null,
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_automatic_distribution' => null,
        'persons' => null,
        'terms_of_payment' => null,
        'sales_document_attachments' => 'uuid',
        'message_threads' => 'uuid',
        'notes' => 'uuid',
        'rows' => null,
        'total_amount' => 'double',
        'vat_amount' => 'double',
        'roundings_amount' => 'double',
        'uses_green_technology' => null,
        'is_not_delivered' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'number' => 'Number',
        'customer_id' => 'CustomerId',
        'due_date' => 'DueDate',
        'quote_date' => 'QuoteDate',
        'created_utc' => 'CreatedUtc',
        'approved_date' => 'ApprovedDate',
        'currency_code' => 'CurrencyCode',
        'status' => 'Status',
        'currency_rate' => 'CurrencyRate',
        'company_reference' => 'CompanyReference',
        'eu_third_party' => 'EuThirdParty',
        'customer_reference' => 'CustomerReference',
        'invoice_customer_name' => 'InvoiceCustomerName',
        'invoice_address1' => 'InvoiceAddress1',
        'invoice_address2' => 'InvoiceAddress2',
        'invoice_postal_code' => 'InvoicePostalCode',
        'invoice_city' => 'InvoiceCity',
        'invoice_country_code' => 'InvoiceCountryCode',
        'delivery_customer_name' => 'DeliveryCustomerName',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_postal_code' => 'DeliveryPostalCode',
        'delivery_city' => 'DeliveryCity',
        'delivery_country_code' => 'DeliveryCountryCode',
        'delivery_method_name' => 'DeliveryMethodName',
        'delivery_method_code' => 'DeliveryMethodCode',
        'delivery_term_code' => 'DeliveryTermCode',
        'delivery_term_name' => 'DeliveryTermName',
        'customer_is_private_person' => 'CustomerIsPrivatePerson',
        'includes_vat' => 'IncludesVat',
        'is_domestic' => 'IsDomestic',
        'rot_reduced_invoicing_type' => 'RotReducedInvoicingType',
        'rot_property_type' => 'RotPropertyType',
        'rot_reduced_invoicing_property_name' => 'RotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'RotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'RotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'RotReducedInvoicingAutomaticDistribution',
        'persons' => 'Persons',
        'terms_of_payment' => 'TermsOfPayment',
        'sales_document_attachments' => 'SalesDocumentAttachments',
        'message_threads' => 'MessageThreads',
        'notes' => 'Notes',
        'rows' => 'Rows',
        'total_amount' => 'TotalAmount',
        'vat_amount' => 'VatAmount',
        'roundings_amount' => 'RoundingsAmount',
        'uses_green_technology' => 'UsesGreenTechnology',
        'is_not_delivered' => 'IsNotDelivered'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'customer_id' => 'setCustomerId',
        'due_date' => 'setDueDate',
        'quote_date' => 'setQuoteDate',
        'created_utc' => 'setCreatedUtc',
        'approved_date' => 'setApprovedDate',
        'currency_code' => 'setCurrencyCode',
        'status' => 'setStatus',
        'currency_rate' => 'setCurrencyRate',
        'company_reference' => 'setCompanyReference',
        'eu_third_party' => 'setEuThirdParty',
        'customer_reference' => 'setCustomerReference',
        'invoice_customer_name' => 'setInvoiceCustomerName',
        'invoice_address1' => 'setInvoiceAddress1',
        'invoice_address2' => 'setInvoiceAddress2',
        'invoice_postal_code' => 'setInvoicePostalCode',
        'invoice_city' => 'setInvoiceCity',
        'invoice_country_code' => 'setInvoiceCountryCode',
        'delivery_customer_name' => 'setDeliveryCustomerName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_postal_code' => 'setDeliveryPostalCode',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country_code' => 'setDeliveryCountryCode',
        'delivery_method_name' => 'setDeliveryMethodName',
        'delivery_method_code' => 'setDeliveryMethodCode',
        'delivery_term_code' => 'setDeliveryTermCode',
        'delivery_term_name' => 'setDeliveryTermName',
        'customer_is_private_person' => 'setCustomerIsPrivatePerson',
        'includes_vat' => 'setIncludesVat',
        'is_domestic' => 'setIsDomestic',
        'rot_reduced_invoicing_type' => 'setRotReducedInvoicingType',
        'rot_property_type' => 'setRotPropertyType',
        'rot_reduced_invoicing_property_name' => 'setRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'setRotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'setRotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'setRotReducedInvoicingAutomaticDistribution',
        'persons' => 'setPersons',
        'terms_of_payment' => 'setTermsOfPayment',
        'sales_document_attachments' => 'setSalesDocumentAttachments',
        'message_threads' => 'setMessageThreads',
        'notes' => 'setNotes',
        'rows' => 'setRows',
        'total_amount' => 'setTotalAmount',
        'vat_amount' => 'setVatAmount',
        'roundings_amount' => 'setRoundingsAmount',
        'uses_green_technology' => 'setUsesGreenTechnology',
        'is_not_delivered' => 'setIsNotDelivered'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'customer_id' => 'getCustomerId',
        'due_date' => 'getDueDate',
        'quote_date' => 'getQuoteDate',
        'created_utc' => 'getCreatedUtc',
        'approved_date' => 'getApprovedDate',
        'currency_code' => 'getCurrencyCode',
        'status' => 'getStatus',
        'currency_rate' => 'getCurrencyRate',
        'company_reference' => 'getCompanyReference',
        'eu_third_party' => 'getEuThirdParty',
        'customer_reference' => 'getCustomerReference',
        'invoice_customer_name' => 'getInvoiceCustomerName',
        'invoice_address1' => 'getInvoiceAddress1',
        'invoice_address2' => 'getInvoiceAddress2',
        'invoice_postal_code' => 'getInvoicePostalCode',
        'invoice_city' => 'getInvoiceCity',
        'invoice_country_code' => 'getInvoiceCountryCode',
        'delivery_customer_name' => 'getDeliveryCustomerName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_postal_code' => 'getDeliveryPostalCode',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country_code' => 'getDeliveryCountryCode',
        'delivery_method_name' => 'getDeliveryMethodName',
        'delivery_method_code' => 'getDeliveryMethodCode',
        'delivery_term_code' => 'getDeliveryTermCode',
        'delivery_term_name' => 'getDeliveryTermName',
        'customer_is_private_person' => 'getCustomerIsPrivatePerson',
        'includes_vat' => 'getIncludesVat',
        'is_domestic' => 'getIsDomestic',
        'rot_reduced_invoicing_type' => 'getRotReducedInvoicingType',
        'rot_property_type' => 'getRotPropertyType',
        'rot_reduced_invoicing_property_name' => 'getRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'getRotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'getRotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'getRotReducedInvoicingAutomaticDistribution',
        'persons' => 'getPersons',
        'terms_of_payment' => 'getTermsOfPayment',
        'sales_document_attachments' => 'getSalesDocumentAttachments',
        'message_threads' => 'getMessageThreads',
        'notes' => 'getNotes',
        'rows' => 'getRows',
        'total_amount' => 'getTotalAmount',
        'vat_amount' => 'getVatAmount',
        'roundings_amount' => 'getRoundingsAmount',
        'uses_green_technology' => 'getUsesGreenTechnology',
        'is_not_delivered' => 'getIsNotDelivered'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_0 = 0;
    const STATUS_1 = 1;
    const STATUS_2 = 2;
    const STATUS_3 = 3;
    const ROT_REDUCED_INVOICING_TYPE_0 = 0;
    const ROT_REDUCED_INVOICING_TYPE_1 = 1;
    const ROT_REDUCED_INVOICING_TYPE_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_0,
            self::STATUS_1,
            self::STATUS_2,
            self::STATUS_3,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRotReducedInvoicingTypeAllowableValues()
    {
        return [
            self::ROT_REDUCED_INVOICING_TYPE_0,
            self::ROT_REDUCED_INVOICING_TYPE_1,
            self::ROT_REDUCED_INVOICING_TYPE_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['quote_date'] = isset($data['quote_date']) ? $data['quote_date'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['approved_date'] = isset($data['approved_date']) ? $data['approved_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['company_reference'] = isset($data['company_reference']) ? $data['company_reference'] : null;
        $this->container['eu_third_party'] = isset($data['eu_third_party']) ? $data['eu_third_party'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
        $this->container['invoice_customer_name'] = isset($data['invoice_customer_name']) ? $data['invoice_customer_name'] : null;
        $this->container['invoice_address1'] = isset($data['invoice_address1']) ? $data['invoice_address1'] : null;
        $this->container['invoice_address2'] = isset($data['invoice_address2']) ? $data['invoice_address2'] : null;
        $this->container['invoice_postal_code'] = isset($data['invoice_postal_code']) ? $data['invoice_postal_code'] : null;
        $this->container['invoice_city'] = isset($data['invoice_city']) ? $data['invoice_city'] : null;
        $this->container['invoice_country_code'] = isset($data['invoice_country_code']) ? $data['invoice_country_code'] : null;
        $this->container['delivery_customer_name'] = isset($data['delivery_customer_name']) ? $data['delivery_customer_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_postal_code'] = isset($data['delivery_postal_code']) ? $data['delivery_postal_code'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_country_code'] = isset($data['delivery_country_code']) ? $data['delivery_country_code'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['delivery_method_code'] = isset($data['delivery_method_code']) ? $data['delivery_method_code'] : null;
        $this->container['delivery_term_code'] = isset($data['delivery_term_code']) ? $data['delivery_term_code'] : null;
        $this->container['delivery_term_name'] = isset($data['delivery_term_name']) ? $data['delivery_term_name'] : null;
        $this->container['customer_is_private_person'] = isset($data['customer_is_private_person']) ? $data['customer_is_private_person'] : null;
        $this->container['includes_vat'] = isset($data['includes_vat']) ? $data['includes_vat'] : null;
        $this->container['is_domestic'] = isset($data['is_domestic']) ? $data['is_domestic'] : null;
        $this->container['rot_reduced_invoicing_type'] = isset($data['rot_reduced_invoicing_type']) ? $data['rot_reduced_invoicing_type'] : null;
        $this->container['rot_property_type'] = isset($data['rot_property_type']) ? $data['rot_property_type'] : null;
        $this->container['rot_reduced_invoicing_property_name'] = isset($data['rot_reduced_invoicing_property_name']) ? $data['rot_reduced_invoicing_property_name'] : null;
        $this->container['rot_reduced_invoicing_org_number'] = isset($data['rot_reduced_invoicing_org_number']) ? $data['rot_reduced_invoicing_org_number'] : null;
        $this->container['rot_reduced_invoicing_amount'] = isset($data['rot_reduced_invoicing_amount']) ? $data['rot_reduced_invoicing_amount'] : null;
        $this->container['rot_reduced_invoicing_automatic_distribution'] = isset($data['rot_reduced_invoicing_automatic_distribution']) ? $data['rot_reduced_invoicing_automatic_distribution'] : null;
        $this->container['persons'] = isset($data['persons']) ? $data['persons'] : null;
        $this->container['terms_of_payment'] = isset($data['terms_of_payment']) ? $data['terms_of_payment'] : null;
        $this->container['sales_document_attachments'] = isset($data['sales_document_attachments']) ? $data['sales_document_attachments'] : null;
        $this->container['message_threads'] = isset($data['message_threads']) ? $data['message_threads'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['roundings_amount'] = isset($data['roundings_amount']) ? $data['roundings_amount'] : null;
        $this->container['uses_green_technology'] = isset($data['uses_green_technology']) ? $data['uses_green_technology'] : null;
        $this->container['is_not_delivered'] = isset($data['is_not_delivered']) ? $data['is_not_delivered'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!is_null($this->container['rot_reduced_invoicing_type']) && !in_array($this->container['rot_reduced_invoicing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Format: YYYY-MM-DD. Default: null
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets quote_date
     *
     * @return \DateTime
     */
    public function getQuoteDate()
    {
        return $this->container['quote_date'];
    }

    /**
     * Sets quote_date
     *
     * @param \DateTime $quote_date Format: YYYY-MM-DD. Default: null
     *
     * @return $this
     */
    public function setQuoteDate($quote_date)
    {
        $this->container['quote_date'] = $quote_date;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets approved_date
     *
     * @return \DateTime
     */
    public function getApprovedDate()
    {
        return $this->container['approved_date'];
    }

    /**
     * Sets approved_date
     *
     * @param \DateTime $approved_date Default: null. Value will be set if the quote is approved
     *
     * @return $this
     */
    public function setApprovedDate($approved_date)
    {
        $this->container['approved_date'] = $approved_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 0 = Draft, 1 = Ongoing, 2 = Approved, 3 = Invoiced
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return double
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param double $currency_rate currency_rate
     *
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets company_reference
     *
     * @return string
     */
    public function getCompanyReference()
    {
        return $this->container['company_reference'];
    }

    /**
     * Sets company_reference
     *
     * @param string $company_reference company_reference
     *
     * @return $this
     */
    public function setCompanyReference($company_reference)
    {
        $this->container['company_reference'] = $company_reference;

        return $this;
    }

    /**
     * Gets eu_third_party
     *
     * @return bool
     */
    public function getEuThirdParty()
    {
        return $this->container['eu_third_party'];
    }

    /**
     * Sets eu_third_party
     *
     * @param bool $eu_third_party eu_third_party
     *
     * @return $this
     */
    public function setEuThirdParty($eu_third_party)
    {
        $this->container['eu_third_party'] = $eu_third_party;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference customer_reference
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets invoice_customer_name
     *
     * @return string
     */
    public function getInvoiceCustomerName()
    {
        return $this->container['invoice_customer_name'];
    }

    /**
     * Sets invoice_customer_name
     *
     * @param string $invoice_customer_name invoice_customer_name
     *
     * @return $this
     */
    public function setInvoiceCustomerName($invoice_customer_name)
    {
        $this->container['invoice_customer_name'] = $invoice_customer_name;

        return $this;
    }

    /**
     * Gets invoice_address1
     *
     * @return string
     */
    public function getInvoiceAddress1()
    {
        return $this->container['invoice_address1'];
    }

    /**
     * Sets invoice_address1
     *
     * @param string $invoice_address1 Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceAddress1($invoice_address1)
    {
        $this->container['invoice_address1'] = $invoice_address1;

        return $this;
    }

    /**
     * Gets invoice_address2
     *
     * @return string
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoice_address2'];
    }

    /**
     * Sets invoice_address2
     *
     * @param string $invoice_address2 Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceAddress2($invoice_address2)
    {
        $this->container['invoice_address2'] = $invoice_address2;

        return $this;
    }

    /**
     * Gets invoice_postal_code
     *
     * @return string
     */
    public function getInvoicePostalCode()
    {
        return $this->container['invoice_postal_code'];
    }

    /**
     * Sets invoice_postal_code
     *
     * @param string $invoice_postal_code Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoicePostalCode($invoice_postal_code)
    {
        $this->container['invoice_postal_code'] = $invoice_postal_code;

        return $this;
    }

    /**
     * Gets invoice_city
     *
     * @return string
     */
    public function getInvoiceCity()
    {
        return $this->container['invoice_city'];
    }

    /**
     * Sets invoice_city
     *
     * @param string $invoice_city Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceCity($invoice_city)
    {
        $this->container['invoice_city'] = $invoice_city;

        return $this;
    }

    /**
     * Gets invoice_country_code
     *
     * @return string
     */
    public function getInvoiceCountryCode()
    {
        return $this->container['invoice_country_code'];
    }

    /**
     * Sets invoice_country_code
     *
     * @param string $invoice_country_code Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceCountryCode($invoice_country_code)
    {
        $this->container['invoice_country_code'] = $invoice_country_code;

        return $this;
    }

    /**
     * Gets delivery_customer_name
     *
     * @return string
     */
    public function getDeliveryCustomerName()
    {
        return $this->container['delivery_customer_name'];
    }

    /**
     * Sets delivery_customer_name
     *
     * @param string $delivery_customer_name Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCustomerName($delivery_customer_name)
    {
        $this->container['delivery_customer_name'] = $delivery_customer_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string $delivery_address1 Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string $delivery_address2 Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_postal_code
     *
     * @return string
     */
    public function getDeliveryPostalCode()
    {
        return $this->container['delivery_postal_code'];
    }

    /**
     * Sets delivery_postal_code
     *
     * @param string $delivery_postal_code Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryPostalCode($delivery_postal_code)
    {
        $this->container['delivery_postal_code'] = $delivery_postal_code;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string $delivery_city Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country_code
     *
     * @return string
     */
    public function getDeliveryCountryCode()
    {
        return $this->container['delivery_country_code'];
    }

    /**
     * Sets delivery_country_code
     *
     * @param string $delivery_country_code Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCountryCode($delivery_country_code)
    {
        $this->container['delivery_country_code'] = $delivery_country_code;

        return $this;
    }

    /**
     * Gets delivery_method_name
     *
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     *
     * @param string $delivery_method_name delivery_method_name
     *
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets delivery_method_code
     *
     * @return string
     */
    public function getDeliveryMethodCode()
    {
        return $this->container['delivery_method_code'];
    }

    /**
     * Sets delivery_method_code
     *
     * @param string $delivery_method_code delivery_method_code
     *
     * @return $this
     */
    public function setDeliveryMethodCode($delivery_method_code)
    {
        $this->container['delivery_method_code'] = $delivery_method_code;

        return $this;
    }

    /**
     * Gets delivery_term_code
     *
     * @return string
     */
    public function getDeliveryTermCode()
    {
        return $this->container['delivery_term_code'];
    }

    /**
     * Sets delivery_term_code
     *
     * @param string $delivery_term_code delivery_term_code
     *
     * @return $this
     */
    public function setDeliveryTermCode($delivery_term_code)
    {
        $this->container['delivery_term_code'] = $delivery_term_code;

        return $this;
    }

    /**
     * Gets delivery_term_name
     *
     * @return string
     */
    public function getDeliveryTermName()
    {
        return $this->container['delivery_term_name'];
    }

    /**
     * Sets delivery_term_name
     *
     * @param string $delivery_term_name delivery_term_name
     *
     * @return $this
     */
    public function setDeliveryTermName($delivery_term_name)
    {
        $this->container['delivery_term_name'] = $delivery_term_name;

        return $this;
    }

    /**
     * Gets customer_is_private_person
     *
     * @return bool
     */
    public function getCustomerIsPrivatePerson()
    {
        return $this->container['customer_is_private_person'];
    }

    /**
     * Sets customer_is_private_person
     *
     * @param bool $customer_is_private_person customer_is_private_person
     *
     * @return $this
     */
    public function setCustomerIsPrivatePerson($customer_is_private_person)
    {
        $this->container['customer_is_private_person'] = $customer_is_private_person;

        return $this;
    }

    /**
     * Gets includes_vat
     *
     * @return bool
     */
    public function getIncludesVat()
    {
        return $this->container['includes_vat'];
    }

    /**
     * Sets includes_vat
     *
     * @param bool $includes_vat includes_vat
     *
     * @return $this
     */
    public function setIncludesVat($includes_vat)
    {
        $this->container['includes_vat'] = $includes_vat;

        return $this;
    }

    /**
     * Gets is_domestic
     *
     * @return bool
     */
    public function getIsDomestic()
    {
        return $this->container['is_domestic'];
    }

    /**
     * Sets is_domestic
     *
     * @param bool $is_domestic is_domestic
     *
     * @return $this
     */
    public function setIsDomestic($is_domestic)
    {
        $this->container['is_domestic'] = $is_domestic;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_type
     *
     * @return int
     */
    public function getRotReducedInvoicingType()
    {
        return $this->container['rot_reduced_invoicing_type'];
    }

    /**
     * Sets rot_reduced_invoicing_type
     *
     * @param int $rot_reduced_invoicing_type 0 = Normal, 1 = Rot, 2 = Rut
     *
     * @return $this
     */
    public function setRotReducedInvoicingType($rot_reduced_invoicing_type)
    {
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!is_null($rot_reduced_invoicing_type) && !in_array($rot_reduced_invoicing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rot_reduced_invoicing_type'] = $rot_reduced_invoicing_type;

        return $this;
    }

    /**
     * Gets rot_property_type
     *
     * @return int
     */
    public function getRotPropertyType()
    {
        return $this->container['rot_property_type'];
    }

    /**
     * Sets rot_property_type
     *
     * @param int $rot_property_type 1 = Apartment, 2 = Property
     *
     * @return $this
     */
    public function setRotPropertyType($rot_property_type)
    {
        $this->container['rot_property_type'] = $rot_property_type;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_property_name
     *
     * @return string
     */
    public function getRotReducedInvoicingPropertyName()
    {
        return $this->container['rot_reduced_invoicing_property_name'];
    }

    /**
     * Sets rot_reduced_invoicing_property_name
     *
     * @param string $rot_reduced_invoicing_property_name Max length: 40 characters
     *
     * @return $this
     */
    public function setRotReducedInvoicingPropertyName($rot_reduced_invoicing_property_name)
    {
        $this->container['rot_reduced_invoicing_property_name'] = $rot_reduced_invoicing_property_name;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_org_number
     *
     * @return string
     */
    public function getRotReducedInvoicingOrgNumber()
    {
        return $this->container['rot_reduced_invoicing_org_number'];
    }

    /**
     * Sets rot_reduced_invoicing_org_number
     *
     * @param string $rot_reduced_invoicing_org_number Max length: 11 characters
     *
     * @return $this
     */
    public function setRotReducedInvoicingOrgNumber($rot_reduced_invoicing_org_number)
    {
        $this->container['rot_reduced_invoicing_org_number'] = $rot_reduced_invoicing_org_number;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_amount
     *
     * @return double
     */
    public function getRotReducedInvoicingAmount()
    {
        return $this->container['rot_reduced_invoicing_amount'];
    }

    /**
     * Sets rot_reduced_invoicing_amount
     *
     * @param double $rot_reduced_invoicing_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setRotReducedInvoicingAmount($rot_reduced_invoicing_amount)
    {
        $this->container['rot_reduced_invoicing_amount'] = $rot_reduced_invoicing_amount;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_automatic_distribution
     *
     * @return bool
     */
    public function getRotReducedInvoicingAutomaticDistribution()
    {
        return $this->container['rot_reduced_invoicing_automatic_distribution'];
    }

    /**
     * Sets rot_reduced_invoicing_automatic_distribution
     *
     * @param bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution
     *
     * @return $this
     */
    public function setRotReducedInvoicingAutomaticDistribution($rot_reduced_invoicing_automatic_distribution)
    {
        $this->container['rot_reduced_invoicing_automatic_distribution'] = $rot_reduced_invoicing_automatic_distribution;

        return $this;
    }

    /**
     * Gets persons
     *
     * @return \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]
     */
    public function getPersons()
    {
        return $this->container['persons'];
    }

    /**
     * Sets persons
     *
     * @param \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[] $persons Only available for ROT/RUT or Green Technology
     *
     * @return $this
     */
    public function setPersons($persons)
    {
        $this->container['persons'] = $persons;

        return $this;
    }

    /**
     * Gets terms_of_payment
     *
     * @return \Struqtur\VismaEAccounting\Model\TermsOfPaymentApi
     */
    public function getTermsOfPayment()
    {
        return $this->container['terms_of_payment'];
    }

    /**
     * Sets terms_of_payment
     *
     * @param \Struqtur\VismaEAccounting\Model\TermsOfPaymentApi $terms_of_payment terms_of_payment
     *
     * @return $this
     */
    public function setTermsOfPayment($terms_of_payment)
    {
        $this->container['terms_of_payment'] = $terms_of_payment;

        return $this;
    }

    /**
     * Gets sales_document_attachments
     *
     * @return string[]
     */
    public function getSalesDocumentAttachments()
    {
        return $this->container['sales_document_attachments'];
    }

    /**
     * Sets sales_document_attachments
     *
     * @param string[] $sales_document_attachments Fetch SalesDocumentAttachments via GET /v2/salesdocumentattachments/{attachmentId}
     *
     * @return $this
     */
    public function setSalesDocumentAttachments($sales_document_attachments)
    {
        $this->container['sales_document_attachments'] = $sales_document_attachments;

        return $this;
    }

    /**
     * Gets message_threads
     *
     * @return string[]
     */
    public function getMessageThreads()
    {
        return $this->container['message_threads'];
    }

    /**
     * Sets message_threads
     *
     * @param string[] $message_threads Fetch messages via GET /v2/messagethreads/{messageThreadId}
     *
     * @return $this
     */
    public function setMessageThreads($message_threads)
    {
        $this->container['message_threads'] = $message_threads;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes Fetch notes via GET /v2/notes/{notesId}
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \Struqtur\VismaEAccounting\Model\QuoteRowApi[]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \Struqtur\VismaEAccounting\Model\QuoteRowApi[] $rows rows
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return double
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param double $vat_amount vat_amount
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets roundings_amount
     *
     * @return double
     */
    public function getRoundingsAmount()
    {
        return $this->container['roundings_amount'];
    }

    /**
     * Sets roundings_amount
     *
     * @param double $roundings_amount roundings_amount
     *
     * @return $this
     */
    public function setRoundingsAmount($roundings_amount)
    {
        $this->container['roundings_amount'] = $roundings_amount;

        return $this;
    }

    /**
     * Gets uses_green_technology
     *
     * @return bool
     */
    public function getUsesGreenTechnology()
    {
        return $this->container['uses_green_technology'];
    }

    /**
     * Sets uses_green_technology
     *
     * @param bool $uses_green_technology Set to true if this quote benefits from deduction on Green Technology.  If set to true the quote must have RotReducedInvoicingType set to normal and contain at least one row with applicable deduction.
     *
     * @return $this
     */
    public function setUsesGreenTechnology($uses_green_technology)
    {
        $this->container['uses_green_technology'] = $uses_green_technology;

        return $this;
    }

    /**
     * Gets is_not_delivered
     *
     * @return bool
     */
    public function getIsNotDelivered()
    {
        return $this->container['is_not_delivered'];
    }

    /**
     * Sets is_not_delivered
     *
     * @param bool $is_not_delivered is_not_delivered
     *
     * @return $this
     */
    public function setIsNotDelivered($is_not_delivered)
    {
        $this->container['is_not_delivered'] = $is_not_delivered;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


