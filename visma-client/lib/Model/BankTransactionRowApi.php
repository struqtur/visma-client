<?php
/**
 * BankTransactionRowApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * BankTransactionRowApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankTransactionRowApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankTransactionRowApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_voucher_id' => 'string',
        'payment_voucher_number' => 'string',
        'amount_transaction_currency' => 'double',
        'number' => 'string',
        'name' => 'string',
        'reference' => 'string',
        'source' => 'string',
        'source_id' => 'string',
        'voucher_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_voucher_id' => 'uuid',
        'payment_voucher_number' => null,
        'amount_transaction_currency' => 'double',
        'number' => null,
        'name' => null,
        'reference' => null,
        'source' => null,
        'source_id' => 'uuid',
        'voucher_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_voucher_id' => 'PaymentVoucherId',
        'payment_voucher_number' => 'PaymentVoucherNumber',
        'amount_transaction_currency' => 'AmountTransactionCurrency',
        'number' => 'Number',
        'name' => 'Name',
        'reference' => 'Reference',
        'source' => 'Source',
        'source_id' => 'SourceId',
        'voucher_id' => 'VoucherId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_voucher_id' => 'setPaymentVoucherId',
        'payment_voucher_number' => 'setPaymentVoucherNumber',
        'amount_transaction_currency' => 'setAmountTransactionCurrency',
        'number' => 'setNumber',
        'name' => 'setName',
        'reference' => 'setReference',
        'source' => 'setSource',
        'source_id' => 'setSourceId',
        'voucher_id' => 'setVoucherId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_voucher_id' => 'getPaymentVoucherId',
        'payment_voucher_number' => 'getPaymentVoucherNumber',
        'amount_transaction_currency' => 'getAmountTransactionCurrency',
        'number' => 'getNumber',
        'name' => 'getName',
        'reference' => 'getReference',
        'source' => 'getSource',
        'source_id' => 'getSourceId',
        'voucher_id' => 'getVoucherId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_voucher_id'] = isset($data['payment_voucher_id']) ? $data['payment_voucher_id'] : null;
        $this->container['payment_voucher_number'] = isset($data['payment_voucher_number']) ? $data['payment_voucher_number'] : null;
        $this->container['amount_transaction_currency'] = isset($data['amount_transaction_currency']) ? $data['amount_transaction_currency'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_voucher_id
     *
     * @return string
     */
    public function getPaymentVoucherId()
    {
        return $this->container['payment_voucher_id'];
    }

    /**
     * Sets payment_voucher_id
     *
     * @param string $payment_voucher_id Source: Get from /v2/vouchers
     *
     * @return $this
     */
    public function setPaymentVoucherId($payment_voucher_id)
    {
        $this->container['payment_voucher_id'] = $payment_voucher_id;

        return $this;
    }

    /**
     * Gets payment_voucher_number
     *
     * @return string
     */
    public function getPaymentVoucherNumber()
    {
        return $this->container['payment_voucher_number'];
    }

    /**
     * Sets payment_voucher_number
     *
     * @param string $payment_voucher_number payment_voucher_number
     *
     * @return $this
     */
    public function setPaymentVoucherNumber($payment_voucher_number)
    {
        $this->container['payment_voucher_number'] = $payment_voucher_number;

        return $this;
    }

    /**
     * Gets amount_transaction_currency
     *
     * @return double
     */
    public function getAmountTransactionCurrency()
    {
        return $this->container['amount_transaction_currency'];
    }

    /**
     * Sets amount_transaction_currency
     *
     * @param double $amount_transaction_currency amount_transaction_currency
     *
     * @return $this
     */
    public function setAmountTransactionCurrency($amount_transaction_currency)
    {
        $this->container['amount_transaction_currency'] = $amount_transaction_currency;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Depending on the Source property, it displays the number of the document associated to it
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Depending on the Source property, displays information like invoice customer or supplier name, or document description
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference If the source is a customer or supplier invoice, it represents the OCR number of the specific invoice
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The origin of the bank transaction
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id Represents the unique identifier of the Source property
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id Source: Get from /v2/vouchers
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


