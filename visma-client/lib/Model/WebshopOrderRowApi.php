<?php
/**
 * WebshopOrderRowApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * WebshopOrderRowApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebshopOrderRowApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebshopOrderRowApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'article_name' => 'string',
        'article_number' => 'string',
        'price_per_unit_invoice_currency' => 'double',
        'quantity' => 'double',
        'unit_abbreviation' => 'string',
        'sum' => 'double',
        'percent_vat' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'article_name' => null,
        'article_number' => null,
        'price_per_unit_invoice_currency' => 'double',
        'quantity' => 'double',
        'unit_abbreviation' => null,
        'sum' => 'double',
        'percent_vat' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'article_name' => 'ArticleName',
        'article_number' => 'ArticleNumber',
        'price_per_unit_invoice_currency' => 'PricePerUnitInvoiceCurrency',
        'quantity' => 'Quantity',
        'unit_abbreviation' => 'UnitAbbreviation',
        'sum' => 'Sum',
        'percent_vat' => 'PercentVat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'article_name' => 'setArticleName',
        'article_number' => 'setArticleNumber',
        'price_per_unit_invoice_currency' => 'setPricePerUnitInvoiceCurrency',
        'quantity' => 'setQuantity',
        'unit_abbreviation' => 'setUnitAbbreviation',
        'sum' => 'setSum',
        'percent_vat' => 'setPercentVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'article_name' => 'getArticleName',
        'article_number' => 'getArticleNumber',
        'price_per_unit_invoice_currency' => 'getPricePerUnitInvoiceCurrency',
        'quantity' => 'getQuantity',
        'unit_abbreviation' => 'getUnitAbbreviation',
        'sum' => 'getSum',
        'percent_vat' => 'getPercentVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['article_name'] = isset($data['article_name']) ? $data['article_name'] : null;
        $this->container['article_number'] = isset($data['article_number']) ? $data['article_number'] : null;
        $this->container['price_per_unit_invoice_currency'] = isset($data['price_per_unit_invoice_currency']) ? $data['price_per_unit_invoice_currency'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_abbreviation'] = isset($data['unit_abbreviation']) ? $data['unit_abbreviation'] : null;
        $this->container['sum'] = isset($data['sum']) ? $data['sum'] : null;
        $this->container['percent_vat'] = isset($data['percent_vat']) ? $data['percent_vat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets article_name
     *
     * @return string
     */
    public function getArticleName()
    {
        return $this->container['article_name'];
    }

    /**
     * Sets article_name
     *
     * @param string $article_name article_name
     *
     * @return $this
     */
    public function setArticleName($article_name)
    {
        $this->container['article_name'] = $article_name;

        return $this;
    }

    /**
     * Gets article_number
     *
     * @return string
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * Sets article_number
     *
     * @param string $article_number article_number
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * Gets price_per_unit_invoice_currency
     *
     * @return double
     */
    public function getPricePerUnitInvoiceCurrency()
    {
        return $this->container['price_per_unit_invoice_currency'];
    }

    /**
     * Sets price_per_unit_invoice_currency
     *
     * @param double $price_per_unit_invoice_currency price_per_unit_invoice_currency
     *
     * @return $this
     */
    public function setPricePerUnitInvoiceCurrency($price_per_unit_invoice_currency)
    {
        $this->container['price_per_unit_invoice_currency'] = $price_per_unit_invoice_currency;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_abbreviation
     *
     * @return string
     */
    public function getUnitAbbreviation()
    {
        return $this->container['unit_abbreviation'];
    }

    /**
     * Sets unit_abbreviation
     *
     * @param string $unit_abbreviation unit_abbreviation
     *
     * @return $this
     */
    public function setUnitAbbreviation($unit_abbreviation)
    {
        $this->container['unit_abbreviation'] = $unit_abbreviation;

        return $this;
    }

    /**
     * Gets sum
     *
     * @return double
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     *
     * @param double $sum sum
     *
     * @return $this
     */
    public function setSum($sum)
    {
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets percent_vat
     *
     * @return double
     */
    public function getPercentVat()
    {
        return $this->container['percent_vat'];
    }

    /**
     * Sets percent_vat
     *
     * @param double $percent_vat percent_vat
     *
     * @return $this
     */
    public function setPercentVat($percent_vat)
    {
        $this->container['percent_vat'] = $percent_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


