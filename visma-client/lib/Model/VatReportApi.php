<?php
/**
 * VatReportApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * VatReportApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VatReportApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VatReportApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'document_approval_status' => 'int',
        'document_id' => 'string',
        'created_utc' => '\DateTime',
        'is_regretted' => 'bool',
        'regretted_by_user_id' => 'string',
        'regretted_date' => '\DateTime',
        'modified_utc' => '\DateTime',
        'sent_for_approval_by_user_id' => 'string',
        'voucher_id' => 'string',
        'total_amount' => 'double',
        'approval_events_history' => '\Struqtur\VismaEAccounting\Model\DocumentApprovalEventApi[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'document_approval_status' => 'int32',
        'document_id' => 'uuid',
        'created_utc' => 'date-time',
        'is_regretted' => null,
        'regretted_by_user_id' => 'uuid',
        'regretted_date' => 'date-time',
        'modified_utc' => 'date-time',
        'sent_for_approval_by_user_id' => 'uuid',
        'voucher_id' => 'uuid',
        'total_amount' => 'double',
        'approval_events_history' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'document_approval_status' => 'DocumentApprovalStatus',
        'document_id' => 'DocumentId',
        'created_utc' => 'CreatedUtc',
        'is_regretted' => 'IsRegretted',
        'regretted_by_user_id' => 'RegrettedByUserId',
        'regretted_date' => 'RegrettedDate',
        'modified_utc' => 'ModifiedUtc',
        'sent_for_approval_by_user_id' => 'SentForApprovalByUserId',
        'voucher_id' => 'VoucherId',
        'total_amount' => 'TotalAmount',
        'approval_events_history' => 'ApprovalEventsHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'document_approval_status' => 'setDocumentApprovalStatus',
        'document_id' => 'setDocumentId',
        'created_utc' => 'setCreatedUtc',
        'is_regretted' => 'setIsRegretted',
        'regretted_by_user_id' => 'setRegrettedByUserId',
        'regretted_date' => 'setRegrettedDate',
        'modified_utc' => 'setModifiedUtc',
        'sent_for_approval_by_user_id' => 'setSentForApprovalByUserId',
        'voucher_id' => 'setVoucherId',
        'total_amount' => 'setTotalAmount',
        'approval_events_history' => 'setApprovalEventsHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'document_approval_status' => 'getDocumentApprovalStatus',
        'document_id' => 'getDocumentId',
        'created_utc' => 'getCreatedUtc',
        'is_regretted' => 'getIsRegretted',
        'regretted_by_user_id' => 'getRegrettedByUserId',
        'regretted_date' => 'getRegrettedDate',
        'modified_utc' => 'getModifiedUtc',
        'sent_for_approval_by_user_id' => 'getSentForApprovalByUserId',
        'voucher_id' => 'getVoucherId',
        'total_amount' => 'getTotalAmount',
        'approval_events_history' => 'getApprovalEventsHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_APPROVAL_STATUS_0 = 0;
    const DOCUMENT_APPROVAL_STATUS_1 = 1;
    const DOCUMENT_APPROVAL_STATUS_2 = 2;
    const DOCUMENT_APPROVAL_STATUS_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentApprovalStatusAllowableValues()
    {
        return [
            self::DOCUMENT_APPROVAL_STATUS_0,
            self::DOCUMENT_APPROVAL_STATUS_1,
            self::DOCUMENT_APPROVAL_STATUS_2,
            self::DOCUMENT_APPROVAL_STATUS_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['document_approval_status'] = isset($data['document_approval_status']) ? $data['document_approval_status'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['is_regretted'] = isset($data['is_regretted']) ? $data['is_regretted'] : null;
        $this->container['regretted_by_user_id'] = isset($data['regretted_by_user_id']) ? $data['regretted_by_user_id'] : null;
        $this->container['regretted_date'] = isset($data['regretted_date']) ? $data['regretted_date'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
        $this->container['sent_for_approval_by_user_id'] = isset($data['sent_for_approval_by_user_id']) ? $data['sent_for_approval_by_user_id'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['approval_events_history'] = isset($data['approval_events_history']) ? $data['approval_events_history'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentApprovalStatusAllowableValues();
        if (!is_null($this->container['document_approval_status']) && !in_array($this->container['document_approval_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_approval_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets document_approval_status
     *
     * @return int
     */
    public function getDocumentApprovalStatus()
    {
        return $this->container['document_approval_status'];
    }

    /**
     * Sets document_approval_status
     *
     * @param int $document_approval_status 0 = None, 1 = Approved, 2 = Rejected, 3 = ReadyForApproval
     *
     * @return $this
     */
    public function setDocumentApprovalStatus($document_approval_status)
    {
        $allowedValues = $this->getDocumentApprovalStatusAllowableValues();
        if (!is_null($document_approval_status) && !in_array($document_approval_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_approval_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_approval_status'] = $document_approval_status;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id Purpose: Fetch the associated document. Can be null if the vat report does not have an associated file created. Use GET /v2/documents/{id}
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets is_regretted
     *
     * @return bool
     */
    public function getIsRegretted()
    {
        return $this->container['is_regretted'];
    }

    /**
     * Sets is_regretted
     *
     * @param bool $is_regretted Indicates whether the vat report was undone
     *
     * @return $this
     */
    public function setIsRegretted($is_regretted)
    {
        $this->container['is_regretted'] = $is_regretted;

        return $this;
    }

    /**
     * Gets regretted_by_user_id
     *
     * @return string
     */
    public function getRegrettedByUserId()
    {
        return $this->container['regretted_by_user_id'];
    }

    /**
     * Sets regretted_by_user_id
     *
     * @param string $regretted_by_user_id Purpose: If the vat report was undone this indicates the user id that did the action. Can be null if not undone. Use GET /v2/users
     *
     * @return $this
     */
    public function setRegrettedByUserId($regretted_by_user_id)
    {
        $this->container['regretted_by_user_id'] = $regretted_by_user_id;

        return $this;
    }

    /**
     * Gets regretted_date
     *
     * @return \DateTime
     */
    public function getRegrettedDate()
    {
        return $this->container['regretted_date'];
    }

    /**
     * Sets regretted_date
     *
     * @param \DateTime $regretted_date Purpose: If the vat report was undone this indicates the date of the action. Can be null if not undone
     *
     * @return $this
     */
    public function setRegrettedDate($regretted_date)
    {
        $this->container['regretted_date'] = $regretted_date;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }

    /**
     * Gets sent_for_approval_by_user_id
     *
     * @return string
     */
    public function getSentForApprovalByUserId()
    {
        return $this->container['sent_for_approval_by_user_id'];
    }

    /**
     * Sets sent_for_approval_by_user_id
     *
     * @param string $sent_for_approval_by_user_id Purpose: If the vat report was sent for approval this indicates the user id that did the action. Can be null if not sent for approval. Use GET /v2/users
     *
     * @return $this
     */
    public function setSentForApprovalByUserId($sent_for_approval_by_user_id)
    {
        $this->container['sent_for_approval_by_user_id'] = $sent_for_approval_by_user_id;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id Purpose: Fetch the associated voucher. Can be null if there is no associated voucher. Use GET /v2/vouchers/{fiscalyearId}/{voucherId}
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Predicted vat amount to pay or be refunded
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets approval_events_history
     *
     * @return \Struqtur\VismaEAccounting\Model\DocumentApprovalEventApi[]
     */
    public function getApprovalEventsHistory()
    {
        return $this->container['approval_events_history'];
    }

    /**
     * Sets approval_events_history
     *
     * @param \Struqtur\VismaEAccounting\Model\DocumentApprovalEventApi[] $approval_events_history The history of approval events of the vat report.
     *
     * @return $this
     */
    public function setApprovalEventsHistory($approval_events_history)
    {
        $this->container['approval_events_history'] = $approval_events_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


