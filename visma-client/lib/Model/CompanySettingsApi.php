<?php
/**
 * CompanySettingsApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CompanySettingsApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanySettingsApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanySettingsApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'mobile_phone' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'country_code' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'website' => 'string',
        'currency_code' => 'string',
        'terms_of_payment_id' => 'string',
        'corporate_identity_number' => 'string',
        'vat_code' => 'string',
        'bank_giro' => 'string',
        'plus_giro' => 'string',
        'bank_account' => 'string',
        'iban' => 'string',
        'accounting_locked_to' => '\DateTime',
        'accounting_lock_interval' => 'int',
        'tax_declaration_date' => '\Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi',
        'gln' => 'string',
        'product_variant' => 'int',
        'type_of_business' => 'int',
        'vat_period' => 'int',
        'activated_modules' => 'string[]',
        'company_text' => '\Struqtur\VismaEAccounting\Model\CompanyTextsApi',
        'next_customer_number' => 'int',
        'next_supplier_number' => 'int',
        'next_customer_invoice_number' => 'int',
        'next_quote_number' => 'int',
        'show_prices_excl_vat_pc' => 'bool',
        'is_payslip_activated' => 'bool',
        'uses_moss' => 'bool',
        'uses_payment_reference_number' => 'bool',
        'domestic_currency_rounding' => 'int',
        'auto_invoice' => '\Struqtur\VismaEAccounting\Model\AutoInvoiceApi',
        'approval_settings' => '\Struqtur\VismaEAccounting\Model\ApprovalSettingsApi',
        'uses_reverse_construction_vat' => 'bool',
        'uses_rot_reduced_invoicing' => 'bool',
        'company_rot_rut_settings' => '\Struqtur\VismaEAccounting\Model\CompanyRotRutSettingsApi',
        'company_status' => 'int',
        'company_identifier' => 'string',
        'bankgiro_number_print' => 'string',
        'keep_original_draft_date' => 'bool',
        'use_payment_files_for_outgoing_payments' => 'bool',
        'use_automatic_vat_calculation' => 'bool',
        'show_cost_center_reminder' => 'bool',
        'show_project_reminder' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'email' => null,
        'phone' => null,
        'mobile_phone' => null,
        'address1' => null,
        'address2' => null,
        'country_code' => null,
        'postal_code' => null,
        'city' => null,
        'website' => null,
        'currency_code' => null,
        'terms_of_payment_id' => 'uuid',
        'corporate_identity_number' => null,
        'vat_code' => null,
        'bank_giro' => null,
        'plus_giro' => null,
        'bank_account' => null,
        'iban' => null,
        'accounting_locked_to' => 'date-time',
        'accounting_lock_interval' => 'int32',
        'tax_declaration_date' => null,
        'gln' => null,
        'product_variant' => 'int32',
        'type_of_business' => 'int32',
        'vat_period' => 'int32',
        'activated_modules' => null,
        'company_text' => null,
        'next_customer_number' => 'int32',
        'next_supplier_number' => 'int32',
        'next_customer_invoice_number' => 'int32',
        'next_quote_number' => 'int32',
        'show_prices_excl_vat_pc' => null,
        'is_payslip_activated' => null,
        'uses_moss' => null,
        'uses_payment_reference_number' => null,
        'domestic_currency_rounding' => 'int32',
        'auto_invoice' => null,
        'approval_settings' => null,
        'uses_reverse_construction_vat' => null,
        'uses_rot_reduced_invoicing' => null,
        'company_rot_rut_settings' => null,
        'company_status' => 'int32',
        'company_identifier' => null,
        'bankgiro_number_print' => null,
        'keep_original_draft_date' => null,
        'use_payment_files_for_outgoing_payments' => null,
        'use_automatic_vat_calculation' => null,
        'show_cost_center_reminder' => null,
        'show_project_reminder' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'email' => 'Email',
        'phone' => 'Phone',
        'mobile_phone' => 'MobilePhone',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'country_code' => 'CountryCode',
        'postal_code' => 'PostalCode',
        'city' => 'City',
        'website' => 'Website',
        'currency_code' => 'CurrencyCode',
        'terms_of_payment_id' => 'TermsOfPaymentId',
        'corporate_identity_number' => 'CorporateIdentityNumber',
        'vat_code' => 'VatCode',
        'bank_giro' => 'BankGiro',
        'plus_giro' => 'PlusGiro',
        'bank_account' => 'BankAccount',
        'iban' => 'Iban',
        'accounting_locked_to' => 'AccountingLockedTo',
        'accounting_lock_interval' => 'AccountingLockInterval',
        'tax_declaration_date' => 'TaxDeclarationDate',
        'gln' => 'Gln',
        'product_variant' => 'ProductVariant',
        'type_of_business' => 'TypeOfBusiness',
        'vat_period' => 'VatPeriod',
        'activated_modules' => 'ActivatedModules',
        'company_text' => 'CompanyText',
        'next_customer_number' => 'NextCustomerNumber',
        'next_supplier_number' => 'NextSupplierNumber',
        'next_customer_invoice_number' => 'NextCustomerInvoiceNumber',
        'next_quote_number' => 'NextQuoteNumber',
        'show_prices_excl_vat_pc' => 'ShowPricesExclVatPC',
        'is_payslip_activated' => 'IsPayslipActivated',
        'uses_moss' => 'UsesMoss',
        'uses_payment_reference_number' => 'UsesPaymentReferenceNumber',
        'domestic_currency_rounding' => 'DomesticCurrencyRounding',
        'auto_invoice' => 'AutoInvoice',
        'approval_settings' => 'ApprovalSettings',
        'uses_reverse_construction_vat' => 'UsesReverseConstructionVat',
        'uses_rot_reduced_invoicing' => 'UsesRotReducedInvoicing',
        'company_rot_rut_settings' => 'CompanyRotRutSettings',
        'company_status' => 'CompanyStatus',
        'company_identifier' => 'CompanyIdentifier',
        'bankgiro_number_print' => 'BankgiroNumberPrint',
        'keep_original_draft_date' => 'KeepOriginalDraftDate',
        'use_payment_files_for_outgoing_payments' => 'UsePaymentFilesForOutgoingPayments',
        'use_automatic_vat_calculation' => 'UseAutomaticVatCalculation',
        'show_cost_center_reminder' => 'ShowCostCenterReminder',
        'show_project_reminder' => 'ShowProjectReminder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'mobile_phone' => 'setMobilePhone',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'country_code' => 'setCountryCode',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'website' => 'setWebsite',
        'currency_code' => 'setCurrencyCode',
        'terms_of_payment_id' => 'setTermsOfPaymentId',
        'corporate_identity_number' => 'setCorporateIdentityNumber',
        'vat_code' => 'setVatCode',
        'bank_giro' => 'setBankGiro',
        'plus_giro' => 'setPlusGiro',
        'bank_account' => 'setBankAccount',
        'iban' => 'setIban',
        'accounting_locked_to' => 'setAccountingLockedTo',
        'accounting_lock_interval' => 'setAccountingLockInterval',
        'tax_declaration_date' => 'setTaxDeclarationDate',
        'gln' => 'setGln',
        'product_variant' => 'setProductVariant',
        'type_of_business' => 'setTypeOfBusiness',
        'vat_period' => 'setVatPeriod',
        'activated_modules' => 'setActivatedModules',
        'company_text' => 'setCompanyText',
        'next_customer_number' => 'setNextCustomerNumber',
        'next_supplier_number' => 'setNextSupplierNumber',
        'next_customer_invoice_number' => 'setNextCustomerInvoiceNumber',
        'next_quote_number' => 'setNextQuoteNumber',
        'show_prices_excl_vat_pc' => 'setShowPricesExclVatPc',
        'is_payslip_activated' => 'setIsPayslipActivated',
        'uses_moss' => 'setUsesMoss',
        'uses_payment_reference_number' => 'setUsesPaymentReferenceNumber',
        'domestic_currency_rounding' => 'setDomesticCurrencyRounding',
        'auto_invoice' => 'setAutoInvoice',
        'approval_settings' => 'setApprovalSettings',
        'uses_reverse_construction_vat' => 'setUsesReverseConstructionVat',
        'uses_rot_reduced_invoicing' => 'setUsesRotReducedInvoicing',
        'company_rot_rut_settings' => 'setCompanyRotRutSettings',
        'company_status' => 'setCompanyStatus',
        'company_identifier' => 'setCompanyIdentifier',
        'bankgiro_number_print' => 'setBankgiroNumberPrint',
        'keep_original_draft_date' => 'setKeepOriginalDraftDate',
        'use_payment_files_for_outgoing_payments' => 'setUsePaymentFilesForOutgoingPayments',
        'use_automatic_vat_calculation' => 'setUseAutomaticVatCalculation',
        'show_cost_center_reminder' => 'setShowCostCenterReminder',
        'show_project_reminder' => 'setShowProjectReminder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'mobile_phone' => 'getMobilePhone',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'country_code' => 'getCountryCode',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'website' => 'getWebsite',
        'currency_code' => 'getCurrencyCode',
        'terms_of_payment_id' => 'getTermsOfPaymentId',
        'corporate_identity_number' => 'getCorporateIdentityNumber',
        'vat_code' => 'getVatCode',
        'bank_giro' => 'getBankGiro',
        'plus_giro' => 'getPlusGiro',
        'bank_account' => 'getBankAccount',
        'iban' => 'getIban',
        'accounting_locked_to' => 'getAccountingLockedTo',
        'accounting_lock_interval' => 'getAccountingLockInterval',
        'tax_declaration_date' => 'getTaxDeclarationDate',
        'gln' => 'getGln',
        'product_variant' => 'getProductVariant',
        'type_of_business' => 'getTypeOfBusiness',
        'vat_period' => 'getVatPeriod',
        'activated_modules' => 'getActivatedModules',
        'company_text' => 'getCompanyText',
        'next_customer_number' => 'getNextCustomerNumber',
        'next_supplier_number' => 'getNextSupplierNumber',
        'next_customer_invoice_number' => 'getNextCustomerInvoiceNumber',
        'next_quote_number' => 'getNextQuoteNumber',
        'show_prices_excl_vat_pc' => 'getShowPricesExclVatPc',
        'is_payslip_activated' => 'getIsPayslipActivated',
        'uses_moss' => 'getUsesMoss',
        'uses_payment_reference_number' => 'getUsesPaymentReferenceNumber',
        'domestic_currency_rounding' => 'getDomesticCurrencyRounding',
        'auto_invoice' => 'getAutoInvoice',
        'approval_settings' => 'getApprovalSettings',
        'uses_reverse_construction_vat' => 'getUsesReverseConstructionVat',
        'uses_rot_reduced_invoicing' => 'getUsesRotReducedInvoicing',
        'company_rot_rut_settings' => 'getCompanyRotRutSettings',
        'company_status' => 'getCompanyStatus',
        'company_identifier' => 'getCompanyIdentifier',
        'bankgiro_number_print' => 'getBankgiroNumberPrint',
        'keep_original_draft_date' => 'getKeepOriginalDraftDate',
        'use_payment_files_for_outgoing_payments' => 'getUsePaymentFilesForOutgoingPayments',
        'use_automatic_vat_calculation' => 'getUseAutomaticVatCalculation',
        'show_cost_center_reminder' => 'getShowCostCenterReminder',
        'show_project_reminder' => 'getShowProjectReminder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNTING_LOCK_INTERVAL_0 = 0;
    const ACCOUNTING_LOCK_INTERVAL_1 = 1;
    const ACCOUNTING_LOCK_INTERVAL_2 = 2;
    const ACCOUNTING_LOCK_INTERVAL_3 = 3;
    const ACCOUNTING_LOCK_INTERVAL_4 = 4;
    const PRODUCT_VARIANT_1 = 1;
    const PRODUCT_VARIANT_2 = 2;
    const PRODUCT_VARIANT_3 = 3;
    const PRODUCT_VARIANT_4 = 4;
    const PRODUCT_VARIANT_5 = 5;
    const PRODUCT_VARIANT_6 = 6;
    const TYPE_OF_BUSINESS_1 = 1;
    const TYPE_OF_BUSINESS_2 = 2;
    const TYPE_OF_BUSINESS_3 = 3;
    const TYPE_OF_BUSINESS_4 = 4;
    const TYPE_OF_BUSINESS_5 = 5;
    const TYPE_OF_BUSINESS_6 = 6;
    const TYPE_OF_BUSINESS_7 = 7;
    const TYPE_OF_BUSINESS_9 = 9;
    const VAT_PERIOD_1 = 1;
    const VAT_PERIOD_2 = 2;
    const VAT_PERIOD_3 = 3;
    const VAT_PERIOD_4 = 4;
    const VAT_PERIOD_5 = 5;
    const VAT_PERIOD_6 = 6;
    const VAT_PERIOD_7 = 7;
    const VAT_PERIOD_8 = 8;
    const VAT_PERIOD_9 = 9;
    const DOMESTIC_CURRENCY_ROUNDING_0 = 0;
    const DOMESTIC_CURRENCY_ROUNDING_1 = 1;
    const COMPANY_STATUS_0 = 0;
    const COMPANY_STATUS_1 = 1;
    const COMPANY_STATUS_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountingLockIntervalAllowableValues()
    {
        return [
            self::ACCOUNTING_LOCK_INTERVAL_0,
            self::ACCOUNTING_LOCK_INTERVAL_1,
            self::ACCOUNTING_LOCK_INTERVAL_2,
            self::ACCOUNTING_LOCK_INTERVAL_3,
            self::ACCOUNTING_LOCK_INTERVAL_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductVariantAllowableValues()
    {
        return [
            self::PRODUCT_VARIANT_1,
            self::PRODUCT_VARIANT_2,
            self::PRODUCT_VARIANT_3,
            self::PRODUCT_VARIANT_4,
            self::PRODUCT_VARIANT_5,
            self::PRODUCT_VARIANT_6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeOfBusinessAllowableValues()
    {
        return [
            self::TYPE_OF_BUSINESS_1,
            self::TYPE_OF_BUSINESS_2,
            self::TYPE_OF_BUSINESS_3,
            self::TYPE_OF_BUSINESS_4,
            self::TYPE_OF_BUSINESS_5,
            self::TYPE_OF_BUSINESS_6,
            self::TYPE_OF_BUSINESS_7,
            self::TYPE_OF_BUSINESS_9,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVatPeriodAllowableValues()
    {
        return [
            self::VAT_PERIOD_1,
            self::VAT_PERIOD_2,
            self::VAT_PERIOD_3,
            self::VAT_PERIOD_4,
            self::VAT_PERIOD_5,
            self::VAT_PERIOD_6,
            self::VAT_PERIOD_7,
            self::VAT_PERIOD_8,
            self::VAT_PERIOD_9,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDomesticCurrencyRoundingAllowableValues()
    {
        return [
            self::DOMESTIC_CURRENCY_ROUNDING_0,
            self::DOMESTIC_CURRENCY_ROUNDING_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompanyStatusAllowableValues()
    {
        return [
            self::COMPANY_STATUS_0,
            self::COMPANY_STATUS_1,
            self::COMPANY_STATUS_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['terms_of_payment_id'] = isset($data['terms_of_payment_id']) ? $data['terms_of_payment_id'] : null;
        $this->container['corporate_identity_number'] = isset($data['corporate_identity_number']) ? $data['corporate_identity_number'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['bank_giro'] = isset($data['bank_giro']) ? $data['bank_giro'] : null;
        $this->container['plus_giro'] = isset($data['plus_giro']) ? $data['plus_giro'] : null;
        $this->container['bank_account'] = isset($data['bank_account']) ? $data['bank_account'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['accounting_locked_to'] = isset($data['accounting_locked_to']) ? $data['accounting_locked_to'] : null;
        $this->container['accounting_lock_interval'] = isset($data['accounting_lock_interval']) ? $data['accounting_lock_interval'] : null;
        $this->container['tax_declaration_date'] = isset($data['tax_declaration_date']) ? $data['tax_declaration_date'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['product_variant'] = isset($data['product_variant']) ? $data['product_variant'] : null;
        $this->container['type_of_business'] = isset($data['type_of_business']) ? $data['type_of_business'] : null;
        $this->container['vat_period'] = isset($data['vat_period']) ? $data['vat_period'] : null;
        $this->container['activated_modules'] = isset($data['activated_modules']) ? $data['activated_modules'] : null;
        $this->container['company_text'] = isset($data['company_text']) ? $data['company_text'] : null;
        $this->container['next_customer_number'] = isset($data['next_customer_number']) ? $data['next_customer_number'] : null;
        $this->container['next_supplier_number'] = isset($data['next_supplier_number']) ? $data['next_supplier_number'] : null;
        $this->container['next_customer_invoice_number'] = isset($data['next_customer_invoice_number']) ? $data['next_customer_invoice_number'] : null;
        $this->container['next_quote_number'] = isset($data['next_quote_number']) ? $data['next_quote_number'] : null;
        $this->container['show_prices_excl_vat_pc'] = isset($data['show_prices_excl_vat_pc']) ? $data['show_prices_excl_vat_pc'] : null;
        $this->container['is_payslip_activated'] = isset($data['is_payslip_activated']) ? $data['is_payslip_activated'] : null;
        $this->container['uses_moss'] = isset($data['uses_moss']) ? $data['uses_moss'] : null;
        $this->container['uses_payment_reference_number'] = isset($data['uses_payment_reference_number']) ? $data['uses_payment_reference_number'] : null;
        $this->container['domestic_currency_rounding'] = isset($data['domestic_currency_rounding']) ? $data['domestic_currency_rounding'] : null;
        $this->container['auto_invoice'] = isset($data['auto_invoice']) ? $data['auto_invoice'] : null;
        $this->container['approval_settings'] = isset($data['approval_settings']) ? $data['approval_settings'] : null;
        $this->container['uses_reverse_construction_vat'] = isset($data['uses_reverse_construction_vat']) ? $data['uses_reverse_construction_vat'] : null;
        $this->container['uses_rot_reduced_invoicing'] = isset($data['uses_rot_reduced_invoicing']) ? $data['uses_rot_reduced_invoicing'] : null;
        $this->container['company_rot_rut_settings'] = isset($data['company_rot_rut_settings']) ? $data['company_rot_rut_settings'] : null;
        $this->container['company_status'] = isset($data['company_status']) ? $data['company_status'] : null;
        $this->container['company_identifier'] = isset($data['company_identifier']) ? $data['company_identifier'] : null;
        $this->container['bankgiro_number_print'] = isset($data['bankgiro_number_print']) ? $data['bankgiro_number_print'] : null;
        $this->container['keep_original_draft_date'] = isset($data['keep_original_draft_date']) ? $data['keep_original_draft_date'] : null;
        $this->container['use_payment_files_for_outgoing_payments'] = isset($data['use_payment_files_for_outgoing_payments']) ? $data['use_payment_files_for_outgoing_payments'] : null;
        $this->container['use_automatic_vat_calculation'] = isset($data['use_automatic_vat_calculation']) ? $data['use_automatic_vat_calculation'] : null;
        $this->container['show_cost_center_reminder'] = isset($data['show_cost_center_reminder']) ? $data['show_cost_center_reminder'] : null;
        $this->container['show_project_reminder'] = isset($data['show_project_reminder']) ? $data['show_project_reminder'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 40)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 40)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 40)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) < 0)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAccountingLockIntervalAllowableValues();
        if (!is_null($this->container['accounting_lock_interval']) && !in_array($this->container['accounting_lock_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accounting_lock_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductVariantAllowableValues();
        if (!is_null($this->container['product_variant']) && !in_array($this->container['product_variant'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_variant', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeOfBusinessAllowableValues();
        if (!is_null($this->container['type_of_business']) && !in_array($this->container['type_of_business'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type_of_business', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVatPeriodAllowableValues();
        if (!is_null($this->container['vat_period']) && !in_array($this->container['vat_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vat_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDomesticCurrencyRoundingAllowableValues();
        if (!is_null($this->container['domestic_currency_rounding']) && !in_array($this->container['domestic_currency_rounding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'domestic_currency_rounding', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompanyStatusAllowableValues();
        if (!is_null($this->container['company_status']) && !in_array($this->container['company_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'company_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Max length: 100 characters
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanySettingsApi., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Max length: 255 characters
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CompanySettingsApi., must be smaller than or equal to 255.');
        }
        if (!is_null($email) && (mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Max length: 20 characters
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling CompanySettingsApi., must be smaller than or equal to 20.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone Max length: 20 characters
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling CompanySettingsApi., must be smaller than or equal to 20.');
        }
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Max length: 40 characters
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling CompanySettingsApi., must be smaller than or equal to 40.');
        }
        if (!is_null($address1) && (mb_strlen($address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 Max length: 40 characters
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling CompanySettingsApi., must be smaller than or equal to 40.');
        }
        if (!is_null($address2) && (mb_strlen($address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Max length: 2 characters
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if ((mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CompanySettingsApi., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Max length: 10 characters
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CompanySettingsApi., must be smaller than or equal to 10.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Max length: 40 characters
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CompanySettingsApi., must be smaller than or equal to 40.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website Max length: 255 characters
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling CompanySettingsApi., must be smaller than or equal to 255.');
        }
        if (!is_null($website) && (mb_strlen($website) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website when calling CompanySettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets terms_of_payment_id
     *
     * @return string
     */
    public function getTermsOfPaymentId()
    {
        return $this->container['terms_of_payment_id'];
    }

    /**
     * Sets terms_of_payment_id
     *
     * @param string $terms_of_payment_id Source: Get from /v2/termsofpayments
     *
     * @return $this
     */
    public function setTermsOfPaymentId($terms_of_payment_id)
    {
        $this->container['terms_of_payment_id'] = $terms_of_payment_id;

        return $this;
    }

    /**
     * Gets corporate_identity_number
     *
     * @return string
     */
    public function getCorporateIdentityNumber()
    {
        return $this->container['corporate_identity_number'];
    }

    /**
     * Sets corporate_identity_number
     *
     * @param string $corporate_identity_number corporate_identity_number
     *
     * @return $this
     */
    public function setCorporateIdentityNumber($corporate_identity_number)
    {
        $this->container['corporate_identity_number'] = $corporate_identity_number;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return string
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param string $vat_code VAT identification number
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets bank_giro
     *
     * @return string
     */
    public function getBankGiro()
    {
        return $this->container['bank_giro'];
    }

    /**
     * Sets bank_giro
     *
     * @param string $bank_giro Only used in Sweden.
     *
     * @return $this
     */
    public function setBankGiro($bank_giro)
    {
        $this->container['bank_giro'] = $bank_giro;

        return $this;
    }

    /**
     * Gets plus_giro
     *
     * @return string
     */
    public function getPlusGiro()
    {
        return $this->container['plus_giro'];
    }

    /**
     * Sets plus_giro
     *
     * @param string $plus_giro Only used in Sweden.
     *
     * @return $this
     */
    public function setPlusGiro($plus_giro)
    {
        $this->container['plus_giro'] = $plus_giro;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string $bank_account bank_account
     *
     * @return $this
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets accounting_locked_to
     *
     * @return \DateTime
     */
    public function getAccountingLockedTo()
    {
        return $this->container['accounting_locked_to'];
    }

    /**
     * Sets accounting_locked_to
     *
     * @param \DateTime $accounting_locked_to accounting_locked_to
     *
     * @return $this
     */
    public function setAccountingLockedTo($accounting_locked_to)
    {
        $this->container['accounting_locked_to'] = $accounting_locked_to;

        return $this;
    }

    /**
     * Gets accounting_lock_interval
     *
     * @return int
     */
    public function getAccountingLockInterval()
    {
        return $this->container['accounting_lock_interval'];
    }

    /**
     * Sets accounting_lock_interval
     *
     * @param int $accounting_lock_interval 0 = None, 1 = Month, 2 = Quarter, 3 = Year, 4 = TaxDeclaration
     *
     * @return $this
     */
    public function setAccountingLockInterval($accounting_lock_interval)
    {
        $allowedValues = $this->getAccountingLockIntervalAllowableValues();
        if (!is_null($accounting_lock_interval) && !in_array($accounting_lock_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accounting_lock_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accounting_lock_interval'] = $accounting_lock_interval;

        return $this;
    }

    /**
     * Gets tax_declaration_date
     *
     * @return \Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi
     */
    public function getTaxDeclarationDate()
    {
        return $this->container['tax_declaration_date'];
    }

    /**
     * Sets tax_declaration_date
     *
     * @param \Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi $tax_declaration_date Purpose: Only for Sweden and Finland
     *
     * @return $this
     */
    public function setTaxDeclarationDate($tax_declaration_date)
    {
        $this->container['tax_declaration_date'] = $tax_declaration_date;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string $gln Global Location Number
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets product_variant
     *
     * @return int
     */
    public function getProductVariant()
    {
        return $this->container['product_variant'];
    }

    /**
     * Sets product_variant
     *
     * @param int $product_variant Variant of eAccouting. 1 = Standard/Smart, 2 = Invoicing, 3 = Bookkeeping, 4 = Start/Solo, 5 = Pro, 6 = InvoicingCollaboration
     *
     * @return $this
     */
    public function setProductVariant($product_variant)
    {
        $allowedValues = $this->getProductVariantAllowableValues();
        if (!is_null($product_variant) && !in_array($product_variant, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_variant', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_variant'] = $product_variant;

        return $this;
    }

    /**
     * Gets type_of_business
     *
     * @return int
     */
    public function getTypeOfBusiness()
    {
        return $this->container['type_of_business'];
    }

    /**
     * Sets type_of_business
     *
     * @param int $type_of_business 1 = Corporation, 2 = SoleProprietorship, 3 = EconomicAssociation, 4 = NonProfitOrganization, 5 = GeneralPartnership, 6 = LimitedPartnership, 7 = Cooperatives, 9 = PublicLimited
     *
     * @return $this
     */
    public function setTypeOfBusiness($type_of_business)
    {
        $allowedValues = $this->getTypeOfBusinessAllowableValues();
        if (!is_null($type_of_business) && !in_array($type_of_business, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type_of_business', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type_of_business'] = $type_of_business;

        return $this;
    }

    /**
     * Gets vat_period
     *
     * @return int
     */
    public function getVatPeriod()
    {
        return $this->container['vat_period'];
    }

    /**
     * Sets vat_period
     *
     * @param int $vat_period Period when VAT report should be sent. 1 = OnceAMonth12th, 2 = OnceAMonth26th, 3 = OnceAQuarter, 4 = OnceAYear, 5 = Never, 6 = Bimonthly, 7 = OnceAMonth, 8 = TwiceAYear, 9 = OnceAQuarterFloating
     *
     * @return $this
     */
    public function setVatPeriod($vat_period)
    {
        $allowedValues = $this->getVatPeriodAllowableValues();
        if (!is_null($vat_period) && !in_array($vat_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vat_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vat_period'] = $vat_period;

        return $this;
    }

    /**
     * Gets activated_modules
     *
     * @return string[]
     */
    public function getActivatedModules()
    {
        return $this->container['activated_modules'];
    }

    /**
     * Sets activated_modules
     *
     * @param string[] $activated_modules activated_modules
     *
     * @return $this
     */
    public function setActivatedModules($activated_modules)
    {
        $this->container['activated_modules'] = $activated_modules;

        return $this;
    }

    /**
     * Gets company_text
     *
     * @return \Struqtur\VismaEAccounting\Model\CompanyTextsApi
     */
    public function getCompanyText()
    {
        return $this->container['company_text'];
    }

    /**
     * Sets company_text
     *
     * @param \Struqtur\VismaEAccounting\Model\CompanyTextsApi $company_text Company settings - Other information
     *
     * @return $this
     */
    public function setCompanyText($company_text)
    {
        $this->container['company_text'] = $company_text;

        return $this;
    }

    /**
     * Gets next_customer_number
     *
     * @return int
     */
    public function getNextCustomerNumber()
    {
        return $this->container['next_customer_number'];
    }

    /**
     * Sets next_customer_number
     *
     * @param int $next_customer_number next_customer_number
     *
     * @return $this
     */
    public function setNextCustomerNumber($next_customer_number)
    {
        $this->container['next_customer_number'] = $next_customer_number;

        return $this;
    }

    /**
     * Gets next_supplier_number
     *
     * @return int
     */
    public function getNextSupplierNumber()
    {
        return $this->container['next_supplier_number'];
    }

    /**
     * Sets next_supplier_number
     *
     * @param int $next_supplier_number next_supplier_number
     *
     * @return $this
     */
    public function setNextSupplierNumber($next_supplier_number)
    {
        $this->container['next_supplier_number'] = $next_supplier_number;

        return $this;
    }

    /**
     * Gets next_customer_invoice_number
     *
     * @return int
     */
    public function getNextCustomerInvoiceNumber()
    {
        return $this->container['next_customer_invoice_number'];
    }

    /**
     * Sets next_customer_invoice_number
     *
     * @param int $next_customer_invoice_number next_customer_invoice_number
     *
     * @return $this
     */
    public function setNextCustomerInvoiceNumber($next_customer_invoice_number)
    {
        $this->container['next_customer_invoice_number'] = $next_customer_invoice_number;

        return $this;
    }

    /**
     * Gets next_quote_number
     *
     * @return int
     */
    public function getNextQuoteNumber()
    {
        return $this->container['next_quote_number'];
    }

    /**
     * Sets next_quote_number
     *
     * @param int $next_quote_number next_quote_number
     *
     * @return $this
     */
    public function setNextQuoteNumber($next_quote_number)
    {
        $this->container['next_quote_number'] = $next_quote_number;

        return $this;
    }

    /**
     * Gets show_prices_excl_vat_pc
     *
     * @return bool
     */
    public function getShowPricesExclVatPc()
    {
        return $this->container['show_prices_excl_vat_pc'];
    }

    /**
     * Sets show_prices_excl_vat_pc
     *
     * @param bool $show_prices_excl_vat_pc Show prices excluding VAT for private individuals
     *
     * @return $this
     */
    public function setShowPricesExclVatPc($show_prices_excl_vat_pc)
    {
        $this->container['show_prices_excl_vat_pc'] = $show_prices_excl_vat_pc;

        return $this;
    }

    /**
     * Gets is_payslip_activated
     *
     * @return bool
     */
    public function getIsPayslipActivated()
    {
        return $this->container['is_payslip_activated'];
    }

    /**
     * Sets is_payslip_activated
     *
     * @param bool $is_payslip_activated is_payslip_activated
     *
     * @return $this
     */
    public function setIsPayslipActivated($is_payslip_activated)
    {
        $this->container['is_payslip_activated'] = $is_payslip_activated;

        return $this;
    }

    /**
     * Gets uses_moss
     *
     * @return bool
     */
    public function getUsesMoss()
    {
        return $this->container['uses_moss'];
    }

    /**
     * Sets uses_moss
     *
     * @param bool $uses_moss uses_moss
     *
     * @return $this
     */
    public function setUsesMoss($uses_moss)
    {
        $this->container['uses_moss'] = $uses_moss;

        return $this;
    }

    /**
     * Gets uses_payment_reference_number
     *
     * @return bool
     */
    public function getUsesPaymentReferenceNumber()
    {
        return $this->container['uses_payment_reference_number'];
    }

    /**
     * Sets uses_payment_reference_number
     *
     * @param bool $uses_payment_reference_number Show OCR/KID reference no. on invoice
     *
     * @return $this
     */
    public function setUsesPaymentReferenceNumber($uses_payment_reference_number)
    {
        $this->container['uses_payment_reference_number'] = $uses_payment_reference_number;

        return $this;
    }

    /**
     * Gets domestic_currency_rounding
     *
     * @return int
     */
    public function getDomesticCurrencyRounding()
    {
        return $this->container['domestic_currency_rounding'];
    }

    /**
     * Sets domestic_currency_rounding
     *
     * @param int $domestic_currency_rounding 0 = None, HalfAwayFromZero = 1
     *
     * @return $this
     */
    public function setDomesticCurrencyRounding($domestic_currency_rounding)
    {
        $allowedValues = $this->getDomesticCurrencyRoundingAllowableValues();
        if (!is_null($domestic_currency_rounding) && !in_array($domestic_currency_rounding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'domestic_currency_rounding', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['domestic_currency_rounding'] = $domestic_currency_rounding;

        return $this;
    }

    /**
     * Gets auto_invoice
     *
     * @return \Struqtur\VismaEAccounting\Model\AutoInvoiceApi
     */
    public function getAutoInvoice()
    {
        return $this->container['auto_invoice'];
    }

    /**
     * Sets auto_invoice
     *
     * @param \Struqtur\VismaEAccounting\Model\AutoInvoiceApi $auto_invoice Auto invoice company settings
     *
     * @return $this
     */
    public function setAutoInvoice($auto_invoice)
    {
        $this->container['auto_invoice'] = $auto_invoice;

        return $this;
    }

    /**
     * Gets approval_settings
     *
     * @return \Struqtur\VismaEAccounting\Model\ApprovalSettingsApi
     */
    public function getApprovalSettings()
    {
        return $this->container['approval_settings'];
    }

    /**
     * Sets approval_settings
     *
     * @param \Struqtur\VismaEAccounting\Model\ApprovalSettingsApi $approval_settings Approval company settings
     *
     * @return $this
     */
    public function setApprovalSettings($approval_settings)
    {
        $this->container['approval_settings'] = $approval_settings;

        return $this;
    }

    /**
     * Gets uses_reverse_construction_vat
     *
     * @return bool
     */
    public function getUsesReverseConstructionVat()
    {
        return $this->container['uses_reverse_construction_vat'];
    }

    /**
     * Sets uses_reverse_construction_vat
     *
     * @param bool $uses_reverse_construction_vat Construction sector, VAT reverse charge rules apply
     *
     * @return $this
     */
    public function setUsesReverseConstructionVat($uses_reverse_construction_vat)
    {
        $this->container['uses_reverse_construction_vat'] = $uses_reverse_construction_vat;

        return $this;
    }

    /**
     * Gets uses_rot_reduced_invoicing
     *
     * @return bool
     */
    public function getUsesRotReducedInvoicing()
    {
        return $this->container['uses_rot_reduced_invoicing'];
    }

    /**
     * Sets uses_rot_reduced_invoicing
     *
     * @param bool $uses_rot_reduced_invoicing Only for swedish companies. Domestic services to private individuals, ROT/RUT rules apply
     *
     * @return $this
     */
    public function setUsesRotReducedInvoicing($uses_rot_reduced_invoicing)
    {
        $this->container['uses_rot_reduced_invoicing'] = $uses_rot_reduced_invoicing;

        return $this;
    }

    /**
     * Gets company_rot_rut_settings
     *
     * @return \Struqtur\VismaEAccounting\Model\CompanyRotRutSettingsApi
     */
    public function getCompanyRotRutSettings()
    {
        return $this->container['company_rot_rut_settings'];
    }

    /**
     * Sets company_rot_rut_settings
     *
     * @param \Struqtur\VismaEAccounting\Model\CompanyRotRutSettingsApi $company_rot_rut_settings Only for swedish companies and values are recommended by the tax authority. Use PUT v2/companysettings/rotrutsettings in combination with UsesRotReducedInvoicing set to true.
     *
     * @return $this
     */
    public function setCompanyRotRutSettings($company_rot_rut_settings)
    {
        $this->container['company_rot_rut_settings'] = $company_rot_rut_settings;

        return $this;
    }

    /**
     * Gets company_status
     *
     * @return int
     */
    public function getCompanyStatus()
    {
        return $this->container['company_status'];
    }

    /**
     * Sets company_status
     *
     * @param int $company_status 0 = Inactive, Active = 1, ReadOnly = 2
     *
     * @return $this
     */
    public function setCompanyStatus($company_status)
    {
        $allowedValues = $this->getCompanyStatusAllowableValues();
        if (!is_null($company_status) && !in_array($company_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'company_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['company_status'] = $company_status;

        return $this;
    }

    /**
     * Gets company_identifier
     *
     * @return string
     */
    public function getCompanyIdentifier()
    {
        return $this->container['company_identifier'];
    }

    /**
     * Sets company_identifier
     *
     * @param string $company_identifier Company Identifier. Unique identifier for the company
     *
     * @return $this
     */
    public function setCompanyIdentifier($company_identifier)
    {
        $this->container['company_identifier'] = $company_identifier;

        return $this;
    }

    /**
     * Gets bankgiro_number_print
     *
     * @return string
     */
    public function getBankgiroNumberPrint()
    {
        return $this->container['bankgiro_number_print'];
    }

    /**
     * Sets bankgiro_number_print
     *
     * @param string $bankgiro_number_print Alternative bank giro number on sales invoice printouts
     *
     * @return $this
     */
    public function setBankgiroNumberPrint($bankgiro_number_print)
    {
        $this->container['bankgiro_number_print'] = $bankgiro_number_print;

        return $this;
    }

    /**
     * Gets keep_original_draft_date
     *
     * @return bool
     */
    public function getKeepOriginalDraftDate()
    {
        return $this->container['keep_original_draft_date'];
    }

    /**
     * Sets keep_original_draft_date
     *
     * @param bool $keep_original_draft_date When set to true, keep the original sales invoice draft date as invoice date
     *
     * @return $this
     */
    public function setKeepOriginalDraftDate($keep_original_draft_date)
    {
        $this->container['keep_original_draft_date'] = $keep_original_draft_date;

        return $this;
    }

    /**
     * Gets use_payment_files_for_outgoing_payments
     *
     * @return bool
     */
    public function getUsePaymentFilesForOutgoingPayments()
    {
        return $this->container['use_payment_files_for_outgoing_payments'];
    }

    /**
     * Sets use_payment_files_for_outgoing_payments
     *
     * @param bool $use_payment_files_for_outgoing_payments When set to true, supplier invoices can be exported as paymentfile and manually sent to bank
     *
     * @return $this
     */
    public function setUsePaymentFilesForOutgoingPayments($use_payment_files_for_outgoing_payments)
    {
        $this->container['use_payment_files_for_outgoing_payments'] = $use_payment_files_for_outgoing_payments;

        return $this;
    }

    /**
     * Gets use_automatic_vat_calculation
     *
     * @return bool
     */
    public function getUseAutomaticVatCalculation()
    {
        return $this->container['use_automatic_vat_calculation'];
    }

    /**
     * Sets use_automatic_vat_calculation
     *
     * @param bool $use_automatic_vat_calculation When set to true, vat rows are added (when creating a voucher for example), if the account used relates to.  Used for SE, NO, FI
     *
     * @return $this
     */
    public function setUseAutomaticVatCalculation($use_automatic_vat_calculation)
    {
        $this->container['use_automatic_vat_calculation'] = $use_automatic_vat_calculation;

        return $this;
    }

    /**
     * Gets show_cost_center_reminder
     *
     * @return bool
     */
    public function getShowCostCenterReminder()
    {
        return $this->container['show_cost_center_reminder'];
    }

    /**
     * Sets show_cost_center_reminder
     *
     * @param bool $show_cost_center_reminder Customer has opted to get reminded about adding a cost center when creating invoices.
     *
     * @return $this
     */
    public function setShowCostCenterReminder($show_cost_center_reminder)
    {
        $this->container['show_cost_center_reminder'] = $show_cost_center_reminder;

        return $this;
    }

    /**
     * Gets show_project_reminder
     *
     * @return bool
     */
    public function getShowProjectReminder()
    {
        return $this->container['show_project_reminder'];
    }

    /**
     * Sets show_project_reminder
     *
     * @param bool $show_project_reminder Customer has opted to get reminded about adding a project when creating invoices.
     *
     * @return $this
     */
    public function setShowProjectReminder($show_project_reminder)
    {
        $this->container['show_project_reminder'] = $show_project_reminder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


