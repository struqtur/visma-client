<?php
/**
 * DirectDebitCustomerSettingsApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * DirectDebitCustomerSettingsApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectDebitCustomerSettingsApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DirectDebitCustomerSettingsApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mandate_id' => 'string',
        'mandate_type' => 'int',
        'sequence_type' => 'int',
        'signing_date' => '\DateTime',
        'end_date' => '\DateTime',
        'latest_direct_debit' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mandate_id' => null,
        'mandate_type' => 'int32',
        'sequence_type' => 'int32',
        'signing_date' => 'date-time',
        'end_date' => 'date-time',
        'latest_direct_debit' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mandate_id' => 'MandateId',
        'mandate_type' => 'MandateType',
        'sequence_type' => 'SequenceType',
        'signing_date' => 'SigningDate',
        'end_date' => 'EndDate',
        'latest_direct_debit' => 'LatestDirectDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mandate_id' => 'setMandateId',
        'mandate_type' => 'setMandateType',
        'sequence_type' => 'setSequenceType',
        'signing_date' => 'setSigningDate',
        'end_date' => 'setEndDate',
        'latest_direct_debit' => 'setLatestDirectDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mandate_id' => 'getMandateId',
        'mandate_type' => 'getMandateType',
        'sequence_type' => 'getSequenceType',
        'signing_date' => 'getSigningDate',
        'end_date' => 'getEndDate',
        'latest_direct_debit' => 'getLatestDirectDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MANDATE_TYPE_1 = 1;
    const MANDATE_TYPE_2 = 2;
    const SEQUENCE_TYPE_1 = 1;
    const SEQUENCE_TYPE_2 = 2;
    const SEQUENCE_TYPE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMandateTypeAllowableValues()
    {
        return [
            self::MANDATE_TYPE_1,
            self::MANDATE_TYPE_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceTypeAllowableValues()
    {
        return [
            self::SEQUENCE_TYPE_1,
            self::SEQUENCE_TYPE_2,
            self::SEQUENCE_TYPE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mandate_id'] = isset($data['mandate_id']) ? $data['mandate_id'] : null;
        $this->container['mandate_type'] = isset($data['mandate_type']) ? $data['mandate_type'] : null;
        $this->container['sequence_type'] = isset($data['sequence_type']) ? $data['sequence_type'] : null;
        $this->container['signing_date'] = isset($data['signing_date']) ? $data['signing_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['latest_direct_debit'] = isset($data['latest_direct_debit']) ? $data['latest_direct_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMandateTypeAllowableValues();
        if (!is_null($this->container['mandate_type']) && !in_array($this->container['mandate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mandate_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!is_null($this->container['sequence_type']) && !in_array($this->container['sequence_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sequence_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id mandate_id
     *
     * @return $this
     */
    public function setMandateId($mandate_id)
    {
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets mandate_type
     *
     * @return int
     */
    public function getMandateType()
    {
        return $this->container['mandate_type'];
    }

    /**
     * Sets mandate_type
     *
     * @param int $mandate_type Mandate Type values  Core = 1,  B2B = 2
     *
     * @return $this
     */
    public function setMandateType($mandate_type)
    {
        $allowedValues = $this->getMandateTypeAllowableValues();
        if (!is_null($mandate_type) && !in_array($mandate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mandate_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mandate_type'] = $mandate_type;

        return $this;
    }

    /**
     * Gets sequence_type
     *
     * @return int
     */
    public function getSequenceType()
    {
        return $this->container['sequence_type'];
    }

    /**
     * Sets sequence_type
     *
     * @param int $sequence_type Sequence Type values  Recurring = 1,  RecurringFinal = 2,  OneOff = 3
     *
     * @return $this
     */
    public function setSequenceType($sequence_type)
    {
        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!is_null($sequence_type) && !in_array($sequence_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sequence_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_type'] = $sequence_type;

        return $this;
    }

    /**
     * Gets signing_date
     *
     * @return \DateTime
     */
    public function getSigningDate()
    {
        return $this->container['signing_date'];
    }

    /**
     * Sets signing_date
     *
     * @param \DateTime $signing_date signing_date
     *
     * @return $this
     */
    public function setSigningDate($signing_date)
    {
        $this->container['signing_date'] = $signing_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets latest_direct_debit
     *
     * @return \DateTime
     */
    public function getLatestDirectDebit()
    {
        return $this->container['latest_direct_debit'];
    }

    /**
     * Sets latest_direct_debit
     *
     * @param \DateTime $latest_direct_debit latest_direct_debit
     *
     * @return $this
     */
    public function setLatestDirectDebit($latest_direct_debit)
    {
        $this->container['latest_direct_debit'] = $latest_direct_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


