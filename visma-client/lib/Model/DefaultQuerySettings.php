<?php
/**
 * DefaultQuerySettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * DefaultQuerySettings Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultQuerySettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DefaultQuerySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_expand' => 'bool',
        'enable_select' => 'bool',
        'enable_count' => 'bool',
        'enable_order_by' => 'bool',
        'enable_filter' => 'bool',
        'max_top' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enable_expand' => null,
        'enable_select' => null,
        'enable_count' => null,
        'enable_order_by' => null,
        'enable_filter' => null,
        'max_top' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_expand' => 'EnableExpand',
        'enable_select' => 'EnableSelect',
        'enable_count' => 'EnableCount',
        'enable_order_by' => 'EnableOrderBy',
        'enable_filter' => 'EnableFilter',
        'max_top' => 'MaxTop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enable_expand' => 'setEnableExpand',
        'enable_select' => 'setEnableSelect',
        'enable_count' => 'setEnableCount',
        'enable_order_by' => 'setEnableOrderBy',
        'enable_filter' => 'setEnableFilter',
        'max_top' => 'setMaxTop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enable_expand' => 'getEnableExpand',
        'enable_select' => 'getEnableSelect',
        'enable_count' => 'getEnableCount',
        'enable_order_by' => 'getEnableOrderBy',
        'enable_filter' => 'getEnableFilter',
        'max_top' => 'getMaxTop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_expand'] = isset($data['enable_expand']) ? $data['enable_expand'] : null;
        $this->container['enable_select'] = isset($data['enable_select']) ? $data['enable_select'] : null;
        $this->container['enable_count'] = isset($data['enable_count']) ? $data['enable_count'] : null;
        $this->container['enable_order_by'] = isset($data['enable_order_by']) ? $data['enable_order_by'] : null;
        $this->container['enable_filter'] = isset($data['enable_filter']) ? $data['enable_filter'] : null;
        $this->container['max_top'] = isset($data['max_top']) ? $data['max_top'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enable_expand
     *
     * @return bool
     */
    public function getEnableExpand()
    {
        return $this->container['enable_expand'];
    }

    /**
     * Sets enable_expand
     *
     * @param bool $enable_expand enable_expand
     *
     * @return $this
     */
    public function setEnableExpand($enable_expand)
    {
        $this->container['enable_expand'] = $enable_expand;

        return $this;
    }

    /**
     * Gets enable_select
     *
     * @return bool
     */
    public function getEnableSelect()
    {
        return $this->container['enable_select'];
    }

    /**
     * Sets enable_select
     *
     * @param bool $enable_select enable_select
     *
     * @return $this
     */
    public function setEnableSelect($enable_select)
    {
        $this->container['enable_select'] = $enable_select;

        return $this;
    }

    /**
     * Gets enable_count
     *
     * @return bool
     */
    public function getEnableCount()
    {
        return $this->container['enable_count'];
    }

    /**
     * Sets enable_count
     *
     * @param bool $enable_count enable_count
     *
     * @return $this
     */
    public function setEnableCount($enable_count)
    {
        $this->container['enable_count'] = $enable_count;

        return $this;
    }

    /**
     * Gets enable_order_by
     *
     * @return bool
     */
    public function getEnableOrderBy()
    {
        return $this->container['enable_order_by'];
    }

    /**
     * Sets enable_order_by
     *
     * @param bool $enable_order_by enable_order_by
     *
     * @return $this
     */
    public function setEnableOrderBy($enable_order_by)
    {
        $this->container['enable_order_by'] = $enable_order_by;

        return $this;
    }

    /**
     * Gets enable_filter
     *
     * @return bool
     */
    public function getEnableFilter()
    {
        return $this->container['enable_filter'];
    }

    /**
     * Sets enable_filter
     *
     * @param bool $enable_filter enable_filter
     *
     * @return $this
     */
    public function setEnableFilter($enable_filter)
    {
        $this->container['enable_filter'] = $enable_filter;

        return $this;
    }

    /**
     * Gets max_top
     *
     * @return int
     */
    public function getMaxTop()
    {
        return $this->container['max_top'];
    }

    /**
     * Sets max_top
     *
     * @param int $max_top max_top
     *
     * @return $this
     */
    public function setMaxTop($max_top)
    {
        $this->container['max_top'] = $max_top;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


