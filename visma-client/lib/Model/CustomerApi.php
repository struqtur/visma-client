<?php
/**
 * CustomerApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'customer_number' => 'string',
        'corporate_identity_number' => 'string',
        'contact_person_email' => 'string',
        'contact_person_mobile' => 'string',
        'contact_person_name' => 'string',
        'contact_person_phone' => 'string',
        'currency_code' => 'string',
        'gln' => 'string',
        'email_address' => 'string',
        'invoice_address1' => 'string',
        'invoice_address2' => 'string',
        'invoice_city' => 'string',
        'invoice_country_code' => 'string',
        'invoice_postal_code' => 'string',
        'delivery_customer_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_city' => 'string',
        'delivery_country_code' => 'string',
        'delivery_postal_code' => 'string',
        'delivery_method_id' => 'string',
        'delivery_term_id' => 'string',
        'pay_to_account_id' => 'string',
        'name' => 'string',
        'note' => 'string',
        'reverse_charge_on_construction_services' => 'bool',
        'webshop_customer_number' => 'int',
        'mobile_phone' => 'string',
        'telephone' => 'string',
        'terms_of_payment_id' => 'string',
        'terms_of_payment' => '\Struqtur\VismaEAccounting\Model\TermsOfPaymentApi',
        'vat_number' => 'string',
        'www_address' => 'string',
        'last_invoice_date' => '\DateTime',
        'is_private_person' => 'bool',
        'is_northern_ireland' => 'bool',
        'discount_percentage' => 'double',
        'changed_utc' => '\DateTime',
        'is_active' => 'bool',
        'force_bookkeep_vat' => 'bool',
        'edi_gln_number' => 'string',
        'sales_document_language' => 'string',
        'electronic_address' => 'string',
        'electronic_reference' => 'string',
        'edi_service_deliverer_id' => 'string',
        'auto_invoice_activation_email_sent_date' => '\DateTime',
        'auto_invoice_registration_request_sent_date' => '\DateTime',
        'email_addresses' => 'string[]',
        'customer_labels' => '\Struqtur\VismaEAccounting\Model\CustomerLabelApi[]',
        'is_future_invoice_date_allowed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'customer_number' => null,
        'corporate_identity_number' => null,
        'contact_person_email' => null,
        'contact_person_mobile' => null,
        'contact_person_name' => null,
        'contact_person_phone' => null,
        'currency_code' => null,
        'gln' => null,
        'email_address' => null,
        'invoice_address1' => null,
        'invoice_address2' => null,
        'invoice_city' => null,
        'invoice_country_code' => null,
        'invoice_postal_code' => null,
        'delivery_customer_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_city' => null,
        'delivery_country_code' => null,
        'delivery_postal_code' => null,
        'delivery_method_id' => 'uuid',
        'delivery_term_id' => 'uuid',
        'pay_to_account_id' => 'uuid',
        'name' => null,
        'note' => null,
        'reverse_charge_on_construction_services' => null,
        'webshop_customer_number' => 'int32',
        'mobile_phone' => null,
        'telephone' => null,
        'terms_of_payment_id' => 'uuid',
        'terms_of_payment' => null,
        'vat_number' => null,
        'www_address' => null,
        'last_invoice_date' => 'date-time',
        'is_private_person' => null,
        'is_northern_ireland' => null,
        'discount_percentage' => 'double',
        'changed_utc' => 'date-time',
        'is_active' => null,
        'force_bookkeep_vat' => null,
        'edi_gln_number' => null,
        'sales_document_language' => null,
        'electronic_address' => null,
        'electronic_reference' => null,
        'edi_service_deliverer_id' => null,
        'auto_invoice_activation_email_sent_date' => 'date-time',
        'auto_invoice_registration_request_sent_date' => 'date-time',
        'email_addresses' => null,
        'customer_labels' => null,
        'is_future_invoice_date_allowed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'customer_number' => 'CustomerNumber',
        'corporate_identity_number' => 'CorporateIdentityNumber',
        'contact_person_email' => 'ContactPersonEmail',
        'contact_person_mobile' => 'ContactPersonMobile',
        'contact_person_name' => 'ContactPersonName',
        'contact_person_phone' => 'ContactPersonPhone',
        'currency_code' => 'CurrencyCode',
        'gln' => 'GLN',
        'email_address' => 'EmailAddress',
        'invoice_address1' => 'InvoiceAddress1',
        'invoice_address2' => 'InvoiceAddress2',
        'invoice_city' => 'InvoiceCity',
        'invoice_country_code' => 'InvoiceCountryCode',
        'invoice_postal_code' => 'InvoicePostalCode',
        'delivery_customer_name' => 'DeliveryCustomerName',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_city' => 'DeliveryCity',
        'delivery_country_code' => 'DeliveryCountryCode',
        'delivery_postal_code' => 'DeliveryPostalCode',
        'delivery_method_id' => 'DeliveryMethodId',
        'delivery_term_id' => 'DeliveryTermId',
        'pay_to_account_id' => 'PayToAccountId',
        'name' => 'Name',
        'note' => 'Note',
        'reverse_charge_on_construction_services' => 'ReverseChargeOnConstructionServices',
        'webshop_customer_number' => 'WebshopCustomerNumber',
        'mobile_phone' => 'MobilePhone',
        'telephone' => 'Telephone',
        'terms_of_payment_id' => 'TermsOfPaymentId',
        'terms_of_payment' => 'TermsOfPayment',
        'vat_number' => 'VatNumber',
        'www_address' => 'WwwAddress',
        'last_invoice_date' => 'LastInvoiceDate',
        'is_private_person' => 'IsPrivatePerson',
        'is_northern_ireland' => 'IsNorthernIreland',
        'discount_percentage' => 'DiscountPercentage',
        'changed_utc' => 'ChangedUtc',
        'is_active' => 'IsActive',
        'force_bookkeep_vat' => 'ForceBookkeepVat',
        'edi_gln_number' => 'EdiGlnNumber',
        'sales_document_language' => 'SalesDocumentLanguage',
        'electronic_address' => 'ElectronicAddress',
        'electronic_reference' => 'ElectronicReference',
        'edi_service_deliverer_id' => 'EdiServiceDelivererId',
        'auto_invoice_activation_email_sent_date' => 'AutoInvoiceActivationEmailSentDate',
        'auto_invoice_registration_request_sent_date' => 'AutoInvoiceRegistrationRequestSentDate',
        'email_addresses' => 'EmailAddresses',
        'customer_labels' => 'CustomerLabels',
        'is_future_invoice_date_allowed' => 'IsFutureInvoiceDateAllowed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customer_number' => 'setCustomerNumber',
        'corporate_identity_number' => 'setCorporateIdentityNumber',
        'contact_person_email' => 'setContactPersonEmail',
        'contact_person_mobile' => 'setContactPersonMobile',
        'contact_person_name' => 'setContactPersonName',
        'contact_person_phone' => 'setContactPersonPhone',
        'currency_code' => 'setCurrencyCode',
        'gln' => 'setGln',
        'email_address' => 'setEmailAddress',
        'invoice_address1' => 'setInvoiceAddress1',
        'invoice_address2' => 'setInvoiceAddress2',
        'invoice_city' => 'setInvoiceCity',
        'invoice_country_code' => 'setInvoiceCountryCode',
        'invoice_postal_code' => 'setInvoicePostalCode',
        'delivery_customer_name' => 'setDeliveryCustomerName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country_code' => 'setDeliveryCountryCode',
        'delivery_postal_code' => 'setDeliveryPostalCode',
        'delivery_method_id' => 'setDeliveryMethodId',
        'delivery_term_id' => 'setDeliveryTermId',
        'pay_to_account_id' => 'setPayToAccountId',
        'name' => 'setName',
        'note' => 'setNote',
        'reverse_charge_on_construction_services' => 'setReverseChargeOnConstructionServices',
        'webshop_customer_number' => 'setWebshopCustomerNumber',
        'mobile_phone' => 'setMobilePhone',
        'telephone' => 'setTelephone',
        'terms_of_payment_id' => 'setTermsOfPaymentId',
        'terms_of_payment' => 'setTermsOfPayment',
        'vat_number' => 'setVatNumber',
        'www_address' => 'setWwwAddress',
        'last_invoice_date' => 'setLastInvoiceDate',
        'is_private_person' => 'setIsPrivatePerson',
        'is_northern_ireland' => 'setIsNorthernIreland',
        'discount_percentage' => 'setDiscountPercentage',
        'changed_utc' => 'setChangedUtc',
        'is_active' => 'setIsActive',
        'force_bookkeep_vat' => 'setForceBookkeepVat',
        'edi_gln_number' => 'setEdiGlnNumber',
        'sales_document_language' => 'setSalesDocumentLanguage',
        'electronic_address' => 'setElectronicAddress',
        'electronic_reference' => 'setElectronicReference',
        'edi_service_deliverer_id' => 'setEdiServiceDelivererId',
        'auto_invoice_activation_email_sent_date' => 'setAutoInvoiceActivationEmailSentDate',
        'auto_invoice_registration_request_sent_date' => 'setAutoInvoiceRegistrationRequestSentDate',
        'email_addresses' => 'setEmailAddresses',
        'customer_labels' => 'setCustomerLabels',
        'is_future_invoice_date_allowed' => 'setIsFutureInvoiceDateAllowed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customer_number' => 'getCustomerNumber',
        'corporate_identity_number' => 'getCorporateIdentityNumber',
        'contact_person_email' => 'getContactPersonEmail',
        'contact_person_mobile' => 'getContactPersonMobile',
        'contact_person_name' => 'getContactPersonName',
        'contact_person_phone' => 'getContactPersonPhone',
        'currency_code' => 'getCurrencyCode',
        'gln' => 'getGln',
        'email_address' => 'getEmailAddress',
        'invoice_address1' => 'getInvoiceAddress1',
        'invoice_address2' => 'getInvoiceAddress2',
        'invoice_city' => 'getInvoiceCity',
        'invoice_country_code' => 'getInvoiceCountryCode',
        'invoice_postal_code' => 'getInvoicePostalCode',
        'delivery_customer_name' => 'getDeliveryCustomerName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country_code' => 'getDeliveryCountryCode',
        'delivery_postal_code' => 'getDeliveryPostalCode',
        'delivery_method_id' => 'getDeliveryMethodId',
        'delivery_term_id' => 'getDeliveryTermId',
        'pay_to_account_id' => 'getPayToAccountId',
        'name' => 'getName',
        'note' => 'getNote',
        'reverse_charge_on_construction_services' => 'getReverseChargeOnConstructionServices',
        'webshop_customer_number' => 'getWebshopCustomerNumber',
        'mobile_phone' => 'getMobilePhone',
        'telephone' => 'getTelephone',
        'terms_of_payment_id' => 'getTermsOfPaymentId',
        'terms_of_payment' => 'getTermsOfPayment',
        'vat_number' => 'getVatNumber',
        'www_address' => 'getWwwAddress',
        'last_invoice_date' => 'getLastInvoiceDate',
        'is_private_person' => 'getIsPrivatePerson',
        'is_northern_ireland' => 'getIsNorthernIreland',
        'discount_percentage' => 'getDiscountPercentage',
        'changed_utc' => 'getChangedUtc',
        'is_active' => 'getIsActive',
        'force_bookkeep_vat' => 'getForceBookkeepVat',
        'edi_gln_number' => 'getEdiGlnNumber',
        'sales_document_language' => 'getSalesDocumentLanguage',
        'electronic_address' => 'getElectronicAddress',
        'electronic_reference' => 'getElectronicReference',
        'edi_service_deliverer_id' => 'getEdiServiceDelivererId',
        'auto_invoice_activation_email_sent_date' => 'getAutoInvoiceActivationEmailSentDate',
        'auto_invoice_registration_request_sent_date' => 'getAutoInvoiceRegistrationRequestSentDate',
        'email_addresses' => 'getEmailAddresses',
        'customer_labels' => 'getCustomerLabels',
        'is_future_invoice_date_allowed' => 'getIsFutureInvoiceDateAllowed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['corporate_identity_number'] = isset($data['corporate_identity_number']) ? $data['corporate_identity_number'] : null;
        $this->container['contact_person_email'] = isset($data['contact_person_email']) ? $data['contact_person_email'] : null;
        $this->container['contact_person_mobile'] = isset($data['contact_person_mobile']) ? $data['contact_person_mobile'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['contact_person_phone'] = isset($data['contact_person_phone']) ? $data['contact_person_phone'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['invoice_address1'] = isset($data['invoice_address1']) ? $data['invoice_address1'] : null;
        $this->container['invoice_address2'] = isset($data['invoice_address2']) ? $data['invoice_address2'] : null;
        $this->container['invoice_city'] = isset($data['invoice_city']) ? $data['invoice_city'] : null;
        $this->container['invoice_country_code'] = isset($data['invoice_country_code']) ? $data['invoice_country_code'] : null;
        $this->container['invoice_postal_code'] = isset($data['invoice_postal_code']) ? $data['invoice_postal_code'] : null;
        $this->container['delivery_customer_name'] = isset($data['delivery_customer_name']) ? $data['delivery_customer_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_country_code'] = isset($data['delivery_country_code']) ? $data['delivery_country_code'] : null;
        $this->container['delivery_postal_code'] = isset($data['delivery_postal_code']) ? $data['delivery_postal_code'] : null;
        $this->container['delivery_method_id'] = isset($data['delivery_method_id']) ? $data['delivery_method_id'] : null;
        $this->container['delivery_term_id'] = isset($data['delivery_term_id']) ? $data['delivery_term_id'] : null;
        $this->container['pay_to_account_id'] = isset($data['pay_to_account_id']) ? $data['pay_to_account_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['reverse_charge_on_construction_services'] = isset($data['reverse_charge_on_construction_services']) ? $data['reverse_charge_on_construction_services'] : null;
        $this->container['webshop_customer_number'] = isset($data['webshop_customer_number']) ? $data['webshop_customer_number'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['terms_of_payment_id'] = isset($data['terms_of_payment_id']) ? $data['terms_of_payment_id'] : null;
        $this->container['terms_of_payment'] = isset($data['terms_of_payment']) ? $data['terms_of_payment'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['www_address'] = isset($data['www_address']) ? $data['www_address'] : null;
        $this->container['last_invoice_date'] = isset($data['last_invoice_date']) ? $data['last_invoice_date'] : null;
        $this->container['is_private_person'] = isset($data['is_private_person']) ? $data['is_private_person'] : null;
        $this->container['is_northern_ireland'] = isset($data['is_northern_ireland']) ? $data['is_northern_ireland'] : null;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : null;
        $this->container['changed_utc'] = isset($data['changed_utc']) ? $data['changed_utc'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['force_bookkeep_vat'] = isset($data['force_bookkeep_vat']) ? $data['force_bookkeep_vat'] : null;
        $this->container['edi_gln_number'] = isset($data['edi_gln_number']) ? $data['edi_gln_number'] : null;
        $this->container['sales_document_language'] = isset($data['sales_document_language']) ? $data['sales_document_language'] : null;
        $this->container['electronic_address'] = isset($data['electronic_address']) ? $data['electronic_address'] : null;
        $this->container['electronic_reference'] = isset($data['electronic_reference']) ? $data['electronic_reference'] : null;
        $this->container['edi_service_deliverer_id'] = isset($data['edi_service_deliverer_id']) ? $data['edi_service_deliverer_id'] : null;
        $this->container['auto_invoice_activation_email_sent_date'] = isset($data['auto_invoice_activation_email_sent_date']) ? $data['auto_invoice_activation_email_sent_date'] : null;
        $this->container['auto_invoice_registration_request_sent_date'] = isset($data['auto_invoice_registration_request_sent_date']) ? $data['auto_invoice_registration_request_sent_date'] : null;
        $this->container['email_addresses'] = isset($data['email_addresses']) ? $data['email_addresses'] : null;
        $this->container['customer_labels'] = isset($data['customer_labels']) ? $data['customer_labels'] : null;
        $this->container['is_future_invoice_date_allowed'] = isset($data['is_future_invoice_date_allowed']) ? $data['is_future_invoice_date_allowed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer_number']) && (mb_strlen($this->container['customer_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['customer_number']) && (mb_strlen($this->container['customer_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['corporate_identity_number']) && (mb_strlen($this->container['corporate_identity_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'corporate_identity_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['corporate_identity_number']) && (mb_strlen($this->container['corporate_identity_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'corporate_identity_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_email']) && (mb_strlen($this->container['contact_person_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_person_email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_person_email']) && (mb_strlen($this->container['contact_person_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_mobile']) && (mb_strlen($this->container['contact_person_mobile']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_person_mobile', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_person_mobile']) && (mb_strlen($this->container['contact_person_mobile']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_mobile', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_name']) && (mb_strlen($this->container['contact_person_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'contact_person_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['contact_person_name']) && (mb_strlen($this->container['contact_person_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_phone']) && (mb_strlen($this->container['contact_person_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_person_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_person_phone']) && (mb_strlen($this->container['contact_person_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gln']) && (mb_strlen($this->container['gln']) > 255)) {
            $invalidProperties[] = "invalid value for 'gln', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['gln']) && (mb_strlen($this->container['gln']) < 0)) {
            $invalidProperties[] = "invalid value for 'gln', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['invoice_city'] === null) {
            $invalidProperties[] = "'invoice_city' can't be null";
        }
        if ((mb_strlen($this->container['invoice_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['invoice_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['invoice_postal_code'] === null) {
            $invalidProperties[] = "'invoice_postal_code' can't be null";
        }
        if ((mb_strlen($this->container['invoice_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['invoice_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 4000)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) < 0)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 50)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) < 0)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['terms_of_payment_id'] === null) {
            $invalidProperties[] = "'terms_of_payment_id' can't be null";
        }
        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['www_address']) && (mb_strlen($this->container['www_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'www_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['www_address']) && (mb_strlen($this->container['www_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'www_address', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_private_person'] === null) {
            $invalidProperties[] = "'is_private_person' can't be null";
        }
        if (!is_null($this->container['discount_percentage']) && ($this->container['discount_percentage'] > 1)) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['discount_percentage']) && ($this->container['discount_percentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'discount_percentage', must be bigger than or equal to 0.";
        }

        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if (!is_null($this->container['edi_gln_number']) && (mb_strlen($this->container['edi_gln_number']) > 255)) {
            $invalidProperties[] = "invalid value for 'edi_gln_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['edi_gln_number']) && (mb_strlen($this->container['edi_gln_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'edi_gln_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sales_document_language']) && (mb_strlen($this->container['sales_document_language']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_document_language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_document_language']) && (mb_strlen($this->container['sales_document_language']) < 0)) {
            $invalidProperties[] = "invalid value for 'sales_document_language', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['electronic_address']) && (mb_strlen($this->container['electronic_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'electronic_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['electronic_address']) && (mb_strlen($this->container['electronic_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'electronic_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['electronic_reference']) && (mb_strlen($this->container['electronic_reference']) > 35)) {
            $invalidProperties[] = "invalid value for 'electronic_reference', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['electronic_reference']) && (mb_strlen($this->container['electronic_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'electronic_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['edi_service_deliverer_id']) && (mb_strlen($this->container['edi_service_deliverer_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'edi_service_deliverer_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['edi_service_deliverer_id']) && (mb_strlen($this->container['edi_service_deliverer_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'edi_service_deliverer_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Max length: 16 characters. Purpose: Unique identifier. If not provided, eAccounting will provide one
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        if (!is_null($customer_number) && (mb_strlen($customer_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling CustomerApi., must be smaller than or equal to 16.');
        }
        if (!is_null($customer_number) && (mb_strlen($customer_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets corporate_identity_number
     *
     * @return string
     */
    public function getCorporateIdentityNumber()
    {
        return $this->container['corporate_identity_number'];
    }

    /**
     * Sets corporate_identity_number
     *
     * @param string $corporate_identity_number Max length: 20 characters
     *
     * @return $this
     */
    public function setCorporateIdentityNumber($corporate_identity_number)
    {
        if (!is_null($corporate_identity_number) && (mb_strlen($corporate_identity_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identity_number when calling CustomerApi., must be smaller than or equal to 20.');
        }
        if (!is_null($corporate_identity_number) && (mb_strlen($corporate_identity_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identity_number when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['corporate_identity_number'] = $corporate_identity_number;

        return $this;
    }

    /**
     * Gets contact_person_email
     *
     * @return string
     */
    public function getContactPersonEmail()
    {
        return $this->container['contact_person_email'];
    }

    /**
     * Sets contact_person_email
     *
     * @param string $contact_person_email Max length: 255 characters
     *
     * @return $this
     */
    public function setContactPersonEmail($contact_person_email)
    {
        if (!is_null($contact_person_email) && (mb_strlen($contact_person_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_email when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($contact_person_email) && (mb_strlen($contact_person_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_email when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_email'] = $contact_person_email;

        return $this;
    }

    /**
     * Gets contact_person_mobile
     *
     * @return string
     */
    public function getContactPersonMobile()
    {
        return $this->container['contact_person_mobile'];
    }

    /**
     * Sets contact_person_mobile
     *
     * @param string $contact_person_mobile Max length: 50 characters
     *
     * @return $this
     */
    public function setContactPersonMobile($contact_person_mobile)
    {
        if (!is_null($contact_person_mobile) && (mb_strlen($contact_person_mobile) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_mobile when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_person_mobile) && (mb_strlen($contact_person_mobile) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_mobile when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_mobile'] = $contact_person_mobile;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name Max length: 100 characters
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        if (!is_null($contact_person_name) && (mb_strlen($contact_person_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_name when calling CustomerApi., must be smaller than or equal to 100.');
        }
        if (!is_null($contact_person_name) && (mb_strlen($contact_person_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_name when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets contact_person_phone
     *
     * @return string
     */
    public function getContactPersonPhone()
    {
        return $this->container['contact_person_phone'];
    }

    /**
     * Sets contact_person_phone
     *
     * @param string $contact_person_phone Max length: 50 characters
     *
     * @return $this
     */
    public function setContactPersonPhone($contact_person_phone)
    {
        if (!is_null($contact_person_phone) && (mb_strlen($contact_person_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_phone when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_person_phone) && (mb_strlen($contact_person_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_phone when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_phone'] = $contact_person_phone;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Max length: 3 characters. Default value: Currency of the user company
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerApi., must be smaller than or equal to 3.');
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string $gln NOTE: Obsolete. Please use EdiGlnNumber instead
     *
     * @return $this
     */
    public function setGln($gln)
    {
        if (!is_null($gln) && (mb_strlen($gln) > 255)) {
            throw new \InvalidArgumentException('invalid length for $gln when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($gln) && (mb_strlen($gln) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gln when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Max length: 255 characters
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets invoice_address1
     *
     * @return string
     */
    public function getInvoiceAddress1()
    {
        return $this->container['invoice_address1'];
    }

    /**
     * Sets invoice_address1
     *
     * @param string $invoice_address1 Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceAddress1($invoice_address1)
    {
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address1'] = $invoice_address1;

        return $this;
    }

    /**
     * Gets invoice_address2
     *
     * @return string
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoice_address2'];
    }

    /**
     * Sets invoice_address2
     *
     * @param string $invoice_address2 Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceAddress2($invoice_address2)
    {
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address2'] = $invoice_address2;

        return $this;
    }

    /**
     * Gets invoice_city
     *
     * @return string
     */
    public function getInvoiceCity()
    {
        return $this->container['invoice_city'];
    }

    /**
     * Sets invoice_city
     *
     * @param string $invoice_city Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceCity($invoice_city)
    {
        if ((mb_strlen($invoice_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($invoice_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_city'] = $invoice_city;

        return $this;
    }

    /**
     * Gets invoice_country_code
     *
     * @return string
     */
    public function getInvoiceCountryCode()
    {
        return $this->container['invoice_country_code'];
    }

    /**
     * Sets invoice_country_code
     *
     * @param string $invoice_country_code Max length: 2 characters
     *
     * @return $this
     */
    public function setInvoiceCountryCode($invoice_country_code)
    {
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerApi., must be smaller than or equal to 2.');
        }
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_country_code'] = $invoice_country_code;

        return $this;
    }

    /**
     * Gets invoice_postal_code
     *
     * @return string
     */
    public function getInvoicePostalCode()
    {
        return $this->container['invoice_postal_code'];
    }

    /**
     * Sets invoice_postal_code
     *
     * @param string $invoice_postal_code Max length: 10 characters
     *
     * @return $this
     */
    public function setInvoicePostalCode($invoice_postal_code)
    {
        if ((mb_strlen($invoice_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerApi., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($invoice_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_postal_code'] = $invoice_postal_code;

        return $this;
    }

    /**
     * Gets delivery_customer_name
     *
     * @return string
     */
    public function getDeliveryCustomerName()
    {
        return $this->container['delivery_customer_name'];
    }

    /**
     * Sets delivery_customer_name
     *
     * @param string $delivery_customer_name Max length: 100 characters
     *
     * @return $this
     */
    public function setDeliveryCustomerName($delivery_customer_name)
    {
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerApi., must be smaller than or equal to 100.');
        }
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_customer_name'] = $delivery_customer_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string $delivery_address1 Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address
     *
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string $delivery_address2 Max length: 50 characters. Purpose: Only used if invoice address differs from delivery address
     *
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string $delivery_city Max length: 50 characters. Purpose: Only used if invoice city differs from delivery city
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country_code
     *
     * @return string
     */
    public function getDeliveryCountryCode()
    {
        return $this->container['delivery_country_code'];
    }

    /**
     * Sets delivery_country_code
     *
     * @param string $delivery_country_code Max length: 2 characters. Purpose: Only used if invoice country code differs from delivery country code
     *
     * @return $this
     */
    public function setDeliveryCountryCode($delivery_country_code)
    {
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerApi., must be smaller than or equal to 2.');
        }
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_country_code'] = $delivery_country_code;

        return $this;
    }

    /**
     * Gets delivery_postal_code
     *
     * @return string
     */
    public function getDeliveryPostalCode()
    {
        return $this->container['delivery_postal_code'];
    }

    /**
     * Sets delivery_postal_code
     *
     * @param string $delivery_postal_code Max length: 10 characters. Purpose: Only used if invoice postal code differs from delivery postal code
     *
     * @return $this
     */
    public function setDeliveryPostalCode($delivery_postal_code)
    {
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerApi., must be smaller than or equal to 10.');
        }
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_postal_code'] = $delivery_postal_code;

        return $this;
    }

    /**
     * Gets delivery_method_id
     *
     * @return string
     */
    public function getDeliveryMethodId()
    {
        return $this->container['delivery_method_id'];
    }

    /**
     * Sets delivery_method_id
     *
     * @param string $delivery_method_id Source: Get from /v2/deliverymethods
     *
     * @return $this
     */
    public function setDeliveryMethodId($delivery_method_id)
    {
        $this->container['delivery_method_id'] = $delivery_method_id;

        return $this;
    }

    /**
     * Gets delivery_term_id
     *
     * @return string
     */
    public function getDeliveryTermId()
    {
        return $this->container['delivery_term_id'];
    }

    /**
     * Sets delivery_term_id
     *
     * @param string $delivery_term_id Source: Get from /v2/deliveryterms
     *
     * @return $this
     */
    public function setDeliveryTermId($delivery_term_id)
    {
        $this->container['delivery_term_id'] = $delivery_term_id;

        return $this;
    }

    /**
     * Gets pay_to_account_id
     *
     * @return string
     */
    public function getPayToAccountId()
    {
        return $this->container['pay_to_account_id'];
    }

    /**
     * Sets pay_to_account_id
     *
     * @param string $pay_to_account_id Purpose: The account Id on which payments are registered
     *
     * @return $this
     */
    public function setPayToAccountId($pay_to_account_id)
    {
        $this->container['pay_to_account_id'] = $pay_to_account_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Max length: 50 characters
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Max length: 4000 characters
     *
     * @return $this
     */
    public function setNote($note)
    {
        if (!is_null($note) && (mb_strlen($note) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $note when calling CustomerApi., must be smaller than or equal to 4000.');
        }
        if (!is_null($note) && (mb_strlen($note) < 0)) {
            throw new \InvalidArgumentException('invalid length for $note when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets reverse_charge_on_construction_services
     *
     * @return bool
     */
    public function getReverseChargeOnConstructionServices()
    {
        return $this->container['reverse_charge_on_construction_services'];
    }

    /**
     * Sets reverse_charge_on_construction_services
     *
     * @param bool $reverse_charge_on_construction_services Default: false. Purpose: If true, VatNumber must be set aswell
     *
     * @return $this
     */
    public function setReverseChargeOnConstructionServices($reverse_charge_on_construction_services)
    {
        $this->container['reverse_charge_on_construction_services'] = $reverse_charge_on_construction_services;

        return $this;
    }

    /**
     * Gets webshop_customer_number
     *
     * @return int
     */
    public function getWebshopCustomerNumber()
    {
        return $this->container['webshop_customer_number'];
    }

    /**
     * Sets webshop_customer_number
     *
     * @param int $webshop_customer_number webshop_customer_number
     *
     * @return $this
     */
    public function setWebshopCustomerNumber($webshop_customer_number)
    {
        $this->container['webshop_customer_number'] = $webshop_customer_number;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone Max length: 50 characters
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Max length: 50 characters
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if (!is_null($telephone) && (mb_strlen($telephone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling CustomerApi., must be smaller than or equal to 50.');
        }
        if (!is_null($telephone) && (mb_strlen($telephone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets terms_of_payment_id
     *
     * @return string
     */
    public function getTermsOfPaymentId()
    {
        return $this->container['terms_of_payment_id'];
    }

    /**
     * Sets terms_of_payment_id
     *
     * @param string $terms_of_payment_id Source: Get from /v2/termsofpayment
     *
     * @return $this
     */
    public function setTermsOfPaymentId($terms_of_payment_id)
    {
        $this->container['terms_of_payment_id'] = $terms_of_payment_id;

        return $this;
    }

    /**
     * Gets terms_of_payment
     *
     * @return \Struqtur\VismaEAccounting\Model\TermsOfPaymentApi
     */
    public function getTermsOfPayment()
    {
        return $this->container['terms_of_payment'];
    }

    /**
     * Sets terms_of_payment
     *
     * @param \Struqtur\VismaEAccounting\Model\TermsOfPaymentApi $terms_of_payment Purpose. Purpose: Returns the terms of payment model entered from TermsOfPaymentId
     *
     * @return $this
     */
    public function setTermsOfPayment($terms_of_payment)
    {
        $this->container['terms_of_payment'] = $terms_of_payment;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number Max length: 20 characters. Format: 2 character country code followed by 8-12 numbers.
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling CustomerApi., must be smaller than or equal to 20.');
        }
        if (!is_null($vat_number) && (mb_strlen($vat_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets www_address
     *
     * @return string
     */
    public function getWwwAddress()
    {
        return $this->container['www_address'];
    }

    /**
     * Sets www_address
     *
     * @param string $www_address Max length: 255 characters
     *
     * @return $this
     */
    public function setWwwAddress($www_address)
    {
        if (!is_null($www_address) && (mb_strlen($www_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $www_address when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($www_address) && (mb_strlen($www_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $www_address when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['www_address'] = $www_address;

        return $this;
    }

    /**
     * Gets last_invoice_date
     *
     * @return \DateTime
     */
    public function getLastInvoiceDate()
    {
        return $this->container['last_invoice_date'];
    }

    /**
     * Sets last_invoice_date
     *
     * @param \DateTime $last_invoice_date Purpose: Returns the last invoice date
     *
     * @return $this
     */
    public function setLastInvoiceDate($last_invoice_date)
    {
        $this->container['last_invoice_date'] = $last_invoice_date;

        return $this;
    }

    /**
     * Gets is_private_person
     *
     * @return bool
     */
    public function getIsPrivatePerson()
    {
        return $this->container['is_private_person'];
    }

    /**
     * Sets is_private_person
     *
     * @param bool $is_private_person is_private_person
     *
     * @return $this
     */
    public function setIsPrivatePerson($is_private_person)
    {
        $this->container['is_private_person'] = $is_private_person;

        return $this;
    }

    /**
     * Gets is_northern_ireland
     *
     * @return bool
     */
    public function getIsNorthernIreland()
    {
        return $this->container['is_northern_ireland'];
    }

    /**
     * Sets is_northern_ireland
     *
     * @param bool $is_northern_ireland is_northern_ireland
     *
     * @return $this
     */
    public function setIsNorthernIreland($is_northern_ireland)
    {
        $this->container['is_northern_ireland'] = $is_northern_ireland;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return double
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param double $discount_percentage Format: 4 decimals
     *
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {

        if (!is_null($discount_percentage) && ($discount_percentage > 1)) {
            throw new \InvalidArgumentException('invalid value for $discount_percentage when calling CustomerApi., must be smaller than or equal to 1.');
        }
        if (!is_null($discount_percentage) && ($discount_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $discount_percentage when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets changed_utc
     *
     * @return \DateTime
     */
    public function getChangedUtc()
    {
        return $this->container['changed_utc'];
    }

    /**
     * Sets changed_utc
     *
     * @param \DateTime $changed_utc Purpose: Returns the last date and time from when a change was made on the customer
     *
     * @return $this
     */
    public function setChangedUtc($changed_utc)
    {
        $this->container['changed_utc'] = $changed_utc;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets force_bookkeep_vat
     *
     * @return bool
     */
    public function getForceBookkeepVat()
    {
        return $this->container['force_bookkeep_vat'];
    }

    /**
     * Sets force_bookkeep_vat
     *
     * @param bool $force_bookkeep_vat force_bookkeep_vat
     *
     * @return $this
     */
    public function setForceBookkeepVat($force_bookkeep_vat)
    {
        $this->container['force_bookkeep_vat'] = $force_bookkeep_vat;

        return $this;
    }

    /**
     * Gets edi_gln_number
     *
     * @return string
     */
    public function getEdiGlnNumber()
    {
        return $this->container['edi_gln_number'];
    }

    /**
     * Sets edi_gln_number
     *
     * @param string $edi_gln_number edi_gln_number
     *
     * @return $this
     */
    public function setEdiGlnNumber($edi_gln_number)
    {
        if (!is_null($edi_gln_number) && (mb_strlen($edi_gln_number) > 255)) {
            throw new \InvalidArgumentException('invalid length for $edi_gln_number when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($edi_gln_number) && (mb_strlen($edi_gln_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $edi_gln_number when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['edi_gln_number'] = $edi_gln_number;

        return $this;
    }

    /**
     * Gets sales_document_language
     *
     * @return string
     */
    public function getSalesDocumentLanguage()
    {
        return $this->container['sales_document_language'];
    }

    /**
     * Sets sales_document_language
     *
     * @param string $sales_document_language Max length: 2 characters
     *
     * @return $this
     */
    public function setSalesDocumentLanguage($sales_document_language)
    {
        if (!is_null($sales_document_language) && (mb_strlen($sales_document_language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_language when calling CustomerApi., must be smaller than or equal to 2.');
        }
        if (!is_null($sales_document_language) && (mb_strlen($sales_document_language) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_language when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['sales_document_language'] = $sales_document_language;

        return $this;
    }

    /**
     * Gets electronic_address
     *
     * @return string
     */
    public function getElectronicAddress()
    {
        return $this->container['electronic_address'];
    }

    /**
     * Sets electronic_address
     *
     * @param string $electronic_address electronic_address
     *
     * @return $this
     */
    public function setElectronicAddress($electronic_address)
    {
        if (!is_null($electronic_address) && (mb_strlen($electronic_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $electronic_address when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($electronic_address) && (mb_strlen($electronic_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $electronic_address when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['electronic_address'] = $electronic_address;

        return $this;
    }

    /**
     * Gets electronic_reference
     *
     * @return string
     */
    public function getElectronicReference()
    {
        return $this->container['electronic_reference'];
    }

    /**
     * Sets electronic_reference
     *
     * @param string $electronic_reference electronic_reference
     *
     * @return $this
     */
    public function setElectronicReference($electronic_reference)
    {
        if (!is_null($electronic_reference) && (mb_strlen($electronic_reference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $electronic_reference when calling CustomerApi., must be smaller than or equal to 35.');
        }
        if (!is_null($electronic_reference) && (mb_strlen($electronic_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $electronic_reference when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['electronic_reference'] = $electronic_reference;

        return $this;
    }

    /**
     * Gets edi_service_deliverer_id
     *
     * @return string
     */
    public function getEdiServiceDelivererId()
    {
        return $this->container['edi_service_deliverer_id'];
    }

    /**
     * Sets edi_service_deliverer_id
     *
     * @param string $edi_service_deliverer_id edi_service_deliverer_id
     *
     * @return $this
     */
    public function setEdiServiceDelivererId($edi_service_deliverer_id)
    {
        if (!is_null($edi_service_deliverer_id) && (mb_strlen($edi_service_deliverer_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $edi_service_deliverer_id when calling CustomerApi., must be smaller than or equal to 255.');
        }
        if (!is_null($edi_service_deliverer_id) && (mb_strlen($edi_service_deliverer_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $edi_service_deliverer_id when calling CustomerApi., must be bigger than or equal to 0.');
        }

        $this->container['edi_service_deliverer_id'] = $edi_service_deliverer_id;

        return $this;
    }

    /**
     * Gets auto_invoice_activation_email_sent_date
     *
     * @return \DateTime
     */
    public function getAutoInvoiceActivationEmailSentDate()
    {
        return $this->container['auto_invoice_activation_email_sent_date'];
    }

    /**
     * Sets auto_invoice_activation_email_sent_date
     *
     * @param \DateTime $auto_invoice_activation_email_sent_date auto_invoice_activation_email_sent_date
     *
     * @return $this
     */
    public function setAutoInvoiceActivationEmailSentDate($auto_invoice_activation_email_sent_date)
    {
        $this->container['auto_invoice_activation_email_sent_date'] = $auto_invoice_activation_email_sent_date;

        return $this;
    }

    /**
     * Gets auto_invoice_registration_request_sent_date
     *
     * @return \DateTime
     */
    public function getAutoInvoiceRegistrationRequestSentDate()
    {
        return $this->container['auto_invoice_registration_request_sent_date'];
    }

    /**
     * Sets auto_invoice_registration_request_sent_date
     *
     * @param \DateTime $auto_invoice_registration_request_sent_date auto_invoice_registration_request_sent_date
     *
     * @return $this
     */
    public function setAutoInvoiceRegistrationRequestSentDate($auto_invoice_registration_request_sent_date)
    {
        $this->container['auto_invoice_registration_request_sent_date'] = $auto_invoice_registration_request_sent_date;

        return $this;
    }

    /**
     * Gets email_addresses
     *
     * @return string[]
     */
    public function getEmailAddresses()
    {
        return $this->container['email_addresses'];
    }

    /**
     * Sets email_addresses
     *
     * @param string[] $email_addresses email_addresses
     *
     * @return $this
     */
    public function setEmailAddresses($email_addresses)
    {
        $this->container['email_addresses'] = $email_addresses;

        return $this;
    }

    /**
     * Gets customer_labels
     *
     * @return \Struqtur\VismaEAccounting\Model\CustomerLabelApi[]
     */
    public function getCustomerLabels()
    {
        return $this->container['customer_labels'];
    }

    /**
     * Sets customer_labels
     *
     * @param \Struqtur\VismaEAccounting\Model\CustomerLabelApi[] $customer_labels customer_labels
     *
     * @return $this
     */
    public function setCustomerLabels($customer_labels)
    {
        $this->container['customer_labels'] = $customer_labels;

        return $this;
    }

    /**
     * Gets is_future_invoice_date_allowed
     *
     * @return bool
     */
    public function getIsFutureInvoiceDateAllowed()
    {
        return $this->container['is_future_invoice_date_allowed'];
    }

    /**
     * Sets is_future_invoice_date_allowed
     *
     * @param bool $is_future_invoice_date_allowed Purpose: Future dates on invoices are allowed based on terms of payments and invoice currency code settings
     *
     * @return $this
     */
    public function setIsFutureInvoiceDateAllowed($is_future_invoice_date_allowed)
    {
        $this->container['is_future_invoice_date_allowed'] = $is_future_invoice_date_allowed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


