<?php
/**
 * AllocationPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * AllocationPlan Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllocationPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AllocationPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'supplier_invoice_id' => 'string',
        'supplier_invoice_row' => 'int',
        'voucher_id' => 'string',
        'voucher_row' => 'int',
        'bookkeeping_start_date' => '\DateTime',
        'amount_to_allocate' => 'double',
        'quantity_to_allocate' => 'double',
        'weight_to_allocate' => 'double',
        'allocation_account_number' => 'int',
        'number_of_allocation_periods' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'supplier_invoice_id' => 'uuid',
        'supplier_invoice_row' => 'int32',
        'voucher_id' => 'uuid',
        'voucher_row' => 'int32',
        'bookkeeping_start_date' => 'date-time',
        'amount_to_allocate' => 'double',
        'quantity_to_allocate' => 'double',
        'weight_to_allocate' => 'double',
        'allocation_account_number' => 'int64',
        'number_of_allocation_periods' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier_invoice_id' => 'SupplierInvoiceId',
        'supplier_invoice_row' => 'SupplierInvoiceRow',
        'voucher_id' => 'VoucherId',
        'voucher_row' => 'VoucherRow',
        'bookkeeping_start_date' => 'BookkeepingStartDate',
        'amount_to_allocate' => 'AmountToAllocate',
        'quantity_to_allocate' => 'QuantityToAllocate',
        'weight_to_allocate' => 'WeightToAllocate',
        'allocation_account_number' => 'AllocationAccountNumber',
        'number_of_allocation_periods' => 'NumberOfAllocationPeriods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier_invoice_id' => 'setSupplierInvoiceId',
        'supplier_invoice_row' => 'setSupplierInvoiceRow',
        'voucher_id' => 'setVoucherId',
        'voucher_row' => 'setVoucherRow',
        'bookkeeping_start_date' => 'setBookkeepingStartDate',
        'amount_to_allocate' => 'setAmountToAllocate',
        'quantity_to_allocate' => 'setQuantityToAllocate',
        'weight_to_allocate' => 'setWeightToAllocate',
        'allocation_account_number' => 'setAllocationAccountNumber',
        'number_of_allocation_periods' => 'setNumberOfAllocationPeriods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier_invoice_id' => 'getSupplierInvoiceId',
        'supplier_invoice_row' => 'getSupplierInvoiceRow',
        'voucher_id' => 'getVoucherId',
        'voucher_row' => 'getVoucherRow',
        'bookkeeping_start_date' => 'getBookkeepingStartDate',
        'amount_to_allocate' => 'getAmountToAllocate',
        'quantity_to_allocate' => 'getQuantityToAllocate',
        'weight_to_allocate' => 'getWeightToAllocate',
        'allocation_account_number' => 'getAllocationAccountNumber',
        'number_of_allocation_periods' => 'getNumberOfAllocationPeriods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplier_invoice_id'] = isset($data['supplier_invoice_id']) ? $data['supplier_invoice_id'] : null;
        $this->container['supplier_invoice_row'] = isset($data['supplier_invoice_row']) ? $data['supplier_invoice_row'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['voucher_row'] = isset($data['voucher_row']) ? $data['voucher_row'] : null;
        $this->container['bookkeeping_start_date'] = isset($data['bookkeeping_start_date']) ? $data['bookkeeping_start_date'] : null;
        $this->container['amount_to_allocate'] = isset($data['amount_to_allocate']) ? $data['amount_to_allocate'] : null;
        $this->container['quantity_to_allocate'] = isset($data['quantity_to_allocate']) ? $data['quantity_to_allocate'] : null;
        $this->container['weight_to_allocate'] = isset($data['weight_to_allocate']) ? $data['weight_to_allocate'] : null;
        $this->container['allocation_account_number'] = isset($data['allocation_account_number']) ? $data['allocation_account_number'] : null;
        $this->container['number_of_allocation_periods'] = isset($data['number_of_allocation_periods']) ? $data['number_of_allocation_periods'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bookkeeping_start_date'] === null) {
            $invalidProperties[] = "'bookkeeping_start_date' can't be null";
        }
        if ($this->container['amount_to_allocate'] === null) {
            $invalidProperties[] = "'amount_to_allocate' can't be null";
        }
        if (($this->container['amount_to_allocate'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'amount_to_allocate', must be smaller than or equal to 1000000000.";
        }

        if (($this->container['amount_to_allocate'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount_to_allocate', must be bigger than or equal to 1.";
        }

        if ($this->container['allocation_account_number'] === null) {
            $invalidProperties[] = "'allocation_account_number' can't be null";
        }
        if (($this->container['allocation_account_number'] > 9999)) {
            $invalidProperties[] = "invalid value for 'allocation_account_number', must be smaller than or equal to 9999.";
        }

        if (($this->container['allocation_account_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'allocation_account_number', must be bigger than or equal to 0.";
        }

        if ($this->container['number_of_allocation_periods'] === null) {
            $invalidProperties[] = "'number_of_allocation_periods' can't be null";
        }
        if (($this->container['number_of_allocation_periods'] > 9999)) {
            $invalidProperties[] = "invalid value for 'number_of_allocation_periods', must be smaller than or equal to 9999.";
        }

        if (($this->container['number_of_allocation_periods'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_allocation_periods', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier_invoice_id
     *
     * @return string
     */
    public function getSupplierInvoiceId()
    {
        return $this->container['supplier_invoice_id'];
    }

    /**
     * Sets supplier_invoice_id
     *
     * @param string $supplier_invoice_id If assigned, SupplierInvoiceRow must be set
     *
     * @return $this
     */
    public function setSupplierInvoiceId($supplier_invoice_id)
    {
        $this->container['supplier_invoice_id'] = $supplier_invoice_id;

        return $this;
    }

    /**
     * Gets supplier_invoice_row
     *
     * @return int
     */
    public function getSupplierInvoiceRow()
    {
        return $this->container['supplier_invoice_row'];
    }

    /**
     * Sets supplier_invoice_row
     *
     * @param int $supplier_invoice_row Required if SupplierInvoiceId is assigned
     *
     * @return $this
     */
    public function setSupplierInvoiceRow($supplier_invoice_row)
    {
        $this->container['supplier_invoice_row'] = $supplier_invoice_row;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id If assigned, VoucherRow must be set
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets voucher_row
     *
     * @return int
     */
    public function getVoucherRow()
    {
        return $this->container['voucher_row'];
    }

    /**
     * Sets voucher_row
     *
     * @param int $voucher_row Required if VoucherId is assigned
     *
     * @return $this
     */
    public function setVoucherRow($voucher_row)
    {
        $this->container['voucher_row'] = $voucher_row;

        return $this;
    }

    /**
     * Gets bookkeeping_start_date
     *
     * @return \DateTime
     */
    public function getBookkeepingStartDate()
    {
        return $this->container['bookkeeping_start_date'];
    }

    /**
     * Sets bookkeeping_start_date
     *
     * @param \DateTime $bookkeeping_start_date bookkeeping_start_date
     *
     * @return $this
     */
    public function setBookkeepingStartDate($bookkeeping_start_date)
    {
        $this->container['bookkeeping_start_date'] = $bookkeeping_start_date;

        return $this;
    }

    /**
     * Gets amount_to_allocate
     *
     * @return double
     */
    public function getAmountToAllocate()
    {
        return $this->container['amount_to_allocate'];
    }

    /**
     * Sets amount_to_allocate
     *
     * @param double $amount_to_allocate amount_to_allocate
     *
     * @return $this
     */
    public function setAmountToAllocate($amount_to_allocate)
    {

        if (($amount_to_allocate > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $amount_to_allocate when calling AllocationPlan., must be smaller than or equal to 1000000000.');
        }
        if (($amount_to_allocate < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount_to_allocate when calling AllocationPlan., must be bigger than or equal to 1.');
        }

        $this->container['amount_to_allocate'] = $amount_to_allocate;

        return $this;
    }

    /**
     * Gets quantity_to_allocate
     *
     * @return double
     */
    public function getQuantityToAllocate()
    {
        return $this->container['quantity_to_allocate'];
    }

    /**
     * Sets quantity_to_allocate
     *
     * @param double $quantity_to_allocate Used for dutch companies that use agricultural settings
     *
     * @return $this
     */
    public function setQuantityToAllocate($quantity_to_allocate)
    {
        $this->container['quantity_to_allocate'] = $quantity_to_allocate;

        return $this;
    }

    /**
     * Gets weight_to_allocate
     *
     * @return double
     */
    public function getWeightToAllocate()
    {
        return $this->container['weight_to_allocate'];
    }

    /**
     * Sets weight_to_allocate
     *
     * @param double $weight_to_allocate Used for dutch companies that use agricultural settings
     *
     * @return $this
     */
    public function setWeightToAllocate($weight_to_allocate)
    {
        $this->container['weight_to_allocate'] = $weight_to_allocate;

        return $this;
    }

    /**
     * Gets allocation_account_number
     *
     * @return int
     */
    public function getAllocationAccountNumber()
    {
        return $this->container['allocation_account_number'];
    }

    /**
     * Sets allocation_account_number
     *
     * @param int $allocation_account_number allocation_account_number
     *
     * @return $this
     */
    public function setAllocationAccountNumber($allocation_account_number)
    {

        if (($allocation_account_number > 9999)) {
            throw new \InvalidArgumentException('invalid value for $allocation_account_number when calling AllocationPlan., must be smaller than or equal to 9999.');
        }
        if (($allocation_account_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $allocation_account_number when calling AllocationPlan., must be bigger than or equal to 0.');
        }

        $this->container['allocation_account_number'] = $allocation_account_number;

        return $this;
    }

    /**
     * Gets number_of_allocation_periods
     *
     * @return int
     */
    public function getNumberOfAllocationPeriods()
    {
        return $this->container['number_of_allocation_periods'];
    }

    /**
     * Sets number_of_allocation_periods
     *
     * @param int $number_of_allocation_periods number_of_allocation_periods
     *
     * @return $this
     */
    public function setNumberOfAllocationPeriods($number_of_allocation_periods)
    {

        if (($number_of_allocation_periods > 9999)) {
            throw new \InvalidArgumentException('invalid value for $number_of_allocation_periods when calling AllocationPlan., must be smaller than or equal to 9999.');
        }
        if (($number_of_allocation_periods < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_allocation_periods when calling AllocationPlan., must be bigger than or equal to 1.');
        }

        $this->container['number_of_allocation_periods'] = $number_of_allocation_periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


