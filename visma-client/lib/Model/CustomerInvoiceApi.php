<?php
/**
 * CustomerInvoiceApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CustomerInvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerInvoiceApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'eu_third_party' => 'bool',
        'is_credit_invoice' => 'bool',
        'currency_code' => 'string',
        'currency_rate' => 'double',
        'created_by_user_id' => 'string',
        'total_amount' => 'double',
        'total_vat_amount' => 'double',
        'total_roundings' => 'double',
        'total_amount_invoice_currency' => 'double',
        'total_vat_amount_invoice_currency' => 'double',
        'set_off_amount_invoice_currency' => 'double',
        'customer_id' => 'string',
        'rows' => '\Struqtur\VismaEAccounting\Model\CustomerInvoiceRowApi[]',
        'vat_specification' => '\Struqtur\VismaEAccounting\Model\CustomerInvoiceVatApi[]',
        'invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'rot_reduced_invoicing_type' => 'int',
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_percent' => 'double',
        'rot_reduced_invoicing_property_name' => 'string',
        'rot_reduced_invoicing_org_number' => 'string',
        'persons' => '\Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]',
        'rot_reduced_invoicing_automatic_distribution' => 'bool',
        'electronic_reference' => 'string',
        'electronic_address' => 'string',
        'edi_service_deliverer_id' => 'string',
        'our_reference' => 'string',
        'your_reference' => 'string',
        'buyers_order_reference' => 'string',
        'invoice_customer_name' => 'string',
        'invoice_address1' => 'string',
        'invoice_address2' => 'string',
        'invoice_postal_code' => 'string',
        'invoice_city' => 'string',
        'invoice_country_code' => 'string',
        'delivery_customer_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_postal_code' => 'string',
        'delivery_city' => 'string',
        'delivery_country_code' => 'string',
        'delivery_method_name' => 'string',
        'delivery_term_name' => 'string',
        'delivery_method_code' => 'string',
        'delivery_term_code' => 'string',
        'customer_is_private_person' => 'bool',
        'terms_of_payment_id' => 'string',
        'customer_email' => 'string',
        'invoice_number' => 'int',
        'customer_number' => 'string',
        'payment_reference_number' => 'string',
        'rot_property_type' => 'int',
        'sales_document_attachments' => 'string[]',
        'message_threads' => 'string[]',
        'notes' => 'string[]',
        'has_auto_invoice_error' => 'bool',
        'is_not_delivered' => 'bool',
        'reverse_charge_on_construction_services' => 'bool',
        'work_house_other_costs' => 'double',
        'remaining_amount' => 'double',
        'remaining_amount_invoice_currency' => 'double',
        'referring_invoice_id' => 'string',
        'created_from_order_id' => 'string',
        'created_from_draft_id' => 'string',
        'voucher_number' => 'string',
        'voucher_id' => 'string',
        'created_utc' => '\DateTime',
        'modified_utc' => '\DateTime',
        'reversed_construction_vat_invoicing' => 'bool',
        'includes_vat' => 'bool',
        'send_type' => 'int',
        'payment_reminder_issued' => 'bool',
        'uses_green_technology' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'eu_third_party' => null,
        'is_credit_invoice' => null,
        'currency_code' => null,
        'currency_rate' => 'double',
        'created_by_user_id' => 'uuid',
        'total_amount' => 'double',
        'total_vat_amount' => 'double',
        'total_roundings' => 'double',
        'total_amount_invoice_currency' => 'double',
        'total_vat_amount_invoice_currency' => 'double',
        'set_off_amount_invoice_currency' => 'double',
        'customer_id' => 'uuid',
        'rows' => null,
        'vat_specification' => null,
        'invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'delivery_date' => 'date-time',
        'rot_reduced_invoicing_type' => 'int32',
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_percent' => 'double',
        'rot_reduced_invoicing_property_name' => null,
        'rot_reduced_invoicing_org_number' => null,
        'persons' => null,
        'rot_reduced_invoicing_automatic_distribution' => null,
        'electronic_reference' => null,
        'electronic_address' => null,
        'edi_service_deliverer_id' => null,
        'our_reference' => null,
        'your_reference' => null,
        'buyers_order_reference' => null,
        'invoice_customer_name' => null,
        'invoice_address1' => null,
        'invoice_address2' => null,
        'invoice_postal_code' => null,
        'invoice_city' => null,
        'invoice_country_code' => null,
        'delivery_customer_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_postal_code' => null,
        'delivery_city' => null,
        'delivery_country_code' => null,
        'delivery_method_name' => null,
        'delivery_term_name' => null,
        'delivery_method_code' => null,
        'delivery_term_code' => null,
        'customer_is_private_person' => null,
        'terms_of_payment_id' => 'uuid',
        'customer_email' => null,
        'invoice_number' => 'int32',
        'customer_number' => null,
        'payment_reference_number' => null,
        'rot_property_type' => 'int32',
        'sales_document_attachments' => 'uuid',
        'message_threads' => 'uuid',
        'notes' => 'uuid',
        'has_auto_invoice_error' => null,
        'is_not_delivered' => null,
        'reverse_charge_on_construction_services' => null,
        'work_house_other_costs' => 'double',
        'remaining_amount' => 'double',
        'remaining_amount_invoice_currency' => 'double',
        'referring_invoice_id' => 'uuid',
        'created_from_order_id' => 'uuid',
        'created_from_draft_id' => 'uuid',
        'voucher_number' => null,
        'voucher_id' => 'uuid',
        'created_utc' => 'date-time',
        'modified_utc' => 'date-time',
        'reversed_construction_vat_invoicing' => null,
        'includes_vat' => null,
        'send_type' => 'int32',
        'payment_reminder_issued' => null,
        'uses_green_technology' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'eu_third_party' => 'EuThirdParty',
        'is_credit_invoice' => 'IsCreditInvoice',
        'currency_code' => 'CurrencyCode',
        'currency_rate' => 'CurrencyRate',
        'created_by_user_id' => 'CreatedByUserId',
        'total_amount' => 'TotalAmount',
        'total_vat_amount' => 'TotalVatAmount',
        'total_roundings' => 'TotalRoundings',
        'total_amount_invoice_currency' => 'TotalAmountInvoiceCurrency',
        'total_vat_amount_invoice_currency' => 'TotalVatAmountInvoiceCurrency',
        'set_off_amount_invoice_currency' => 'SetOffAmountInvoiceCurrency',
        'customer_id' => 'CustomerId',
        'rows' => 'Rows',
        'vat_specification' => 'VatSpecification',
        'invoice_date' => 'InvoiceDate',
        'due_date' => 'DueDate',
        'delivery_date' => 'DeliveryDate',
        'rot_reduced_invoicing_type' => 'RotReducedInvoicingType',
        'rot_reduced_invoicing_amount' => 'RotReducedInvoicingAmount',
        'rot_reduced_invoicing_percent' => 'RotReducedInvoicingPercent',
        'rot_reduced_invoicing_property_name' => 'RotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'RotReducedInvoicingOrgNumber',
        'persons' => 'Persons',
        'rot_reduced_invoicing_automatic_distribution' => 'RotReducedInvoicingAutomaticDistribution',
        'electronic_reference' => 'ElectronicReference',
        'electronic_address' => 'ElectronicAddress',
        'edi_service_deliverer_id' => 'EdiServiceDelivererId',
        'our_reference' => 'OurReference',
        'your_reference' => 'YourReference',
        'buyers_order_reference' => 'BuyersOrderReference',
        'invoice_customer_name' => 'InvoiceCustomerName',
        'invoice_address1' => 'InvoiceAddress1',
        'invoice_address2' => 'InvoiceAddress2',
        'invoice_postal_code' => 'InvoicePostalCode',
        'invoice_city' => 'InvoiceCity',
        'invoice_country_code' => 'InvoiceCountryCode',
        'delivery_customer_name' => 'DeliveryCustomerName',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_postal_code' => 'DeliveryPostalCode',
        'delivery_city' => 'DeliveryCity',
        'delivery_country_code' => 'DeliveryCountryCode',
        'delivery_method_name' => 'DeliveryMethodName',
        'delivery_term_name' => 'DeliveryTermName',
        'delivery_method_code' => 'DeliveryMethodCode',
        'delivery_term_code' => 'DeliveryTermCode',
        'customer_is_private_person' => 'CustomerIsPrivatePerson',
        'terms_of_payment_id' => 'TermsOfPaymentId',
        'customer_email' => 'CustomerEmail',
        'invoice_number' => 'InvoiceNumber',
        'customer_number' => 'CustomerNumber',
        'payment_reference_number' => 'PaymentReferenceNumber',
        'rot_property_type' => 'RotPropertyType',
        'sales_document_attachments' => 'SalesDocumentAttachments',
        'message_threads' => 'MessageThreads',
        'notes' => 'Notes',
        'has_auto_invoice_error' => 'HasAutoInvoiceError',
        'is_not_delivered' => 'IsNotDelivered',
        'reverse_charge_on_construction_services' => 'ReverseChargeOnConstructionServices',
        'work_house_other_costs' => 'WorkHouseOtherCosts',
        'remaining_amount' => 'RemainingAmount',
        'remaining_amount_invoice_currency' => 'RemainingAmountInvoiceCurrency',
        'referring_invoice_id' => 'ReferringInvoiceId',
        'created_from_order_id' => 'CreatedFromOrderId',
        'created_from_draft_id' => 'CreatedFromDraftId',
        'voucher_number' => 'VoucherNumber',
        'voucher_id' => 'VoucherId',
        'created_utc' => 'CreatedUtc',
        'modified_utc' => 'ModifiedUtc',
        'reversed_construction_vat_invoicing' => 'ReversedConstructionVatInvoicing',
        'includes_vat' => 'IncludesVat',
        'send_type' => 'SendType',
        'payment_reminder_issued' => 'PaymentReminderIssued',
        'uses_green_technology' => 'UsesGreenTechnology'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'eu_third_party' => 'setEuThirdParty',
        'is_credit_invoice' => 'setIsCreditInvoice',
        'currency_code' => 'setCurrencyCode',
        'currency_rate' => 'setCurrencyRate',
        'created_by_user_id' => 'setCreatedByUserId',
        'total_amount' => 'setTotalAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'total_roundings' => 'setTotalRoundings',
        'total_amount_invoice_currency' => 'setTotalAmountInvoiceCurrency',
        'total_vat_amount_invoice_currency' => 'setTotalVatAmountInvoiceCurrency',
        'set_off_amount_invoice_currency' => 'setSetOffAmountInvoiceCurrency',
        'customer_id' => 'setCustomerId',
        'rows' => 'setRows',
        'vat_specification' => 'setVatSpecification',
        'invoice_date' => 'setInvoiceDate',
        'due_date' => 'setDueDate',
        'delivery_date' => 'setDeliveryDate',
        'rot_reduced_invoicing_type' => 'setRotReducedInvoicingType',
        'rot_reduced_invoicing_amount' => 'setRotReducedInvoicingAmount',
        'rot_reduced_invoicing_percent' => 'setRotReducedInvoicingPercent',
        'rot_reduced_invoicing_property_name' => 'setRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'setRotReducedInvoicingOrgNumber',
        'persons' => 'setPersons',
        'rot_reduced_invoicing_automatic_distribution' => 'setRotReducedInvoicingAutomaticDistribution',
        'electronic_reference' => 'setElectronicReference',
        'electronic_address' => 'setElectronicAddress',
        'edi_service_deliverer_id' => 'setEdiServiceDelivererId',
        'our_reference' => 'setOurReference',
        'your_reference' => 'setYourReference',
        'buyers_order_reference' => 'setBuyersOrderReference',
        'invoice_customer_name' => 'setInvoiceCustomerName',
        'invoice_address1' => 'setInvoiceAddress1',
        'invoice_address2' => 'setInvoiceAddress2',
        'invoice_postal_code' => 'setInvoicePostalCode',
        'invoice_city' => 'setInvoiceCity',
        'invoice_country_code' => 'setInvoiceCountryCode',
        'delivery_customer_name' => 'setDeliveryCustomerName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_postal_code' => 'setDeliveryPostalCode',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country_code' => 'setDeliveryCountryCode',
        'delivery_method_name' => 'setDeliveryMethodName',
        'delivery_term_name' => 'setDeliveryTermName',
        'delivery_method_code' => 'setDeliveryMethodCode',
        'delivery_term_code' => 'setDeliveryTermCode',
        'customer_is_private_person' => 'setCustomerIsPrivatePerson',
        'terms_of_payment_id' => 'setTermsOfPaymentId',
        'customer_email' => 'setCustomerEmail',
        'invoice_number' => 'setInvoiceNumber',
        'customer_number' => 'setCustomerNumber',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'rot_property_type' => 'setRotPropertyType',
        'sales_document_attachments' => 'setSalesDocumentAttachments',
        'message_threads' => 'setMessageThreads',
        'notes' => 'setNotes',
        'has_auto_invoice_error' => 'setHasAutoInvoiceError',
        'is_not_delivered' => 'setIsNotDelivered',
        'reverse_charge_on_construction_services' => 'setReverseChargeOnConstructionServices',
        'work_house_other_costs' => 'setWorkHouseOtherCosts',
        'remaining_amount' => 'setRemainingAmount',
        'remaining_amount_invoice_currency' => 'setRemainingAmountInvoiceCurrency',
        'referring_invoice_id' => 'setReferringInvoiceId',
        'created_from_order_id' => 'setCreatedFromOrderId',
        'created_from_draft_id' => 'setCreatedFromDraftId',
        'voucher_number' => 'setVoucherNumber',
        'voucher_id' => 'setVoucherId',
        'created_utc' => 'setCreatedUtc',
        'modified_utc' => 'setModifiedUtc',
        'reversed_construction_vat_invoicing' => 'setReversedConstructionVatInvoicing',
        'includes_vat' => 'setIncludesVat',
        'send_type' => 'setSendType',
        'payment_reminder_issued' => 'setPaymentReminderIssued',
        'uses_green_technology' => 'setUsesGreenTechnology'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'eu_third_party' => 'getEuThirdParty',
        'is_credit_invoice' => 'getIsCreditInvoice',
        'currency_code' => 'getCurrencyCode',
        'currency_rate' => 'getCurrencyRate',
        'created_by_user_id' => 'getCreatedByUserId',
        'total_amount' => 'getTotalAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'total_roundings' => 'getTotalRoundings',
        'total_amount_invoice_currency' => 'getTotalAmountInvoiceCurrency',
        'total_vat_amount_invoice_currency' => 'getTotalVatAmountInvoiceCurrency',
        'set_off_amount_invoice_currency' => 'getSetOffAmountInvoiceCurrency',
        'customer_id' => 'getCustomerId',
        'rows' => 'getRows',
        'vat_specification' => 'getVatSpecification',
        'invoice_date' => 'getInvoiceDate',
        'due_date' => 'getDueDate',
        'delivery_date' => 'getDeliveryDate',
        'rot_reduced_invoicing_type' => 'getRotReducedInvoicingType',
        'rot_reduced_invoicing_amount' => 'getRotReducedInvoicingAmount',
        'rot_reduced_invoicing_percent' => 'getRotReducedInvoicingPercent',
        'rot_reduced_invoicing_property_name' => 'getRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'getRotReducedInvoicingOrgNumber',
        'persons' => 'getPersons',
        'rot_reduced_invoicing_automatic_distribution' => 'getRotReducedInvoicingAutomaticDistribution',
        'electronic_reference' => 'getElectronicReference',
        'electronic_address' => 'getElectronicAddress',
        'edi_service_deliverer_id' => 'getEdiServiceDelivererId',
        'our_reference' => 'getOurReference',
        'your_reference' => 'getYourReference',
        'buyers_order_reference' => 'getBuyersOrderReference',
        'invoice_customer_name' => 'getInvoiceCustomerName',
        'invoice_address1' => 'getInvoiceAddress1',
        'invoice_address2' => 'getInvoiceAddress2',
        'invoice_postal_code' => 'getInvoicePostalCode',
        'invoice_city' => 'getInvoiceCity',
        'invoice_country_code' => 'getInvoiceCountryCode',
        'delivery_customer_name' => 'getDeliveryCustomerName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_postal_code' => 'getDeliveryPostalCode',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country_code' => 'getDeliveryCountryCode',
        'delivery_method_name' => 'getDeliveryMethodName',
        'delivery_term_name' => 'getDeliveryTermName',
        'delivery_method_code' => 'getDeliveryMethodCode',
        'delivery_term_code' => 'getDeliveryTermCode',
        'customer_is_private_person' => 'getCustomerIsPrivatePerson',
        'terms_of_payment_id' => 'getTermsOfPaymentId',
        'customer_email' => 'getCustomerEmail',
        'invoice_number' => 'getInvoiceNumber',
        'customer_number' => 'getCustomerNumber',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'rot_property_type' => 'getRotPropertyType',
        'sales_document_attachments' => 'getSalesDocumentAttachments',
        'message_threads' => 'getMessageThreads',
        'notes' => 'getNotes',
        'has_auto_invoice_error' => 'getHasAutoInvoiceError',
        'is_not_delivered' => 'getIsNotDelivered',
        'reverse_charge_on_construction_services' => 'getReverseChargeOnConstructionServices',
        'work_house_other_costs' => 'getWorkHouseOtherCosts',
        'remaining_amount' => 'getRemainingAmount',
        'remaining_amount_invoice_currency' => 'getRemainingAmountInvoiceCurrency',
        'referring_invoice_id' => 'getReferringInvoiceId',
        'created_from_order_id' => 'getCreatedFromOrderId',
        'created_from_draft_id' => 'getCreatedFromDraftId',
        'voucher_number' => 'getVoucherNumber',
        'voucher_id' => 'getVoucherId',
        'created_utc' => 'getCreatedUtc',
        'modified_utc' => 'getModifiedUtc',
        'reversed_construction_vat_invoicing' => 'getReversedConstructionVatInvoicing',
        'includes_vat' => 'getIncludesVat',
        'send_type' => 'getSendType',
        'payment_reminder_issued' => 'getPaymentReminderIssued',
        'uses_green_technology' => 'getUsesGreenTechnology'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROT_REDUCED_INVOICING_TYPE_0 = 0;
    const ROT_REDUCED_INVOICING_TYPE_1 = 1;
    const ROT_REDUCED_INVOICING_TYPE_2 = 2;
    const SEND_TYPE_0 = 0;
    const SEND_TYPE_1 = 1;
    const SEND_TYPE_2 = 2;
    const SEND_TYPE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRotReducedInvoicingTypeAllowableValues()
    {
        return [
            self::ROT_REDUCED_INVOICING_TYPE_0,
            self::ROT_REDUCED_INVOICING_TYPE_1,
            self::ROT_REDUCED_INVOICING_TYPE_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendTypeAllowableValues()
    {
        return [
            self::SEND_TYPE_0,
            self::SEND_TYPE_1,
            self::SEND_TYPE_2,
            self::SEND_TYPE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['eu_third_party'] = isset($data['eu_third_party']) ? $data['eu_third_party'] : null;
        $this->container['is_credit_invoice'] = isset($data['is_credit_invoice']) ? $data['is_credit_invoice'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['created_by_user_id'] = isset($data['created_by_user_id']) ? $data['created_by_user_id'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['total_vat_amount'] = isset($data['total_vat_amount']) ? $data['total_vat_amount'] : null;
        $this->container['total_roundings'] = isset($data['total_roundings']) ? $data['total_roundings'] : null;
        $this->container['total_amount_invoice_currency'] = isset($data['total_amount_invoice_currency']) ? $data['total_amount_invoice_currency'] : null;
        $this->container['total_vat_amount_invoice_currency'] = isset($data['total_vat_amount_invoice_currency']) ? $data['total_vat_amount_invoice_currency'] : null;
        $this->container['set_off_amount_invoice_currency'] = isset($data['set_off_amount_invoice_currency']) ? $data['set_off_amount_invoice_currency'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
        $this->container['vat_specification'] = isset($data['vat_specification']) ? $data['vat_specification'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['rot_reduced_invoicing_type'] = isset($data['rot_reduced_invoicing_type']) ? $data['rot_reduced_invoicing_type'] : null;
        $this->container['rot_reduced_invoicing_amount'] = isset($data['rot_reduced_invoicing_amount']) ? $data['rot_reduced_invoicing_amount'] : null;
        $this->container['rot_reduced_invoicing_percent'] = isset($data['rot_reduced_invoicing_percent']) ? $data['rot_reduced_invoicing_percent'] : null;
        $this->container['rot_reduced_invoicing_property_name'] = isset($data['rot_reduced_invoicing_property_name']) ? $data['rot_reduced_invoicing_property_name'] : null;
        $this->container['rot_reduced_invoicing_org_number'] = isset($data['rot_reduced_invoicing_org_number']) ? $data['rot_reduced_invoicing_org_number'] : null;
        $this->container['persons'] = isset($data['persons']) ? $data['persons'] : null;
        $this->container['rot_reduced_invoicing_automatic_distribution'] = isset($data['rot_reduced_invoicing_automatic_distribution']) ? $data['rot_reduced_invoicing_automatic_distribution'] : null;
        $this->container['electronic_reference'] = isset($data['electronic_reference']) ? $data['electronic_reference'] : null;
        $this->container['electronic_address'] = isset($data['electronic_address']) ? $data['electronic_address'] : null;
        $this->container['edi_service_deliverer_id'] = isset($data['edi_service_deliverer_id']) ? $data['edi_service_deliverer_id'] : null;
        $this->container['our_reference'] = isset($data['our_reference']) ? $data['our_reference'] : null;
        $this->container['your_reference'] = isset($data['your_reference']) ? $data['your_reference'] : null;
        $this->container['buyers_order_reference'] = isset($data['buyers_order_reference']) ? $data['buyers_order_reference'] : null;
        $this->container['invoice_customer_name'] = isset($data['invoice_customer_name']) ? $data['invoice_customer_name'] : null;
        $this->container['invoice_address1'] = isset($data['invoice_address1']) ? $data['invoice_address1'] : null;
        $this->container['invoice_address2'] = isset($data['invoice_address2']) ? $data['invoice_address2'] : null;
        $this->container['invoice_postal_code'] = isset($data['invoice_postal_code']) ? $data['invoice_postal_code'] : null;
        $this->container['invoice_city'] = isset($data['invoice_city']) ? $data['invoice_city'] : null;
        $this->container['invoice_country_code'] = isset($data['invoice_country_code']) ? $data['invoice_country_code'] : null;
        $this->container['delivery_customer_name'] = isset($data['delivery_customer_name']) ? $data['delivery_customer_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_postal_code'] = isset($data['delivery_postal_code']) ? $data['delivery_postal_code'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_country_code'] = isset($data['delivery_country_code']) ? $data['delivery_country_code'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['delivery_term_name'] = isset($data['delivery_term_name']) ? $data['delivery_term_name'] : null;
        $this->container['delivery_method_code'] = isset($data['delivery_method_code']) ? $data['delivery_method_code'] : null;
        $this->container['delivery_term_code'] = isset($data['delivery_term_code']) ? $data['delivery_term_code'] : null;
        $this->container['customer_is_private_person'] = isset($data['customer_is_private_person']) ? $data['customer_is_private_person'] : null;
        $this->container['terms_of_payment_id'] = isset($data['terms_of_payment_id']) ? $data['terms_of_payment_id'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['payment_reference_number'] = isset($data['payment_reference_number']) ? $data['payment_reference_number'] : null;
        $this->container['rot_property_type'] = isset($data['rot_property_type']) ? $data['rot_property_type'] : null;
        $this->container['sales_document_attachments'] = isset($data['sales_document_attachments']) ? $data['sales_document_attachments'] : null;
        $this->container['message_threads'] = isset($data['message_threads']) ? $data['message_threads'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['has_auto_invoice_error'] = isset($data['has_auto_invoice_error']) ? $data['has_auto_invoice_error'] : null;
        $this->container['is_not_delivered'] = isset($data['is_not_delivered']) ? $data['is_not_delivered'] : null;
        $this->container['reverse_charge_on_construction_services'] = isset($data['reverse_charge_on_construction_services']) ? $data['reverse_charge_on_construction_services'] : null;
        $this->container['work_house_other_costs'] = isset($data['work_house_other_costs']) ? $data['work_house_other_costs'] : null;
        $this->container['remaining_amount'] = isset($data['remaining_amount']) ? $data['remaining_amount'] : null;
        $this->container['remaining_amount_invoice_currency'] = isset($data['remaining_amount_invoice_currency']) ? $data['remaining_amount_invoice_currency'] : null;
        $this->container['referring_invoice_id'] = isset($data['referring_invoice_id']) ? $data['referring_invoice_id'] : null;
        $this->container['created_from_order_id'] = isset($data['created_from_order_id']) ? $data['created_from_order_id'] : null;
        $this->container['created_from_draft_id'] = isset($data['created_from_draft_id']) ? $data['created_from_draft_id'] : null;
        $this->container['voucher_number'] = isset($data['voucher_number']) ? $data['voucher_number'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
        $this->container['reversed_construction_vat_invoicing'] = isset($data['reversed_construction_vat_invoicing']) ? $data['reversed_construction_vat_invoicing'] : null;
        $this->container['includes_vat'] = isset($data['includes_vat']) ? $data['includes_vat'] : null;
        $this->container['send_type'] = isset($data['send_type']) ? $data['send_type'] : null;
        $this->container['payment_reminder_issued'] = isset($data['payment_reminder_issued']) ? $data['payment_reminder_issued'] : null;
        $this->container['uses_green_technology'] = isset($data['uses_green_technology']) ? $data['uses_green_technology'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['eu_third_party'] === null) {
            $invalidProperties[] = "'eu_third_party' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['rows'] === null) {
            $invalidProperties[] = "'rows' can't be null";
        }
        if ($this->container['rot_reduced_invoicing_type'] === null) {
            $invalidProperties[] = "'rot_reduced_invoicing_type' can't be null";
        }
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!is_null($this->container['rot_reduced_invoicing_type']) && !in_array($this->container['rot_reduced_invoicing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (($this->container['rot_reduced_invoicing_type'] > 2)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_type', must be smaller than or equal to 2.";
        }

        if (($this->container['rot_reduced_invoicing_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_type', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rot_reduced_invoicing_org_number']) && (mb_strlen($this->container['rot_reduced_invoicing_org_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_org_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['rot_reduced_invoicing_org_number']) && (mb_strlen($this->container['rot_reduced_invoicing_org_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_org_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['edi_service_deliverer_id']) && (mb_strlen($this->container['edi_service_deliverer_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'edi_service_deliverer_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['edi_service_deliverer_id']) && (mb_strlen($this->container['edi_service_deliverer_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'edi_service_deliverer_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['buyers_order_reference']) && (mb_strlen($this->container['buyers_order_reference']) > 35)) {
            $invalidProperties[] = "invalid value for 'buyers_order_reference', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['buyers_order_reference']) && (mb_strlen($this->container['buyers_order_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'buyers_order_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_city']) && (mb_strlen($this->container['invoice_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_city']) && (mb_strlen($this->container['invoice_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rot_property_type']) && ($this->container['rot_property_type'] > 2)) {
            $invalidProperties[] = "invalid value for 'rot_property_type', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['rot_property_type']) && ($this->container['rot_property_type'] < 1)) {
            $invalidProperties[] = "invalid value for 'rot_property_type', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getSendTypeAllowableValues();
        if (!is_null($this->container['send_type']) && !in_array($this->container['send_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: This is automatically generated by eAccounting upon creation
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets eu_third_party
     *
     * @return bool
     */
    public function getEuThirdParty()
    {
        return $this->container['eu_third_party'];
    }

    /**
     * Sets eu_third_party
     *
     * @param bool $eu_third_party eu_third_party
     *
     * @return $this
     */
    public function setEuThirdParty($eu_third_party)
    {
        $this->container['eu_third_party'] = $eu_third_party;

        return $this;
    }

    /**
     * Gets is_credit_invoice
     *
     * @return bool
     */
    public function getIsCreditInvoice()
    {
        return $this->container['is_credit_invoice'];
    }

    /**
     * Sets is_credit_invoice
     *
     * @param bool $is_credit_invoice is_credit_invoice
     *
     * @return $this
     */
    public function setIsCreditInvoice($is_credit_invoice)
    {
        $this->container['is_credit_invoice'] = $is_credit_invoice;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return double
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param double $currency_rate Default: Automatic calculation of the currency rate. Enter this value to provide a custom rate
     *
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string $created_by_user_id created_by_user_id
     *
     * @return $this
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     *
     * @return double
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     *
     * @param double $total_vat_amount total_vat_amount
     *
     * @return $this
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets total_roundings
     *
     * @return double
     */
    public function getTotalRoundings()
    {
        return $this->container['total_roundings'];
    }

    /**
     * Sets total_roundings
     *
     * @param double $total_roundings total_roundings
     *
     * @return $this
     */
    public function setTotalRoundings($total_roundings)
    {
        $this->container['total_roundings'] = $total_roundings;

        return $this;
    }

    /**
     * Gets total_amount_invoice_currency
     *
     * @return double
     */
    public function getTotalAmountInvoiceCurrency()
    {
        return $this->container['total_amount_invoice_currency'];
    }

    /**
     * Sets total_amount_invoice_currency
     *
     * @param double $total_amount_invoice_currency total_amount_invoice_currency
     *
     * @return $this
     */
    public function setTotalAmountInvoiceCurrency($total_amount_invoice_currency)
    {
        $this->container['total_amount_invoice_currency'] = $total_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets total_vat_amount_invoice_currency
     *
     * @return double
     */
    public function getTotalVatAmountInvoiceCurrency()
    {
        return $this->container['total_vat_amount_invoice_currency'];
    }

    /**
     * Sets total_vat_amount_invoice_currency
     *
     * @param double $total_vat_amount_invoice_currency total_vat_amount_invoice_currency
     *
     * @return $this
     */
    public function setTotalVatAmountInvoiceCurrency($total_vat_amount_invoice_currency)
    {
        $this->container['total_vat_amount_invoice_currency'] = $total_vat_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets set_off_amount_invoice_currency
     *
     * @return double
     */
    public function getSetOffAmountInvoiceCurrency()
    {
        return $this->container['set_off_amount_invoice_currency'];
    }

    /**
     * Sets set_off_amount_invoice_currency
     *
     * @param double $set_off_amount_invoice_currency set_off_amount_invoice_currency
     *
     * @return $this
     */
    public function setSetOffAmountInvoiceCurrency($set_off_amount_invoice_currency)
    {
        $this->container['set_off_amount_invoice_currency'] = $set_off_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceRowApi[]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \Struqtur\VismaEAccounting\Model\CustomerInvoiceRowApi[] $rows rows
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets vat_specification
     *
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceVatApi[]
     */
    public function getVatSpecification()
    {
        return $this->container['vat_specification'];
    }

    /**
     * Sets vat_specification
     *
     * @param \Struqtur\VismaEAccounting\Model\CustomerInvoiceVatApi[] $vat_specification Purpose: A summary of amounts for each VAT rate
     *
     * @return $this
     */
    public function setVatSpecification($vat_specification)
    {
        $this->container['vat_specification'] = $vat_specification;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_type
     *
     * @return int
     */
    public function getRotReducedInvoicingType()
    {
        return $this->container['rot_reduced_invoicing_type'];
    }

    /**
     * Sets rot_reduced_invoicing_type
     *
     * @param int $rot_reduced_invoicing_type 0 = Normal, 1 = Rot, 2 = Rut
     *
     * @return $this
     */
    public function setRotReducedInvoicingType($rot_reduced_invoicing_type)
    {
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!in_array($rot_reduced_invoicing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (($rot_reduced_invoicing_type > 2)) {
            throw new \InvalidArgumentException('invalid value for $rot_reduced_invoicing_type when calling CustomerInvoiceApi., must be smaller than or equal to 2.');
        }
        if (($rot_reduced_invoicing_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $rot_reduced_invoicing_type when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['rot_reduced_invoicing_type'] = $rot_reduced_invoicing_type;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_amount
     *
     * @return double
     */
    public function getRotReducedInvoicingAmount()
    {
        return $this->container['rot_reduced_invoicing_amount'];
    }

    /**
     * Sets rot_reduced_invoicing_amount
     *
     * @param double $rot_reduced_invoicing_amount Default: Automatic tax reduction calculation. Used for the manual input of the deducted tax reduction
     *
     * @return $this
     */
    public function setRotReducedInvoicingAmount($rot_reduced_invoicing_amount)
    {
        $this->container['rot_reduced_invoicing_amount'] = $rot_reduced_invoicing_amount;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_percent
     *
     * @return double
     */
    public function getRotReducedInvoicingPercent()
    {
        return $this->container['rot_reduced_invoicing_percent'];
    }

    /**
     * Sets rot_reduced_invoicing_percent
     *
     * @param double $rot_reduced_invoicing_percent rot_reduced_invoicing_percent
     *
     * @return $this
     */
    public function setRotReducedInvoicingPercent($rot_reduced_invoicing_percent)
    {
        $this->container['rot_reduced_invoicing_percent'] = $rot_reduced_invoicing_percent;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_property_name
     *
     * @return string
     */
    public function getRotReducedInvoicingPropertyName()
    {
        return $this->container['rot_reduced_invoicing_property_name'];
    }

    /**
     * Sets rot_reduced_invoicing_property_name
     *
     * @param string $rot_reduced_invoicing_property_name Used for providing a custom name. Is required when RotPropertyType or UsesGreenTechnology is set.
     *
     * @return $this
     */
    public function setRotReducedInvoicingPropertyName($rot_reduced_invoicing_property_name)
    {
        $this->container['rot_reduced_invoicing_property_name'] = $rot_reduced_invoicing_property_name;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_org_number
     *
     * @return string
     */
    public function getRotReducedInvoicingOrgNumber()
    {
        return $this->container['rot_reduced_invoicing_org_number'];
    }

    /**
     * Sets rot_reduced_invoicing_org_number
     *
     * @param string $rot_reduced_invoicing_org_number rot_reduced_invoicing_org_number
     *
     * @return $this
     */
    public function setRotReducedInvoicingOrgNumber($rot_reduced_invoicing_org_number)
    {
        if (!is_null($rot_reduced_invoicing_org_number) && (mb_strlen($rot_reduced_invoicing_org_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_org_number when calling CustomerInvoiceApi., must be smaller than or equal to 11.');
        }
        if (!is_null($rot_reduced_invoicing_org_number) && (mb_strlen($rot_reduced_invoicing_org_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_org_number when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['rot_reduced_invoicing_org_number'] = $rot_reduced_invoicing_org_number;

        return $this;
    }

    /**
     * Gets persons
     *
     * @return \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]
     */
    public function getPersons()
    {
        return $this->container['persons'];
    }

    /**
     * Sets persons
     *
     * @param \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[] $persons Purpose: Required for ROT/RUT invoices only
     *
     * @return $this
     */
    public function setPersons($persons)
    {
        $this->container['persons'] = $persons;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_automatic_distribution
     *
     * @return bool
     */
    public function getRotReducedInvoicingAutomaticDistribution()
    {
        return $this->container['rot_reduced_invoicing_automatic_distribution'];
    }

    /**
     * Sets rot_reduced_invoicing_automatic_distribution
     *
     * @param bool $rot_reduced_invoicing_automatic_distribution rot_reduced_invoicing_automatic_distribution
     *
     * @return $this
     */
    public function setRotReducedInvoicingAutomaticDistribution($rot_reduced_invoicing_automatic_distribution)
    {
        $this->container['rot_reduced_invoicing_automatic_distribution'] = $rot_reduced_invoicing_automatic_distribution;

        return $this;
    }

    /**
     * Gets electronic_reference
     *
     * @return string
     */
    public function getElectronicReference()
    {
        return $this->container['electronic_reference'];
    }

    /**
     * Sets electronic_reference
     *
     * @param string $electronic_reference electronic_reference
     *
     * @return $this
     */
    public function setElectronicReference($electronic_reference)
    {
        $this->container['electronic_reference'] = $electronic_reference;

        return $this;
    }

    /**
     * Gets electronic_address
     *
     * @return string
     */
    public function getElectronicAddress()
    {
        return $this->container['electronic_address'];
    }

    /**
     * Sets electronic_address
     *
     * @param string $electronic_address electronic_address
     *
     * @return $this
     */
    public function setElectronicAddress($electronic_address)
    {
        $this->container['electronic_address'] = $electronic_address;

        return $this;
    }

    /**
     * Gets edi_service_deliverer_id
     *
     * @return string
     */
    public function getEdiServiceDelivererId()
    {
        return $this->container['edi_service_deliverer_id'];
    }

    /**
     * Sets edi_service_deliverer_id
     *
     * @param string $edi_service_deliverer_id edi_service_deliverer_id
     *
     * @return $this
     */
    public function setEdiServiceDelivererId($edi_service_deliverer_id)
    {
        if (!is_null($edi_service_deliverer_id) && (mb_strlen($edi_service_deliverer_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $edi_service_deliverer_id when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($edi_service_deliverer_id) && (mb_strlen($edi_service_deliverer_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $edi_service_deliverer_id when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['edi_service_deliverer_id'] = $edi_service_deliverer_id;

        return $this;
    }

    /**
     * Gets our_reference
     *
     * @return string
     */
    public function getOurReference()
    {
        return $this->container['our_reference'];
    }

    /**
     * Sets our_reference
     *
     * @param string $our_reference Max length: 100 characters
     *
     * @return $this
     */
    public function setOurReference($our_reference)
    {
        if (!is_null($our_reference) && (mb_strlen($our_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling CustomerInvoiceApi., must be smaller than or equal to 100.');
        }
        if (!is_null($our_reference) && (mb_strlen($our_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['our_reference'] = $our_reference;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string $your_reference Max length: 100 characters
     *
     * @return $this
     */
    public function setYourReference($your_reference)
    {
        if (!is_null($your_reference) && (mb_strlen($your_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling CustomerInvoiceApi., must be smaller than or equal to 100.');
        }
        if (!is_null($your_reference) && (mb_strlen($your_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets buyers_order_reference
     *
     * @return string
     */
    public function getBuyersOrderReference()
    {
        return $this->container['buyers_order_reference'];
    }

    /**
     * Sets buyers_order_reference
     *
     * @param string $buyers_order_reference Purpose: Used when sending electronic invoices. Max length: 35 characters. Can be null or empty
     *
     * @return $this
     */
    public function setBuyersOrderReference($buyers_order_reference)
    {
        if (!is_null($buyers_order_reference) && (mb_strlen($buyers_order_reference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $buyers_order_reference when calling CustomerInvoiceApi., must be smaller than or equal to 35.');
        }
        if (!is_null($buyers_order_reference) && (mb_strlen($buyers_order_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $buyers_order_reference when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['buyers_order_reference'] = $buyers_order_reference;

        return $this;
    }

    /**
     * Gets invoice_customer_name
     *
     * @return string
     */
    public function getInvoiceCustomerName()
    {
        return $this->container['invoice_customer_name'];
    }

    /**
     * Sets invoice_customer_name
     *
     * @param string $invoice_customer_name invoice_customer_name
     *
     * @return $this
     */
    public function setInvoiceCustomerName($invoice_customer_name)
    {
        $this->container['invoice_customer_name'] = $invoice_customer_name;

        return $this;
    }

    /**
     * Gets invoice_address1
     *
     * @return string
     */
    public function getInvoiceAddress1()
    {
        return $this->container['invoice_address1'];
    }

    /**
     * Sets invoice_address1
     *
     * @param string $invoice_address1 Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceAddress1($invoice_address1)
    {
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address1'] = $invoice_address1;

        return $this;
    }

    /**
     * Gets invoice_address2
     *
     * @return string
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoice_address2'];
    }

    /**
     * Sets invoice_address2
     *
     * @param string $invoice_address2 Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceAddress2($invoice_address2)
    {
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address2'] = $invoice_address2;

        return $this;
    }

    /**
     * Gets invoice_postal_code
     *
     * @return string
     */
    public function getInvoicePostalCode()
    {
        return $this->container['invoice_postal_code'];
    }

    /**
     * Sets invoice_postal_code
     *
     * @param string $invoice_postal_code Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoicePostalCode($invoice_postal_code)
    {
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_postal_code'] = $invoice_postal_code;

        return $this;
    }

    /**
     * Gets invoice_city
     *
     * @return string
     */
    public function getInvoiceCity()
    {
        return $this->container['invoice_city'];
    }

    /**
     * Sets invoice_city
     *
     * @param string $invoice_city Max length: 50 characters
     *
     * @return $this
     */
    public function setInvoiceCity($invoice_city)
    {
        if (!is_null($invoice_city) && (mb_strlen($invoice_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_city) && (mb_strlen($invoice_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_city'] = $invoice_city;

        return $this;
    }

    /**
     * Gets invoice_country_code
     *
     * @return string
     */
    public function getInvoiceCountryCode()
    {
        return $this->container['invoice_country_code'];
    }

    /**
     * Sets invoice_country_code
     *
     * @param string $invoice_country_code Max length: 2 characters
     *
     * @return $this
     */
    public function setInvoiceCountryCode($invoice_country_code)
    {
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerInvoiceApi., must be smaller than or equal to 2.');
        }
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_country_code'] = $invoice_country_code;

        return $this;
    }

    /**
     * Gets delivery_customer_name
     *
     * @return string
     */
    public function getDeliveryCustomerName()
    {
        return $this->container['delivery_customer_name'];
    }

    /**
     * Sets delivery_customer_name
     *
     * @param string $delivery_customer_name Max length: 100 characters
     *
     * @return $this
     */
    public function setDeliveryCustomerName($delivery_customer_name)
    {
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerInvoiceApi., must be smaller than or equal to 100.');
        }
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_customer_name'] = $delivery_customer_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string $delivery_address1 Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string $delivery_address2 Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_postal_code
     *
     * @return string
     */
    public function getDeliveryPostalCode()
    {
        return $this->container['delivery_postal_code'];
    }

    /**
     * Sets delivery_postal_code
     *
     * @param string $delivery_postal_code Max length: 10 characters
     *
     * @return $this
     */
    public function setDeliveryPostalCode($delivery_postal_code)
    {
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerInvoiceApi., must be smaller than or equal to 10.');
        }
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_postal_code'] = $delivery_postal_code;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string $delivery_city Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerInvoiceApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country_code
     *
     * @return string
     */
    public function getDeliveryCountryCode()
    {
        return $this->container['delivery_country_code'];
    }

    /**
     * Sets delivery_country_code
     *
     * @param string $delivery_country_code Max length: 2 characters
     *
     * @return $this
     */
    public function setDeliveryCountryCode($delivery_country_code)
    {
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerInvoiceApi., must be smaller than or equal to 2.');
        }
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerInvoiceApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_country_code'] = $delivery_country_code;

        return $this;
    }

    /**
     * Gets delivery_method_name
     *
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     *
     * @param string $delivery_method_name delivery_method_name
     *
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets delivery_term_name
     *
     * @return string
     */
    public function getDeliveryTermName()
    {
        return $this->container['delivery_term_name'];
    }

    /**
     * Sets delivery_term_name
     *
     * @param string $delivery_term_name delivery_term_name
     *
     * @return $this
     */
    public function setDeliveryTermName($delivery_term_name)
    {
        $this->container['delivery_term_name'] = $delivery_term_name;

        return $this;
    }

    /**
     * Gets delivery_method_code
     *
     * @return string
     */
    public function getDeliveryMethodCode()
    {
        return $this->container['delivery_method_code'];
    }

    /**
     * Sets delivery_method_code
     *
     * @param string $delivery_method_code delivery_method_code
     *
     * @return $this
     */
    public function setDeliveryMethodCode($delivery_method_code)
    {
        $this->container['delivery_method_code'] = $delivery_method_code;

        return $this;
    }

    /**
     * Gets delivery_term_code
     *
     * @return string
     */
    public function getDeliveryTermCode()
    {
        return $this->container['delivery_term_code'];
    }

    /**
     * Sets delivery_term_code
     *
     * @param string $delivery_term_code delivery_term_code
     *
     * @return $this
     */
    public function setDeliveryTermCode($delivery_term_code)
    {
        $this->container['delivery_term_code'] = $delivery_term_code;

        return $this;
    }

    /**
     * Gets customer_is_private_person
     *
     * @return bool
     */
    public function getCustomerIsPrivatePerson()
    {
        return $this->container['customer_is_private_person'];
    }

    /**
     * Sets customer_is_private_person
     *
     * @param bool $customer_is_private_person customer_is_private_person
     *
     * @return $this
     */
    public function setCustomerIsPrivatePerson($customer_is_private_person)
    {
        $this->container['customer_is_private_person'] = $customer_is_private_person;

        return $this;
    }

    /**
     * Gets terms_of_payment_id
     *
     * @return string
     */
    public function getTermsOfPaymentId()
    {
        return $this->container['terms_of_payment_id'];
    }

    /**
     * Sets terms_of_payment_id
     *
     * @param string $terms_of_payment_id Specify a different terms of payment for the invoice. If not filled customer's terms of payment will be used
     *
     * @return $this
     */
    public function setTermsOfPaymentId($terms_of_payment_id)
    {
        $this->container['terms_of_payment_id'] = $terms_of_payment_id;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email customer_email
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number customer_number
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string $payment_reference_number Purpose: Empty if UsesPaymentReferenceNumber not activated on the company. Use /v2/companysettings.
     *
     * @return $this
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets rot_property_type
     *
     * @return int
     */
    public function getRotPropertyType()
    {
        return $this->container['rot_property_type'];
    }

    /**
     * Sets rot_property_type
     *
     * @param int $rot_property_type 1 = Apartment, 2 = Property  Leave blank or set to null if you do not intend to use ROT or Green Technology functionality
     *
     * @return $this
     */
    public function setRotPropertyType($rot_property_type)
    {

        if (!is_null($rot_property_type) && ($rot_property_type > 2)) {
            throw new \InvalidArgumentException('invalid value for $rot_property_type when calling CustomerInvoiceApi., must be smaller than or equal to 2.');
        }
        if (!is_null($rot_property_type) && ($rot_property_type < 1)) {
            throw new \InvalidArgumentException('invalid value for $rot_property_type when calling CustomerInvoiceApi., must be bigger than or equal to 1.');
        }

        $this->container['rot_property_type'] = $rot_property_type;

        return $this;
    }

    /**
     * Gets sales_document_attachments
     *
     * @return string[]
     */
    public function getSalesDocumentAttachments()
    {
        return $this->container['sales_document_attachments'];
    }

    /**
     * Sets sales_document_attachments
     *
     * @param string[] $sales_document_attachments Upload attachments via POST /v2/salesdocumentattachments/customerinvoice
     *
     * @return $this
     */
    public function setSalesDocumentAttachments($sales_document_attachments)
    {
        $this->container['sales_document_attachments'] = $sales_document_attachments;

        return $this;
    }

    /**
     * Gets message_threads
     *
     * @return string[]
     */
    public function getMessageThreads()
    {
        return $this->container['message_threads'];
    }

    /**
     * Sets message_threads
     *
     * @param string[] $message_threads Fetch messages via GET /v2/messagethreads/{messageThreadId}
     *
     * @return $this
     */
    public function setMessageThreads($message_threads)
    {
        $this->container['message_threads'] = $message_threads;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes Fetch notes via GET /v2/notes/{noteId}
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets has_auto_invoice_error
     *
     * @return bool
     */
    public function getHasAutoInvoiceError()
    {
        return $this->container['has_auto_invoice_error'];
    }

    /**
     * Sets has_auto_invoice_error
     *
     * @param bool $has_auto_invoice_error has_auto_invoice_error
     *
     * @return $this
     */
    public function setHasAutoInvoiceError($has_auto_invoice_error)
    {
        $this->container['has_auto_invoice_error'] = $has_auto_invoice_error;

        return $this;
    }

    /**
     * Gets is_not_delivered
     *
     * @return bool
     */
    public function getIsNotDelivered()
    {
        return $this->container['is_not_delivered'];
    }

    /**
     * Sets is_not_delivered
     *
     * @param bool $is_not_delivered Purpose: True if sending by email has failed
     *
     * @return $this
     */
    public function setIsNotDelivered($is_not_delivered)
    {
        $this->container['is_not_delivered'] = $is_not_delivered;

        return $this;
    }

    /**
     * Gets reverse_charge_on_construction_services
     *
     * @return bool
     */
    public function getReverseChargeOnConstructionServices()
    {
        return $this->container['reverse_charge_on_construction_services'];
    }

    /**
     * Sets reverse_charge_on_construction_services
     *
     * @param bool $reverse_charge_on_construction_services reverse_charge_on_construction_services
     *
     * @return $this
     */
    public function setReverseChargeOnConstructionServices($reverse_charge_on_construction_services)
    {
        $this->container['reverse_charge_on_construction_services'] = $reverse_charge_on_construction_services;

        return $this;
    }

    /**
     * Gets work_house_other_costs
     *
     * @return double
     */
    public function getWorkHouseOtherCosts()
    {
        return $this->container['work_house_other_costs'];
    }

    /**
     * Sets work_house_other_costs
     *
     * @param double $work_house_other_costs work_house_other_costs
     *
     * @return $this
     */
    public function setWorkHouseOtherCosts($work_house_other_costs)
    {
        $this->container['work_house_other_costs'] = $work_house_other_costs;

        return $this;
    }

    /**
     * Gets remaining_amount
     *
     * @return double
     */
    public function getRemainingAmount()
    {
        return $this->container['remaining_amount'];
    }

    /**
     * Sets remaining_amount
     *
     * @param double $remaining_amount remaining_amount
     *
     * @return $this
     */
    public function setRemainingAmount($remaining_amount)
    {
        $this->container['remaining_amount'] = $remaining_amount;

        return $this;
    }

    /**
     * Gets remaining_amount_invoice_currency
     *
     * @return double
     */
    public function getRemainingAmountInvoiceCurrency()
    {
        return $this->container['remaining_amount_invoice_currency'];
    }

    /**
     * Sets remaining_amount_invoice_currency
     *
     * @param double $remaining_amount_invoice_currency remaining_amount_invoice_currency
     *
     * @return $this
     */
    public function setRemainingAmountInvoiceCurrency($remaining_amount_invoice_currency)
    {
        $this->container['remaining_amount_invoice_currency'] = $remaining_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets referring_invoice_id
     *
     * @return string
     */
    public function getReferringInvoiceId()
    {
        return $this->container['referring_invoice_id'];
    }

    /**
     * Sets referring_invoice_id
     *
     * @param string $referring_invoice_id referring_invoice_id
     *
     * @return $this
     */
    public function setReferringInvoiceId($referring_invoice_id)
    {
        $this->container['referring_invoice_id'] = $referring_invoice_id;

        return $this;
    }

    /**
     * Gets created_from_order_id
     *
     * @return string
     */
    public function getCreatedFromOrderId()
    {
        return $this->container['created_from_order_id'];
    }

    /**
     * Sets created_from_order_id
     *
     * @param string $created_from_order_id created_from_order_id
     *
     * @return $this
     */
    public function setCreatedFromOrderId($created_from_order_id)
    {
        $this->container['created_from_order_id'] = $created_from_order_id;

        return $this;
    }

    /**
     * Gets created_from_draft_id
     *
     * @return string
     */
    public function getCreatedFromDraftId()
    {
        return $this->container['created_from_draft_id'];
    }

    /**
     * Sets created_from_draft_id
     *
     * @param string $created_from_draft_id If a valid customer invoice draft Id is provided, it will be bookkeeped using the option entered in the SentType property
     *
     * @return $this
     */
    public function setCreatedFromDraftId($created_from_draft_id)
    {
        $this->container['created_from_draft_id'] = $created_from_draft_id;

        return $this;
    }

    /**
     * Gets voucher_number
     *
     * @return string
     */
    public function getVoucherNumber()
    {
        return $this->container['voucher_number'];
    }

    /**
     * Sets voucher_number
     *
     * @param string $voucher_number voucher_number
     *
     * @return $this
     */
    public function setVoucherNumber($voucher_number)
    {
        $this->container['voucher_number'] = $voucher_number;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }

    /**
     * Gets reversed_construction_vat_invoicing
     *
     * @return bool
     */
    public function getReversedConstructionVatInvoicing()
    {
        return $this->container['reversed_construction_vat_invoicing'];
    }

    /**
     * Sets reversed_construction_vat_invoicing
     *
     * @param bool $reversed_construction_vat_invoicing reversed_construction_vat_invoicing
     *
     * @return $this
     */
    public function setReversedConstructionVatInvoicing($reversed_construction_vat_invoicing)
    {
        $this->container['reversed_construction_vat_invoicing'] = $reversed_construction_vat_invoicing;

        return $this;
    }

    /**
     * Gets includes_vat
     *
     * @return bool
     */
    public function getIncludesVat()
    {
        return $this->container['includes_vat'];
    }

    /**
     * Sets includes_vat
     *
     * @param bool $includes_vat Purpose: If true the unit prices on rows include VAT. The value is set upon creation depending whether \"Show prices excl. VAT for private individuals\" in company settings is marked or not
     *
     * @return $this
     */
    public function setIncludesVat($includes_vat)
    {
        $this->container['includes_vat'] = $includes_vat;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return int
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param int $send_type Used for sending the invoice via Autoinvoice  Default:None  0 = None, 1 = AutoInvoiceElectronic, 2 = AutoInvoicePrint, 3 = AutoInvoiceB2C
     *
     * @return $this
     */
    public function setSendType($send_type)
    {
        $allowedValues = $this->getSendTypeAllowableValues();
        if (!is_null($send_type) && !in_array($send_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_type'] = $send_type;

        return $this;
    }

    /**
     * Gets payment_reminder_issued
     *
     * @return bool
     */
    public function getPaymentReminderIssued()
    {
        return $this->container['payment_reminder_issued'];
    }

    /**
     * Sets payment_reminder_issued
     *
     * @param bool $payment_reminder_issued Purpose: If true a payment reminder has been sent for the overdue invoice, otherwise it will be set as false. To send a payment reminder please use the v2/customerinvoices/{invoiceId}/paymentreminders endpoint
     *
     * @return $this
     */
    public function setPaymentReminderIssued($payment_reminder_issued)
    {
        $this->container['payment_reminder_issued'] = $payment_reminder_issued;

        return $this;
    }

    /**
     * Gets uses_green_technology
     *
     * @return bool
     */
    public function getUsesGreenTechnology()
    {
        return $this->container['uses_green_technology'];
    }

    /**
     * Sets uses_green_technology
     *
     * @param bool $uses_green_technology Set to true if this customer invoice benefits from deduction on Green Technology.  If set to true the customer invoice must have RotReducedInvoicingType set to normal and contain at least one row with applicable deduction.
     *
     * @return $this
     */
    public function setUsesGreenTechnology($uses_green_technology)
    {
        $this->container['uses_green_technology'] = $uses_green_technology;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


