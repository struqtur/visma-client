<?php
/**
 * IEdmModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * IEdmModel Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IEdmModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IEdmModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'schema_elements' => '\Struqtur\VismaEAccounting\Model\IEdmSchemaElement[]',
        'vocabulary_annotations' => '\Struqtur\VismaEAccounting\Model\IEdmVocabularyAnnotation[]',
        'referenced_models' => '\Struqtur\VismaEAccounting\Model\IEdmModel[]',
        'declared_namespaces' => 'string[]',
        'direct_value_annotations_manager' => '\Struqtur\VismaEAccounting\Model\IEdmDirectValueAnnotationsManager',
        'entity_container' => '\Struqtur\VismaEAccounting\Model\IEdmEntityContainer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'schema_elements' => null,
        'vocabulary_annotations' => null,
        'referenced_models' => null,
        'declared_namespaces' => null,
        'direct_value_annotations_manager' => null,
        'entity_container' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schema_elements' => 'SchemaElements',
        'vocabulary_annotations' => 'VocabularyAnnotations',
        'referenced_models' => 'ReferencedModels',
        'declared_namespaces' => 'DeclaredNamespaces',
        'direct_value_annotations_manager' => 'DirectValueAnnotationsManager',
        'entity_container' => 'EntityContainer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schema_elements' => 'setSchemaElements',
        'vocabulary_annotations' => 'setVocabularyAnnotations',
        'referenced_models' => 'setReferencedModels',
        'declared_namespaces' => 'setDeclaredNamespaces',
        'direct_value_annotations_manager' => 'setDirectValueAnnotationsManager',
        'entity_container' => 'setEntityContainer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schema_elements' => 'getSchemaElements',
        'vocabulary_annotations' => 'getVocabularyAnnotations',
        'referenced_models' => 'getReferencedModels',
        'declared_namespaces' => 'getDeclaredNamespaces',
        'direct_value_annotations_manager' => 'getDirectValueAnnotationsManager',
        'entity_container' => 'getEntityContainer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['schema_elements'] = isset($data['schema_elements']) ? $data['schema_elements'] : null;
        $this->container['vocabulary_annotations'] = isset($data['vocabulary_annotations']) ? $data['vocabulary_annotations'] : null;
        $this->container['referenced_models'] = isset($data['referenced_models']) ? $data['referenced_models'] : null;
        $this->container['declared_namespaces'] = isset($data['declared_namespaces']) ? $data['declared_namespaces'] : null;
        $this->container['direct_value_annotations_manager'] = isset($data['direct_value_annotations_manager']) ? $data['direct_value_annotations_manager'] : null;
        $this->container['entity_container'] = isset($data['entity_container']) ? $data['entity_container'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schema_elements
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmSchemaElement[]
     */
    public function getSchemaElements()
    {
        return $this->container['schema_elements'];
    }

    /**
     * Sets schema_elements
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmSchemaElement[] $schema_elements schema_elements
     *
     * @return $this
     */
    public function setSchemaElements($schema_elements)
    {
        $this->container['schema_elements'] = $schema_elements;

        return $this;
    }

    /**
     * Gets vocabulary_annotations
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmVocabularyAnnotation[]
     */
    public function getVocabularyAnnotations()
    {
        return $this->container['vocabulary_annotations'];
    }

    /**
     * Sets vocabulary_annotations
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmVocabularyAnnotation[] $vocabulary_annotations vocabulary_annotations
     *
     * @return $this
     */
    public function setVocabularyAnnotations($vocabulary_annotations)
    {
        $this->container['vocabulary_annotations'] = $vocabulary_annotations;

        return $this;
    }

    /**
     * Gets referenced_models
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmModel[]
     */
    public function getReferencedModels()
    {
        return $this->container['referenced_models'];
    }

    /**
     * Sets referenced_models
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmModel[] $referenced_models referenced_models
     *
     * @return $this
     */
    public function setReferencedModels($referenced_models)
    {
        $this->container['referenced_models'] = $referenced_models;

        return $this;
    }

    /**
     * Gets declared_namespaces
     *
     * @return string[]
     */
    public function getDeclaredNamespaces()
    {
        return $this->container['declared_namespaces'];
    }

    /**
     * Sets declared_namespaces
     *
     * @param string[] $declared_namespaces declared_namespaces
     *
     * @return $this
     */
    public function setDeclaredNamespaces($declared_namespaces)
    {
        $this->container['declared_namespaces'] = $declared_namespaces;

        return $this;
    }

    /**
     * Gets direct_value_annotations_manager
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmDirectValueAnnotationsManager
     */
    public function getDirectValueAnnotationsManager()
    {
        return $this->container['direct_value_annotations_manager'];
    }

    /**
     * Sets direct_value_annotations_manager
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmDirectValueAnnotationsManager $direct_value_annotations_manager direct_value_annotations_manager
     *
     * @return $this
     */
    public function setDirectValueAnnotationsManager($direct_value_annotations_manager)
    {
        $this->container['direct_value_annotations_manager'] = $direct_value_annotations_manager;

        return $this;
    }

    /**
     * Gets entity_container
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmEntityContainer
     */
    public function getEntityContainer()
    {
        return $this->container['entity_container'];
    }

    /**
     * Sets entity_container
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmEntityContainer $entity_container entity_container
     *
     * @return $this
     */
    public function setEntityContainer($entity_container)
    {
        $this->container['entity_container'] = $entity_container;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


