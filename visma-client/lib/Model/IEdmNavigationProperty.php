<?php
/**
 * IEdmNavigationProperty
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * IEdmNavigationProperty Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IEdmNavigationProperty implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IEdmNavigationProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'partner' => '\Struqtur\VismaEAccounting\Model\IEdmNavigationProperty',
        'on_delete' => 'int',
        'contains_target' => 'bool',
        'referential_constraint' => '\Struqtur\VismaEAccounting\Model\IEdmReferentialConstraint',
        'property_kind' => 'int',
        'type' => '\Struqtur\VismaEAccounting\Model\IEdmTypeReference',
        'declaring_type' => '\Struqtur\VismaEAccounting\Model\IEdmStructuredType',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'partner' => null,
        'on_delete' => 'int32',
        'contains_target' => null,
        'referential_constraint' => null,
        'property_kind' => 'int32',
        'type' => null,
        'declaring_type' => null,
        'name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'partner' => 'Partner',
        'on_delete' => 'OnDelete',
        'contains_target' => 'ContainsTarget',
        'referential_constraint' => 'ReferentialConstraint',
        'property_kind' => 'PropertyKind',
        'type' => 'Type',
        'declaring_type' => 'DeclaringType',
        'name' => 'Name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'partner' => 'setPartner',
        'on_delete' => 'setOnDelete',
        'contains_target' => 'setContainsTarget',
        'referential_constraint' => 'setReferentialConstraint',
        'property_kind' => 'setPropertyKind',
        'type' => 'setType',
        'declaring_type' => 'setDeclaringType',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'partner' => 'getPartner',
        'on_delete' => 'getOnDelete',
        'contains_target' => 'getContainsTarget',
        'referential_constraint' => 'getReferentialConstraint',
        'property_kind' => 'getPropertyKind',
        'type' => 'getType',
        'declaring_type' => 'getDeclaringType',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ON_DELETE_0 = 0;
    const ON_DELETE_1 = 1;
    const PROPERTY_KIND_0 = 0;
    const PROPERTY_KIND_1 = 1;
    const PROPERTY_KIND_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnDeleteAllowableValues()
    {
        return [
            self::ON_DELETE_0,
            self::ON_DELETE_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyKindAllowableValues()
    {
        return [
            self::PROPERTY_KIND_0,
            self::PROPERTY_KIND_1,
            self::PROPERTY_KIND_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['on_delete'] = isset($data['on_delete']) ? $data['on_delete'] : null;
        $this->container['contains_target'] = isset($data['contains_target']) ? $data['contains_target'] : null;
        $this->container['referential_constraint'] = isset($data['referential_constraint']) ? $data['referential_constraint'] : null;
        $this->container['property_kind'] = isset($data['property_kind']) ? $data['property_kind'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['declaring_type'] = isset($data['declaring_type']) ? $data['declaring_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOnDeleteAllowableValues();
        if (!is_null($this->container['on_delete']) && !in_array($this->container['on_delete'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'on_delete', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPropertyKindAllowableValues();
        if (!is_null($this->container['property_kind']) && !in_array($this->container['property_kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'property_kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets partner
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmNavigationProperty
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmNavigationProperty $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets on_delete
     *
     * @return int
     */
    public function getOnDelete()
    {
        return $this->container['on_delete'];
    }

    /**
     * Sets on_delete
     *
     * @param int $on_delete on_delete
     *
     * @return $this
     */
    public function setOnDelete($on_delete)
    {
        $allowedValues = $this->getOnDeleteAllowableValues();
        if (!is_null($on_delete) && !in_array($on_delete, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'on_delete', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['on_delete'] = $on_delete;

        return $this;
    }

    /**
     * Gets contains_target
     *
     * @return bool
     */
    public function getContainsTarget()
    {
        return $this->container['contains_target'];
    }

    /**
     * Sets contains_target
     *
     * @param bool $contains_target contains_target
     *
     * @return $this
     */
    public function setContainsTarget($contains_target)
    {
        $this->container['contains_target'] = $contains_target;

        return $this;
    }

    /**
     * Gets referential_constraint
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmReferentialConstraint
     */
    public function getReferentialConstraint()
    {
        return $this->container['referential_constraint'];
    }

    /**
     * Sets referential_constraint
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmReferentialConstraint $referential_constraint referential_constraint
     *
     * @return $this
     */
    public function setReferentialConstraint($referential_constraint)
    {
        $this->container['referential_constraint'] = $referential_constraint;

        return $this;
    }

    /**
     * Gets property_kind
     *
     * @return int
     */
    public function getPropertyKind()
    {
        return $this->container['property_kind'];
    }

    /**
     * Sets property_kind
     *
     * @param int $property_kind property_kind
     *
     * @return $this
     */
    public function setPropertyKind($property_kind)
    {
        $allowedValues = $this->getPropertyKindAllowableValues();
        if (!is_null($property_kind) && !in_array($property_kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'property_kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['property_kind'] = $property_kind;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmTypeReference $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets declaring_type
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmStructuredType
     */
    public function getDeclaringType()
    {
        return $this->container['declaring_type'];
    }

    /**
     * Sets declaring_type
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmStructuredType $declaring_type declaring_type
     *
     * @return $this
     */
    public function setDeclaringType($declaring_type)
    {
        $this->container['declaring_type'] = $declaring_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


