<?php
/**
 * AccountingLockSettingsApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * AccountingLockSettingsApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountingLockSettingsApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountingLockSettingsApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounting_locked_as_of' => '\Struqtur\VismaEAccounting\Model\AccountingLockDateApi',
        'accounting_lock_interval' => 'int',
        'tax_declaration_date' => '\Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounting_locked_as_of' => null,
        'accounting_lock_interval' => 'int32',
        'tax_declaration_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounting_locked_as_of' => 'AccountingLockedAsOf',
        'accounting_lock_interval' => 'AccountingLockInterval',
        'tax_declaration_date' => 'TaxDeclarationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounting_locked_as_of' => 'setAccountingLockedAsOf',
        'accounting_lock_interval' => 'setAccountingLockInterval',
        'tax_declaration_date' => 'setTaxDeclarationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounting_locked_as_of' => 'getAccountingLockedAsOf',
        'accounting_lock_interval' => 'getAccountingLockInterval',
        'tax_declaration_date' => 'getTaxDeclarationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNTING_LOCK_INTERVAL_0 = 0;
    const ACCOUNTING_LOCK_INTERVAL_1 = 1;
    const ACCOUNTING_LOCK_INTERVAL_2 = 2;
    const ACCOUNTING_LOCK_INTERVAL_3 = 3;
    const ACCOUNTING_LOCK_INTERVAL_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountingLockIntervalAllowableValues()
    {
        return [
            self::ACCOUNTING_LOCK_INTERVAL_0,
            self::ACCOUNTING_LOCK_INTERVAL_1,
            self::ACCOUNTING_LOCK_INTERVAL_2,
            self::ACCOUNTING_LOCK_INTERVAL_3,
            self::ACCOUNTING_LOCK_INTERVAL_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounting_locked_as_of'] = isset($data['accounting_locked_as_of']) ? $data['accounting_locked_as_of'] : null;
        $this->container['accounting_lock_interval'] = isset($data['accounting_lock_interval']) ? $data['accounting_lock_interval'] : null;
        $this->container['tax_declaration_date'] = isset($data['tax_declaration_date']) ? $data['tax_declaration_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountingLockIntervalAllowableValues();
        if (!is_null($this->container['accounting_lock_interval']) && !in_array($this->container['accounting_lock_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accounting_lock_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['accounting_lock_interval']) && ($this->container['accounting_lock_interval'] > 4)) {
            $invalidProperties[] = "invalid value for 'accounting_lock_interval', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['accounting_lock_interval']) && ($this->container['accounting_lock_interval'] < 0)) {
            $invalidProperties[] = "invalid value for 'accounting_lock_interval', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounting_locked_as_of
     *
     * @return \Struqtur\VismaEAccounting\Model\AccountingLockDateApi
     */
    public function getAccountingLockedAsOf()
    {
        return $this->container['accounting_locked_as_of'];
    }

    /**
     * Sets accounting_locked_as_of
     *
     * @param \Struqtur\VismaEAccounting\Model\AccountingLockDateApi $accounting_locked_as_of Default: No lock
     *
     * @return $this
     */
    public function setAccountingLockedAsOf($accounting_locked_as_of)
    {
        $this->container['accounting_locked_as_of'] = $accounting_locked_as_of;

        return $this;
    }

    /**
     * Gets accounting_lock_interval
     *
     * @return int
     */
    public function getAccountingLockInterval()
    {
        return $this->container['accounting_lock_interval'];
    }

    /**
     * Sets accounting_lock_interval
     *
     * @param int $accounting_lock_interval Range: 0 - 4. 0 = None, 1 = Month, 2 = Quarter, 3 = Year, 4 = TaxDeclaration
     *
     * @return $this
     */
    public function setAccountingLockInterval($accounting_lock_interval)
    {
        $allowedValues = $this->getAccountingLockIntervalAllowableValues();
        if (!is_null($accounting_lock_interval) && !in_array($accounting_lock_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accounting_lock_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($accounting_lock_interval) && ($accounting_lock_interval > 4)) {
            throw new \InvalidArgumentException('invalid value for $accounting_lock_interval when calling AccountingLockSettingsApi., must be smaller than or equal to 4.');
        }
        if (!is_null($accounting_lock_interval) && ($accounting_lock_interval < 0)) {
            throw new \InvalidArgumentException('invalid value for $accounting_lock_interval when calling AccountingLockSettingsApi., must be bigger than or equal to 0.');
        }

        $this->container['accounting_lock_interval'] = $accounting_lock_interval;

        return $this;
    }

    /**
     * Gets tax_declaration_date
     *
     * @return \Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi
     */
    public function getTaxDeclarationDate()
    {
        return $this->container['tax_declaration_date'];
    }

    /**
     * Sets tax_declaration_date
     *
     * @param \Struqtur\VismaEAccounting\Model\TaxDeclarationDateApi $tax_declaration_date Only available for accounting lock interval as of tax declaration date
     *
     * @return $this
     */
    public function setTaxDeclarationDate($tax_declaration_date)
    {
        $this->container['tax_declaration_date'] = $tax_declaration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


