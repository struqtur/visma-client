<?php
/**
 * AttachmentResultApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * AttachmentResultApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttachmentResultApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttachmentResultApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'content_type' => 'string',
        'document_id' => 'string',
        'attached_document_type' => 'int',
        'file_name' => 'string',
        'temporary_url' => 'string',
        'comment' => 'string',
        'supplier_name' => 'string',
        'amount_invoice_currency' => 'double',
        'type' => 'int',
        'attachment_status' => 'int',
        'uploaded_by' => 'string',
        'image_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'content_type' => null,
        'document_id' => 'uuid',
        'attached_document_type' => 'int32',
        'file_name' => null,
        'temporary_url' => null,
        'comment' => null,
        'supplier_name' => null,
        'amount_invoice_currency' => 'double',
        'type' => 'int32',
        'attachment_status' => 'int32',
        'uploaded_by' => null,
        'image_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'content_type' => 'ContentType',
        'document_id' => 'DocumentId',
        'attached_document_type' => 'AttachedDocumentType',
        'file_name' => 'FileName',
        'temporary_url' => 'TemporaryUrl',
        'comment' => 'Comment',
        'supplier_name' => 'SupplierName',
        'amount_invoice_currency' => 'AmountInvoiceCurrency',
        'type' => 'Type',
        'attachment_status' => 'AttachmentStatus',
        'uploaded_by' => 'UploadedBy',
        'image_date' => 'ImageDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'content_type' => 'setContentType',
        'document_id' => 'setDocumentId',
        'attached_document_type' => 'setAttachedDocumentType',
        'file_name' => 'setFileName',
        'temporary_url' => 'setTemporaryUrl',
        'comment' => 'setComment',
        'supplier_name' => 'setSupplierName',
        'amount_invoice_currency' => 'setAmountInvoiceCurrency',
        'type' => 'setType',
        'attachment_status' => 'setAttachmentStatus',
        'uploaded_by' => 'setUploadedBy',
        'image_date' => 'setImageDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'content_type' => 'getContentType',
        'document_id' => 'getDocumentId',
        'attached_document_type' => 'getAttachedDocumentType',
        'file_name' => 'getFileName',
        'temporary_url' => 'getTemporaryUrl',
        'comment' => 'getComment',
        'supplier_name' => 'getSupplierName',
        'amount_invoice_currency' => 'getAmountInvoiceCurrency',
        'type' => 'getType',
        'attachment_status' => 'getAttachmentStatus',
        'uploaded_by' => 'getUploadedBy',
        'image_date' => 'getImageDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ATTACHED_DOCUMENT_TYPE_0 = 0;
    const ATTACHED_DOCUMENT_TYPE_1 = 1;
    const ATTACHED_DOCUMENT_TYPE_2 = 2;
    const ATTACHED_DOCUMENT_TYPE_3 = 3;
    const ATTACHED_DOCUMENT_TYPE_4 = 4;
    const ATTACHED_DOCUMENT_TYPE_5 = 5;
    const ATTACHED_DOCUMENT_TYPE_6 = 6;
    const TYPE_0 = 0;
    const TYPE_1 = 1;
    const TYPE_2 = 2;
    const ATTACHMENT_STATUS_0 = 0;
    const ATTACHMENT_STATUS_1 = 1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttachedDocumentTypeAllowableValues()
    {
        return [
            self::ATTACHED_DOCUMENT_TYPE_0,
            self::ATTACHED_DOCUMENT_TYPE_1,
            self::ATTACHED_DOCUMENT_TYPE_2,
            self::ATTACHED_DOCUMENT_TYPE_3,
            self::ATTACHED_DOCUMENT_TYPE_4,
            self::ATTACHED_DOCUMENT_TYPE_5,
            self::ATTACHED_DOCUMENT_TYPE_6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_0,
            self::TYPE_1,
            self::TYPE_2,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttachmentStatusAllowableValues()
    {
        return [
            self::ATTACHMENT_STATUS_0,
            self::ATTACHMENT_STATUS_1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['attached_document_type'] = isset($data['attached_document_type']) ? $data['attached_document_type'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['temporary_url'] = isset($data['temporary_url']) ? $data['temporary_url'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['amount_invoice_currency'] = isset($data['amount_invoice_currency']) ? $data['amount_invoice_currency'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['attachment_status'] = isset($data['attachment_status']) ? $data['attachment_status'] : null;
        $this->container['uploaded_by'] = isset($data['uploaded_by']) ? $data['uploaded_by'] : null;
        $this->container['image_date'] = isset($data['image_date']) ? $data['image_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAttachedDocumentTypeAllowableValues();
        if (!is_null($this->container['attached_document_type']) && !in_array($this->container['attached_document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'attached_document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAttachmentStatusAllowableValues();
        if (!is_null($this->container['attachment_status']) && !in_array($this->container['attachment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'attachment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets attached_document_type
     *
     * @return int
     */
    public function getAttachedDocumentType()
    {
        return $this->container['attached_document_type'];
    }

    /**
     * Sets attached_document_type
     *
     * @param int $attached_document_type 0 = None, 1 = SupplierInvoice, 2 = Receipt, 3 = Voucher, 4 = SupplierInvoiceDraft, 5 = AllocationPeriod, 6 = Transfer
     *
     * @return $this
     */
    public function setAttachedDocumentType($attached_document_type)
    {
        $allowedValues = $this->getAttachedDocumentTypeAllowableValues();
        if (!is_null($attached_document_type) && !in_array($attached_document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'attached_document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attached_document_type'] = $attached_document_type;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets temporary_url
     *
     * @return string
     */
    public function getTemporaryUrl()
    {
        return $this->container['temporary_url'];
    }

    /**
     * Sets temporary_url
     *
     * @param string $temporary_url temporary_url
     *
     * @return $this
     */
    public function setTemporaryUrl($temporary_url)
    {
        $this->container['temporary_url'] = $temporary_url;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets amount_invoice_currency
     *
     * @return double
     */
    public function getAmountInvoiceCurrency()
    {
        return $this->container['amount_invoice_currency'];
    }

    /**
     * Sets amount_invoice_currency
     *
     * @param double $amount_invoice_currency amount_invoice_currency
     *
     * @return $this
     */
    public function setAmountInvoiceCurrency($amount_invoice_currency)
    {
        $this->container['amount_invoice_currency'] = $amount_invoice_currency;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type 0 = Invoice, 1 = Receipt, 2 = Document
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets attachment_status
     *
     * @return int
     */
    public function getAttachmentStatus()
    {
        return $this->container['attachment_status'];
    }

    /**
     * Sets attachment_status
     *
     * @param int $attachment_status 0 = Matched, 1 = Unmatched
     *
     * @return $this
     */
    public function setAttachmentStatus($attachment_status)
    {
        $allowedValues = $this->getAttachmentStatusAllowableValues();
        if (!is_null($attachment_status) && !in_array($attachment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'attachment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attachment_status'] = $attachment_status;

        return $this;
    }

    /**
     * Gets uploaded_by
     *
     * @return string
     */
    public function getUploadedBy()
    {
        return $this->container['uploaded_by'];
    }

    /**
     * Sets uploaded_by
     *
     * @param string $uploaded_by uploaded_by
     *
     * @return $this
     */
    public function setUploadedBy($uploaded_by)
    {
        $this->container['uploaded_by'] = $uploaded_by;

        return $this;
    }

    /**
     * Gets image_date
     *
     * @return \DateTime
     */
    public function getImageDate()
    {
        return $this->container['image_date'];
    }

    /**
     * Sets image_date
     *
     * @param \DateTime $image_date image_date
     *
     * @return $this
     */
    public function setImageDate($image_date)
    {
        $this->container['image_date'] = $image_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


