<?php
/**
 * WebshopOrderApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * WebshopOrderApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebshopOrderApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebshopOrderApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'base_currency_code' => 'string',
        'name' => 'string',
        'number' => 'string',
        'order_currency_code' => 'string',
        'order_date' => '\DateTime',
        'order_number' => 'string',
        'note' => 'string',
        'total_amount_base_currency' => 'double',
        'total_amount_order_currency' => 'double',
        'customer_is_private_person' => 'bool',
        'rows' => '\Struqtur\VismaEAccounting\Model\WebshopOrderRowApi[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'base_currency_code' => null,
        'name' => null,
        'number' => null,
        'order_currency_code' => null,
        'order_date' => 'date-time',
        'order_number' => null,
        'note' => null,
        'total_amount_base_currency' => 'double',
        'total_amount_order_currency' => 'double',
        'customer_is_private_person' => null,
        'rows' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'base_currency_code' => 'BaseCurrencyCode',
        'name' => 'Name',
        'number' => 'Number',
        'order_currency_code' => 'OrderCurrencyCode',
        'order_date' => 'OrderDate',
        'order_number' => 'OrderNumber',
        'note' => 'Note',
        'total_amount_base_currency' => 'TotalAmountBaseCurrency',
        'total_amount_order_currency' => 'TotalAmountOrderCurrency',
        'customer_is_private_person' => 'CustomerIsPrivatePerson',
        'rows' => 'Rows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'base_currency_code' => 'setBaseCurrencyCode',
        'name' => 'setName',
        'number' => 'setNumber',
        'order_currency_code' => 'setOrderCurrencyCode',
        'order_date' => 'setOrderDate',
        'order_number' => 'setOrderNumber',
        'note' => 'setNote',
        'total_amount_base_currency' => 'setTotalAmountBaseCurrency',
        'total_amount_order_currency' => 'setTotalAmountOrderCurrency',
        'customer_is_private_person' => 'setCustomerIsPrivatePerson',
        'rows' => 'setRows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'base_currency_code' => 'getBaseCurrencyCode',
        'name' => 'getName',
        'number' => 'getNumber',
        'order_currency_code' => 'getOrderCurrencyCode',
        'order_date' => 'getOrderDate',
        'order_number' => 'getOrderNumber',
        'note' => 'getNote',
        'total_amount_base_currency' => 'getTotalAmountBaseCurrency',
        'total_amount_order_currency' => 'getTotalAmountOrderCurrency',
        'customer_is_private_person' => 'getCustomerIsPrivatePerson',
        'rows' => 'getRows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['order_currency_code'] = isset($data['order_currency_code']) ? $data['order_currency_code'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['total_amount_base_currency'] = isset($data['total_amount_base_currency']) ? $data['total_amount_base_currency'] : null;
        $this->container['total_amount_order_currency'] = isset($data['total_amount_order_currency']) ? $data['total_amount_order_currency'] : null;
        $this->container['customer_is_private_person'] = isset($data['customer_is_private_person']) ? $data['customer_is_private_person'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code base_currency_code
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_currency_code
     *
     * @return string
     */
    public function getOrderCurrencyCode()
    {
        return $this->container['order_currency_code'];
    }

    /**
     * Sets order_currency_code
     *
     * @param string $order_currency_code order_currency_code
     *
     * @return $this
     */
    public function setOrderCurrencyCode($order_currency_code)
    {
        $this->container['order_currency_code'] = $order_currency_code;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets total_amount_base_currency
     *
     * @return double
     */
    public function getTotalAmountBaseCurrency()
    {
        return $this->container['total_amount_base_currency'];
    }

    /**
     * Sets total_amount_base_currency
     *
     * @param double $total_amount_base_currency total_amount_base_currency
     *
     * @return $this
     */
    public function setTotalAmountBaseCurrency($total_amount_base_currency)
    {
        $this->container['total_amount_base_currency'] = $total_amount_base_currency;

        return $this;
    }

    /**
     * Gets total_amount_order_currency
     *
     * @return double
     */
    public function getTotalAmountOrderCurrency()
    {
        return $this->container['total_amount_order_currency'];
    }

    /**
     * Sets total_amount_order_currency
     *
     * @param double $total_amount_order_currency total_amount_order_currency
     *
     * @return $this
     */
    public function setTotalAmountOrderCurrency($total_amount_order_currency)
    {
        $this->container['total_amount_order_currency'] = $total_amount_order_currency;

        return $this;
    }

    /**
     * Gets customer_is_private_person
     *
     * @return bool
     */
    public function getCustomerIsPrivatePerson()
    {
        return $this->container['customer_is_private_person'];
    }

    /**
     * Sets customer_is_private_person
     *
     * @param bool $customer_is_private_person customer_is_private_person
     *
     * @return $this
     */
    public function setCustomerIsPrivatePerson($customer_is_private_person)
    {
        $this->container['customer_is_private_person'] = $customer_is_private_person;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \Struqtur\VismaEAccounting\Model\WebshopOrderRowApi[]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \Struqtur\VismaEAccounting\Model\WebshopOrderRowApi[] $rows rows
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


