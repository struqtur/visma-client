<?php
/**
 * ODataPath
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * ODataPath Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ODataPath implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ODataPath';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'edm_type' => '\Struqtur\VismaEAccounting\Model\IEdmType',
        'navigation_source' => '\Struqtur\VismaEAccounting\Model\IEdmNavigationSource',
        'segments' => '\Struqtur\VismaEAccounting\Model\ODataPathSegment[]',
        'path_template' => 'string',
        'path' => '\Struqtur\VismaEAccounting\Model\ODataPathSegment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'edm_type' => null,
        'navigation_source' => null,
        'segments' => null,
        'path_template' => null,
        'path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edm_type' => 'EdmType',
        'navigation_source' => 'NavigationSource',
        'segments' => 'Segments',
        'path_template' => 'PathTemplate',
        'path' => 'Path'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edm_type' => 'setEdmType',
        'navigation_source' => 'setNavigationSource',
        'segments' => 'setSegments',
        'path_template' => 'setPathTemplate',
        'path' => 'setPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edm_type' => 'getEdmType',
        'navigation_source' => 'getNavigationSource',
        'segments' => 'getSegments',
        'path_template' => 'getPathTemplate',
        'path' => 'getPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['edm_type'] = isset($data['edm_type']) ? $data['edm_type'] : null;
        $this->container['navigation_source'] = isset($data['navigation_source']) ? $data['navigation_source'] : null;
        $this->container['segments'] = isset($data['segments']) ? $data['segments'] : null;
        $this->container['path_template'] = isset($data['path_template']) ? $data['path_template'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edm_type
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmType
     */
    public function getEdmType()
    {
        return $this->container['edm_type'];
    }

    /**
     * Sets edm_type
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmType $edm_type edm_type
     *
     * @return $this
     */
    public function setEdmType($edm_type)
    {
        $this->container['edm_type'] = $edm_type;

        return $this;
    }

    /**
     * Gets navigation_source
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmNavigationSource
     */
    public function getNavigationSource()
    {
        return $this->container['navigation_source'];
    }

    /**
     * Sets navigation_source
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmNavigationSource $navigation_source navigation_source
     *
     * @return $this
     */
    public function setNavigationSource($navigation_source)
    {
        $this->container['navigation_source'] = $navigation_source;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return \Struqtur\VismaEAccounting\Model\ODataPathSegment[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param \Struqtur\VismaEAccounting\Model\ODataPathSegment[] $segments segments
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }

    /**
     * Gets path_template
     *
     * @return string
     */
    public function getPathTemplate()
    {
        return $this->container['path_template'];
    }

    /**
     * Sets path_template
     *
     * @param string $path_template path_template
     *
     * @return $this
     */
    public function setPathTemplate($path_template)
    {
        $this->container['path_template'] = $path_template;

        return $this;
    }

    /**
     * Gets path
     *
     * @return \Struqtur\VismaEAccounting\Model\ODataPathSegment[]
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param \Struqtur\VismaEAccounting\Model\ODataPathSegment[] $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


