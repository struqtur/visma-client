<?php
/**
 * WebHookApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * WebHookApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebHookApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WebHookApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'endpoint' => 'string',
        'description' => 'string',
        'client_id' => 'string',
        'authentication_key' => 'string',
        'authentication_value' => 'string',
        'signing_key' => 'string',
        'active' => 'bool',
        'subscriptions' => '\Struqtur\VismaEAccounting\Model\WebHookSubscriptionApi[]',
        'created_utc' => '\DateTime',
        'modified_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'endpoint' => null,
        'description' => null,
        'client_id' => null,
        'authentication_key' => null,
        'authentication_value' => null,
        'signing_key' => null,
        'active' => null,
        'subscriptions' => null,
        'created_utc' => 'date-time',
        'modified_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'endpoint' => 'Endpoint',
        'description' => 'Description',
        'client_id' => 'ClientId',
        'authentication_key' => 'AuthenticationKey',
        'authentication_value' => 'AuthenticationValue',
        'signing_key' => 'SigningKey',
        'active' => 'Active',
        'subscriptions' => 'Subscriptions',
        'created_utc' => 'CreatedUtc',
        'modified_utc' => 'ModifiedUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'endpoint' => 'setEndpoint',
        'description' => 'setDescription',
        'client_id' => 'setClientId',
        'authentication_key' => 'setAuthenticationKey',
        'authentication_value' => 'setAuthenticationValue',
        'signing_key' => 'setSigningKey',
        'active' => 'setActive',
        'subscriptions' => 'setSubscriptions',
        'created_utc' => 'setCreatedUtc',
        'modified_utc' => 'setModifiedUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'endpoint' => 'getEndpoint',
        'description' => 'getDescription',
        'client_id' => 'getClientId',
        'authentication_key' => 'getAuthenticationKey',
        'authentication_value' => 'getAuthenticationValue',
        'signing_key' => 'getSigningKey',
        'active' => 'getActive',
        'subscriptions' => 'getSubscriptions',
        'created_utc' => 'getCreatedUtc',
        'modified_utc' => 'getModifiedUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['authentication_key'] = isset($data['authentication_key']) ? $data['authentication_key'] : null;
        $this->container['authentication_value'] = isset($data['authentication_value']) ? $data['authentication_value'] : null;
        $this->container['signing_key'] = isset($data['signing_key']) ? $data['signing_key'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['subscriptions'] = isset($data['subscriptions']) ? $data['subscriptions'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['endpoint']) && (mb_strlen($this->container['endpoint']) > 512)) {
            $invalidProperties[] = "invalid value for 'endpoint', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['endpoint']) && (mb_strlen($this->container['endpoint']) < 0)) {
            $invalidProperties[] = "invalid value for 'endpoint', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['client_id']) && (mb_strlen($this->container['client_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'client_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['authentication_key']) && (mb_strlen($this->container['authentication_key']) > 255)) {
            $invalidProperties[] = "invalid value for 'authentication_key', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['authentication_key']) && (mb_strlen($this->container['authentication_key']) < 0)) {
            $invalidProperties[] = "invalid value for 'authentication_key', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['authentication_value']) && (mb_strlen($this->container['authentication_value']) > 255)) {
            $invalidProperties[] = "invalid value for 'authentication_value', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['authentication_value']) && (mb_strlen($this->container['authentication_value']) < 0)) {
            $invalidProperties[] = "invalid value for 'authentication_value', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['signing_key']) && (mb_strlen($this->container['signing_key']) > 255)) {
            $invalidProperties[] = "invalid value for 'signing_key', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['signing_key']) && (mb_strlen($this->container['signing_key']) < 0)) {
            $invalidProperties[] = "invalid value for 'signing_key', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string $endpoint endpoint
     *
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        if (!is_null($endpoint) && (mb_strlen($endpoint) > 512)) {
            throw new \InvalidArgumentException('invalid length for $endpoint when calling WebHookApi., must be smaller than or equal to 512.');
        }
        if (!is_null($endpoint) && (mb_strlen($endpoint) < 0)) {
            throw new \InvalidArgumentException('invalid length for $endpoint when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WebHookApi., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        if (!is_null($client_id) && (mb_strlen($client_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling WebHookApi., must be smaller than or equal to 255.');
        }
        if (!is_null($client_id) && (mb_strlen($client_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $client_id when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets authentication_key
     *
     * @return string
     */
    public function getAuthenticationKey()
    {
        return $this->container['authentication_key'];
    }

    /**
     * Sets authentication_key
     *
     * @param string $authentication_key authentication_key
     *
     * @return $this
     */
    public function setAuthenticationKey($authentication_key)
    {
        if (!is_null($authentication_key) && (mb_strlen($authentication_key) > 255)) {
            throw new \InvalidArgumentException('invalid length for $authentication_key when calling WebHookApi., must be smaller than or equal to 255.');
        }
        if (!is_null($authentication_key) && (mb_strlen($authentication_key) < 0)) {
            throw new \InvalidArgumentException('invalid length for $authentication_key when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['authentication_key'] = $authentication_key;

        return $this;
    }

    /**
     * Gets authentication_value
     *
     * @return string
     */
    public function getAuthenticationValue()
    {
        return $this->container['authentication_value'];
    }

    /**
     * Sets authentication_value
     *
     * @param string $authentication_value authentication_value
     *
     * @return $this
     */
    public function setAuthenticationValue($authentication_value)
    {
        if (!is_null($authentication_value) && (mb_strlen($authentication_value) > 255)) {
            throw new \InvalidArgumentException('invalid length for $authentication_value when calling WebHookApi., must be smaller than or equal to 255.');
        }
        if (!is_null($authentication_value) && (mb_strlen($authentication_value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $authentication_value when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['authentication_value'] = $authentication_value;

        return $this;
    }

    /**
     * Gets signing_key
     *
     * @return string
     */
    public function getSigningKey()
    {
        return $this->container['signing_key'];
    }

    /**
     * Sets signing_key
     *
     * @param string $signing_key signing_key
     *
     * @return $this
     */
    public function setSigningKey($signing_key)
    {
        if (!is_null($signing_key) && (mb_strlen($signing_key) > 255)) {
            throw new \InvalidArgumentException('invalid length for $signing_key when calling WebHookApi., must be smaller than or equal to 255.');
        }
        if (!is_null($signing_key) && (mb_strlen($signing_key) < 0)) {
            throw new \InvalidArgumentException('invalid length for $signing_key when calling WebHookApi., must be bigger than or equal to 0.');
        }

        $this->container['signing_key'] = $signing_key;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \Struqtur\VismaEAccounting\Model\WebHookSubscriptionApi[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \Struqtur\VismaEAccounting\Model\WebHookSubscriptionApi[] $subscriptions subscriptions
     *
     * @return $this
     */
    public function setSubscriptions($subscriptions)
    {
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


