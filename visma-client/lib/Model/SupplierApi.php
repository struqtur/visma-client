<?php
/**
 * SupplierApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * SupplierApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SupplierApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'supplier_number' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'automatic_payment_service' => 'bool',
        'bank_account_number' => 'string',
        'bank_bban' => 'string',
        'bank_bic' => 'string',
        'bank_code' => 'string',
        'bank_country_code' => 'string',
        'bankgiro_number' => 'string',
        'bank_iban' => 'string',
        'bank_name' => 'string',
        'city' => 'string',
        'contact_person_email' => 'string',
        'contact_person_mobile' => 'string',
        'contact_person_name' => 'string',
        'contact_person_phone' => 'string',
        'corporate_identity_number' => 'string',
        'country_code' => 'string',
        'created_utc' => '\DateTime',
        'currency_code' => 'string',
        'email_address' => 'string',
        'mobile_phone' => 'string',
        'modified_utc' => '\DateTime',
        'name' => 'string',
        'note' => 'string',
        'plusgiro_number' => 'string',
        'postal_code' => 'string',
        'telephone' => 'string',
        'terms_of_payment_id' => 'string',
        'vat_number' => 'string',
        'www_address' => 'string',
        'bank_fee_code' => 'int',
        'pay_from_bank_account_id' => 'string',
        'foreign_payment_code_id' => 'string',
        'uses_payment_reference_numbers' => 'bool',
        'is_active' => 'bool',
        'self_employed_without_fixed_address' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'supplier_number' => null,
        'address1' => null,
        'address2' => null,
        'automatic_payment_service' => null,
        'bank_account_number' => null,
        'bank_bban' => null,
        'bank_bic' => null,
        'bank_code' => null,
        'bank_country_code' => null,
        'bankgiro_number' => null,
        'bank_iban' => null,
        'bank_name' => null,
        'city' => null,
        'contact_person_email' => null,
        'contact_person_mobile' => null,
        'contact_person_name' => null,
        'contact_person_phone' => null,
        'corporate_identity_number' => null,
        'country_code' => null,
        'created_utc' => 'date-time',
        'currency_code' => null,
        'email_address' => null,
        'mobile_phone' => null,
        'modified_utc' => 'date-time',
        'name' => null,
        'note' => null,
        'plusgiro_number' => null,
        'postal_code' => null,
        'telephone' => null,
        'terms_of_payment_id' => 'uuid',
        'vat_number' => null,
        'www_address' => null,
        'bank_fee_code' => 'int32',
        'pay_from_bank_account_id' => 'uuid',
        'foreign_payment_code_id' => 'uuid',
        'uses_payment_reference_numbers' => null,
        'is_active' => null,
        'self_employed_without_fixed_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'supplier_number' => 'SupplierNumber',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'automatic_payment_service' => 'AutomaticPaymentService',
        'bank_account_number' => 'BankAccountNumber',
        'bank_bban' => 'BankBban',
        'bank_bic' => 'BankBic',
        'bank_code' => 'BankCode',
        'bank_country_code' => 'BankCountryCode',
        'bankgiro_number' => 'BankgiroNumber',
        'bank_iban' => 'BankIban',
        'bank_name' => 'BankName',
        'city' => 'City',
        'contact_person_email' => 'ContactPersonEmail',
        'contact_person_mobile' => 'ContactPersonMobile',
        'contact_person_name' => 'ContactPersonName',
        'contact_person_phone' => 'ContactPersonPhone',
        'corporate_identity_number' => 'CorporateIdentityNumber',
        'country_code' => 'CountryCode',
        'created_utc' => 'CreatedUtc',
        'currency_code' => 'CurrencyCode',
        'email_address' => 'EmailAddress',
        'mobile_phone' => 'MobilePhone',
        'modified_utc' => 'ModifiedUtc',
        'name' => 'Name',
        'note' => 'Note',
        'plusgiro_number' => 'PlusgiroNumber',
        'postal_code' => 'PostalCode',
        'telephone' => 'Telephone',
        'terms_of_payment_id' => 'TermsOfPaymentId',
        'vat_number' => 'VatNumber',
        'www_address' => 'WwwAddress',
        'bank_fee_code' => 'BankFeeCode',
        'pay_from_bank_account_id' => 'PayFromBankAccountId',
        'foreign_payment_code_id' => 'ForeignPaymentCodeId',
        'uses_payment_reference_numbers' => 'UsesPaymentReferenceNumbers',
        'is_active' => 'IsActive',
        'self_employed_without_fixed_address' => 'SelfEmployedWithoutFixedAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'supplier_number' => 'setSupplierNumber',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'automatic_payment_service' => 'setAutomaticPaymentService',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_bban' => 'setBankBban',
        'bank_bic' => 'setBankBic',
        'bank_code' => 'setBankCode',
        'bank_country_code' => 'setBankCountryCode',
        'bankgiro_number' => 'setBankgiroNumber',
        'bank_iban' => 'setBankIban',
        'bank_name' => 'setBankName',
        'city' => 'setCity',
        'contact_person_email' => 'setContactPersonEmail',
        'contact_person_mobile' => 'setContactPersonMobile',
        'contact_person_name' => 'setContactPersonName',
        'contact_person_phone' => 'setContactPersonPhone',
        'corporate_identity_number' => 'setCorporateIdentityNumber',
        'country_code' => 'setCountryCode',
        'created_utc' => 'setCreatedUtc',
        'currency_code' => 'setCurrencyCode',
        'email_address' => 'setEmailAddress',
        'mobile_phone' => 'setMobilePhone',
        'modified_utc' => 'setModifiedUtc',
        'name' => 'setName',
        'note' => 'setNote',
        'plusgiro_number' => 'setPlusgiroNumber',
        'postal_code' => 'setPostalCode',
        'telephone' => 'setTelephone',
        'terms_of_payment_id' => 'setTermsOfPaymentId',
        'vat_number' => 'setVatNumber',
        'www_address' => 'setWwwAddress',
        'bank_fee_code' => 'setBankFeeCode',
        'pay_from_bank_account_id' => 'setPayFromBankAccountId',
        'foreign_payment_code_id' => 'setForeignPaymentCodeId',
        'uses_payment_reference_numbers' => 'setUsesPaymentReferenceNumbers',
        'is_active' => 'setIsActive',
        'self_employed_without_fixed_address' => 'setSelfEmployedWithoutFixedAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'supplier_number' => 'getSupplierNumber',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'automatic_payment_service' => 'getAutomaticPaymentService',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_bban' => 'getBankBban',
        'bank_bic' => 'getBankBic',
        'bank_code' => 'getBankCode',
        'bank_country_code' => 'getBankCountryCode',
        'bankgiro_number' => 'getBankgiroNumber',
        'bank_iban' => 'getBankIban',
        'bank_name' => 'getBankName',
        'city' => 'getCity',
        'contact_person_email' => 'getContactPersonEmail',
        'contact_person_mobile' => 'getContactPersonMobile',
        'contact_person_name' => 'getContactPersonName',
        'contact_person_phone' => 'getContactPersonPhone',
        'corporate_identity_number' => 'getCorporateIdentityNumber',
        'country_code' => 'getCountryCode',
        'created_utc' => 'getCreatedUtc',
        'currency_code' => 'getCurrencyCode',
        'email_address' => 'getEmailAddress',
        'mobile_phone' => 'getMobilePhone',
        'modified_utc' => 'getModifiedUtc',
        'name' => 'getName',
        'note' => 'getNote',
        'plusgiro_number' => 'getPlusgiroNumber',
        'postal_code' => 'getPostalCode',
        'telephone' => 'getTelephone',
        'terms_of_payment_id' => 'getTermsOfPaymentId',
        'vat_number' => 'getVatNumber',
        'www_address' => 'getWwwAddress',
        'bank_fee_code' => 'getBankFeeCode',
        'pay_from_bank_account_id' => 'getPayFromBankAccountId',
        'foreign_payment_code_id' => 'getForeignPaymentCodeId',
        'uses_payment_reference_numbers' => 'getUsesPaymentReferenceNumbers',
        'is_active' => 'getIsActive',
        'self_employed_without_fixed_address' => 'getSelfEmployedWithoutFixedAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BANK_FEE_CODE_0 = 0;
    const BANK_FEE_CODE_1 = 1;
    const BANK_FEE_CODE_2 = 2;
    const BANK_FEE_CODE_3 = 3;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankFeeCodeAllowableValues()
    {
        return [
            self::BANK_FEE_CODE_0,
            self::BANK_FEE_CODE_1,
            self::BANK_FEE_CODE_2,
            self::BANK_FEE_CODE_3,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['supplier_number'] = isset($data['supplier_number']) ? $data['supplier_number'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['automatic_payment_service'] = isset($data['automatic_payment_service']) ? $data['automatic_payment_service'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['bank_bban'] = isset($data['bank_bban']) ? $data['bank_bban'] : null;
        $this->container['bank_bic'] = isset($data['bank_bic']) ? $data['bank_bic'] : null;
        $this->container['bank_code'] = isset($data['bank_code']) ? $data['bank_code'] : null;
        $this->container['bank_country_code'] = isset($data['bank_country_code']) ? $data['bank_country_code'] : null;
        $this->container['bankgiro_number'] = isset($data['bankgiro_number']) ? $data['bankgiro_number'] : null;
        $this->container['bank_iban'] = isset($data['bank_iban']) ? $data['bank_iban'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['contact_person_email'] = isset($data['contact_person_email']) ? $data['contact_person_email'] : null;
        $this->container['contact_person_mobile'] = isset($data['contact_person_mobile']) ? $data['contact_person_mobile'] : null;
        $this->container['contact_person_name'] = isset($data['contact_person_name']) ? $data['contact_person_name'] : null;
        $this->container['contact_person_phone'] = isset($data['contact_person_phone']) ? $data['contact_person_phone'] : null;
        $this->container['corporate_identity_number'] = isset($data['corporate_identity_number']) ? $data['corporate_identity_number'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['plusgiro_number'] = isset($data['plusgiro_number']) ? $data['plusgiro_number'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['terms_of_payment_id'] = isset($data['terms_of_payment_id']) ? $data['terms_of_payment_id'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['www_address'] = isset($data['www_address']) ? $data['www_address'] : null;
        $this->container['bank_fee_code'] = isset($data['bank_fee_code']) ? $data['bank_fee_code'] : null;
        $this->container['pay_from_bank_account_id'] = isset($data['pay_from_bank_account_id']) ? $data['pay_from_bank_account_id'] : null;
        $this->container['foreign_payment_code_id'] = isset($data['foreign_payment_code_id']) ? $data['foreign_payment_code_id'] : null;
        $this->container['uses_payment_reference_numbers'] = isset($data['uses_payment_reference_numbers']) ? $data['uses_payment_reference_numbers'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['self_employed_without_fixed_address'] = isset($data['self_employed_without_fixed_address']) ? $data['self_employed_without_fixed_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['supplier_number']) && (mb_strlen($this->container['supplier_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'supplier_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['supplier_number']) && (mb_strlen($this->container['supplier_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'supplier_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_bban']) && (mb_strlen($this->container['bank_bban']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_bban', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_bban']) && (mb_strlen($this->container['bank_bban']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_bban', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_bban']) && !preg_match("/^[a-zA-Z0-9]{1,35}$/", $this->container['bank_bban'])) {
            $invalidProperties[] = "invalid value for 'bank_bban', must be conform to the pattern /^[a-zA-Z0-9]{1,35}$/.";
        }

        if (!is_null($this->container['bank_bic']) && (mb_strlen($this->container['bank_bic']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_bic', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_bic']) && (mb_strlen($this->container['bank_bic']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_bic', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_bic']) && !preg_match("/^[a-zA-Z]{6}([a-zA-z0-9]{2}|[a-zA-z0-9]{5})$/", $this->container['bank_bic'])) {
            $invalidProperties[] = "invalid value for 'bank_bic', must be conform to the pattern /^[a-zA-Z]{6}([a-zA-z0-9]{2}|[a-zA-z0-9]{5})$/.";
        }

        if (!is_null($this->container['bank_code']) && (mb_strlen($this->container['bank_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_code']) && (mb_strlen($this->container['bank_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_code']) && !preg_match("/^([a-zA-Z]{2})[a-zA-Z0-9]{3,}$/", $this->container['bank_code'])) {
            $invalidProperties[] = "invalid value for 'bank_code', must be conform to the pattern /^([a-zA-Z]{2})[a-zA-Z0-9]{3,}$/.";
        }

        if (!is_null($this->container['bank_country_code']) && (mb_strlen($this->container['bank_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'bank_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bank_country_code']) && (mb_strlen($this->container['bank_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bankgiro_number']) && (mb_strlen($this->container['bankgiro_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'bankgiro_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bankgiro_number']) && (mb_strlen($this->container['bankgiro_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'bankgiro_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_iban']) && (mb_strlen($this->container['bank_iban']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_iban', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_iban']) && (mb_strlen($this->container['bank_iban']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_iban', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bank_iban']) && !preg_match("/^[a-zA-Z]{2}[0-9]{2}[a-zA-z0-9]{1,}$/", $this->container['bank_iban'])) {
            $invalidProperties[] = "invalid value for 'bank_iban', must be conform to the pattern /^[a-zA-Z]{2}[0-9]{2}[a-zA-z0-9]{1,}$/.";
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_name']) && (mb_strlen($this->container['bank_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_email']) && (mb_strlen($this->container['contact_person_email']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact_person_email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['contact_person_email']) && (mb_strlen($this->container['contact_person_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_mobile']) && (mb_strlen($this->container['contact_person_mobile']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_person_mobile', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_person_mobile']) && (mb_strlen($this->container['contact_person_mobile']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_mobile', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_name']) && (mb_strlen($this->container['contact_person_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_person_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_person_name']) && (mb_strlen($this->container['contact_person_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_person_phone']) && (mb_strlen($this->container['contact_person_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_person_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_person_phone']) && (mb_strlen($this->container['contact_person_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_person_phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['corporate_identity_number']) && (mb_strlen($this->container['corporate_identity_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'corporate_identity_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['corporate_identity_number']) && (mb_strlen($this->container['corporate_identity_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'corporate_identity_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mobile_phone']) && (mb_strlen($this->container['mobile_phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile_phone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 4000)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) < 0)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['plusgiro_number']) && (mb_strlen($this->container['plusgiro_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'plusgiro_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['plusgiro_number']) && (mb_strlen($this->container['plusgiro_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'plusgiro_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) > 50)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['telephone']) && (mb_strlen($this->container['telephone']) < 0)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['terms_of_payment_id'] === null) {
            $invalidProperties[] = "'terms_of_payment_id' can't be null";
        }
        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['www_address']) && (mb_strlen($this->container['www_address']) > 255)) {
            $invalidProperties[] = "invalid value for 'www_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['www_address']) && (mb_strlen($this->container['www_address']) < 0)) {
            $invalidProperties[] = "invalid value for 'www_address', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBankFeeCodeAllowableValues();
        if (!is_null($this->container['bank_fee_code']) && !in_array($this->container['bank_fee_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bank_fee_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets supplier_number
     *
     * @return string
     */
    public function getSupplierNumber()
    {
        return $this->container['supplier_number'];
    }

    /**
     * Sets supplier_number
     *
     * @param string $supplier_number Max length: 16 characters. Purpose: Unique identifier. If not provided, eAccounting will provide one
     *
     * @return $this
     */
    public function setSupplierNumber($supplier_number)
    {
        if (!is_null($supplier_number) && (mb_strlen($supplier_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $supplier_number when calling SupplierApi., must be smaller than or equal to 16.');
        }
        if (!is_null($supplier_number) && (mb_strlen($supplier_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $supplier_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['supplier_number'] = $supplier_number;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Max length: 50 characters
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($address1) && (mb_strlen($address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 Max length: 50 characters
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($address2) && (mb_strlen($address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets automatic_payment_service
     *
     * @return bool
     */
    public function getAutomaticPaymentService()
    {
        return $this->container['automatic_payment_service'];
    }

    /**
     * Sets automatic_payment_service
     *
     * @param bool $automatic_payment_service Purpose: Indicates if the supplier is paid by an automatic payment service. Supplier invoices to such suppliers will not be sent to the bank via the bank integration  Default value: false
     *
     * @return $this
     */
    public function setAutomaticPaymentService($automatic_payment_service)
    {
        $this->container['automatic_payment_service'] = $automatic_payment_service;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number Max length: 50 characters. Purpose: Only used in norwegian, dutch and danish eAccounting for domestic payments
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (!is_null($bank_account_number) && (mb_strlen($bank_account_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_account_number) && (mb_strlen($bank_account_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_bban
     *
     * @return string
     */
    public function getBankBban()
    {
        return $this->container['bank_bban'];
    }

    /**
     * Sets bank_bban
     *
     * @param string $bank_bban Purpose: Used on foreign payments to identify a bankaccount together with Bank Code (SupplierBankCode)  Format NO: 11 characters, Format DK: 11-14 characters
     *
     * @return $this
     */
    public function setBankBban($bank_bban)
    {
        if (!is_null($bank_bban) && (mb_strlen($bank_bban) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_bban when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_bban) && (mb_strlen($bank_bban) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_bban when calling SupplierApi., must be bigger than or equal to 0.');
        }
        if (!is_null($bank_bban) && (!preg_match("/^[a-zA-Z0-9]{1,35}$/", $bank_bban))) {
            throw new \InvalidArgumentException("invalid value for $bank_bban when calling SupplierApi., must conform to the pattern /^[a-zA-Z0-9]{1,35}$/.");
        }

        $this->container['bank_bban'] = $bank_bban;

        return $this;
    }

    /**
     * Gets bank_bic
     *
     * @return string
     */
    public function getBankBic()
    {
        return $this->container['bank_bic'];
    }

    /**
     * Sets bank_bic
     *
     * @param string $bank_bic Purpose: Used on foreign payments to identify a bankaccount together with IBAN (SupplierBankIban)  Format: 6 letters followed by 2 or 5 characters (total length 8 or 11)
     *
     * @return $this
     */
    public function setBankBic($bank_bic)
    {
        if (!is_null($bank_bic) && (mb_strlen($bank_bic) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_bic when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_bic) && (mb_strlen($bank_bic) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_bic when calling SupplierApi., must be bigger than or equal to 0.');
        }
        if (!is_null($bank_bic) && (!preg_match("/^[a-zA-Z]{6}([a-zA-z0-9]{2}|[a-zA-z0-9]{5})$/", $bank_bic))) {
            throw new \InvalidArgumentException("invalid value for $bank_bic when calling SupplierApi., must conform to the pattern /^[a-zA-Z]{6}([a-zA-z0-9]{2}|[a-zA-z0-9]{5})$/.");
        }

        $this->container['bank_bic'] = $bank_bic;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string $bank_code Purpose: Used on foreign payments to identify a bankaccount together with BBAN (SupplierBankBban)  Format: 2 letters followed by at least 3 characters
     *
     * @return $this
     */
    public function setBankCode($bank_code)
    {
        if (!is_null($bank_code) && (mb_strlen($bank_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_code when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_code) && (mb_strlen($bank_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_code when calling SupplierApi., must be bigger than or equal to 0.');
        }
        if (!is_null($bank_code) && (!preg_match("/^([a-zA-Z]{2})[a-zA-Z0-9]{3,}$/", $bank_code))) {
            throw new \InvalidArgumentException("invalid value for $bank_code when calling SupplierApi., must conform to the pattern /^([a-zA-Z]{2})[a-zA-Z0-9]{3,}$/.");
        }

        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets bank_country_code
     *
     * @return string
     */
    public function getBankCountryCode()
    {
        return $this->container['bank_country_code'];
    }

    /**
     * Sets bank_country_code
     *
     * @param string $bank_country_code Max length: 2 characters. Default value: Country of the supplier
     *
     * @return $this
     */
    public function setBankCountryCode($bank_country_code)
    {
        if (!is_null($bank_country_code) && (mb_strlen($bank_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bank_country_code when calling SupplierApi., must be smaller than or equal to 2.');
        }
        if (!is_null($bank_country_code) && (mb_strlen($bank_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_country_code when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['bank_country_code'] = $bank_country_code;

        return $this;
    }

    /**
     * Gets bankgiro_number
     *
     * @return string
     */
    public function getBankgiroNumber()
    {
        return $this->container['bankgiro_number'];
    }

    /**
     * Sets bankgiro_number
     *
     * @param string $bankgiro_number Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers
     *
     * @return $this
     */
    public function setBankgiroNumber($bankgiro_number)
    {
        if (!is_null($bankgiro_number) && (mb_strlen($bankgiro_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $bankgiro_number when calling SupplierApi., must be smaller than or equal to 10.');
        }
        if (!is_null($bankgiro_number) && (mb_strlen($bankgiro_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bankgiro_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['bankgiro_number'] = $bankgiro_number;

        return $this;
    }

    /**
     * Gets bank_iban
     *
     * @return string
     */
    public function getBankIban()
    {
        return $this->container['bank_iban'];
    }

    /**
     * Sets bank_iban
     *
     * @param string $bank_iban Purpose: Used on foreign payments to identify a bankaccount together with BIC (SupplierBankBic)  Format: 2 letters for country code, 2 control digits, 3 characters for bank identification
     *
     * @return $this
     */
    public function setBankIban($bank_iban)
    {
        if (!is_null($bank_iban) && (mb_strlen($bank_iban) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_iban when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_iban) && (mb_strlen($bank_iban) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_iban when calling SupplierApi., must be bigger than or equal to 0.');
        }
        if (!is_null($bank_iban) && (!preg_match("/^[a-zA-Z]{2}[0-9]{2}[a-zA-z0-9]{1,}$/", $bank_iban))) {
            throw new \InvalidArgumentException("invalid value for $bank_iban when calling SupplierApi., must conform to the pattern /^[a-zA-Z]{2}[0-9]{2}[a-zA-z0-9]{1,}$/.");
        }

        $this->container['bank_iban'] = $bank_iban;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name Max length: 50 characters
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        if (!is_null($bank_name) && (mb_strlen($bank_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_name) && (mb_strlen($bank_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_name when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Max length: 50 characters
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets contact_person_email
     *
     * @return string
     */
    public function getContactPersonEmail()
    {
        return $this->container['contact_person_email'];
    }

    /**
     * Sets contact_person_email
     *
     * @param string $contact_person_email Max length: 225 characters
     *
     * @return $this
     */
    public function setContactPersonEmail($contact_person_email)
    {
        if (!is_null($contact_person_email) && (mb_strlen($contact_person_email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_email when calling SupplierApi., must be smaller than or equal to 255.');
        }
        if (!is_null($contact_person_email) && (mb_strlen($contact_person_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_email when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_email'] = $contact_person_email;

        return $this;
    }

    /**
     * Gets contact_person_mobile
     *
     * @return string
     */
    public function getContactPersonMobile()
    {
        return $this->container['contact_person_mobile'];
    }

    /**
     * Sets contact_person_mobile
     *
     * @param string $contact_person_mobile Max length: 50 characters
     *
     * @return $this
     */
    public function setContactPersonMobile($contact_person_mobile)
    {
        if (!is_null($contact_person_mobile) && (mb_strlen($contact_person_mobile) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_mobile when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_person_mobile) && (mb_strlen($contact_person_mobile) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_mobile when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_mobile'] = $contact_person_mobile;

        return $this;
    }

    /**
     * Gets contact_person_name
     *
     * @return string
     */
    public function getContactPersonName()
    {
        return $this->container['contact_person_name'];
    }

    /**
     * Sets contact_person_name
     *
     * @param string $contact_person_name Max length: 50 characters
     *
     * @return $this
     */
    public function setContactPersonName($contact_person_name)
    {
        if (!is_null($contact_person_name) && (mb_strlen($contact_person_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_name when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_person_name) && (mb_strlen($contact_person_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_name when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_name'] = $contact_person_name;

        return $this;
    }

    /**
     * Gets contact_person_phone
     *
     * @return string
     */
    public function getContactPersonPhone()
    {
        return $this->container['contact_person_phone'];
    }

    /**
     * Sets contact_person_phone
     *
     * @param string $contact_person_phone Max length: 50 characters
     *
     * @return $this
     */
    public function setContactPersonPhone($contact_person_phone)
    {
        if (!is_null($contact_person_phone) && (mb_strlen($contact_person_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_phone when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_person_phone) && (mb_strlen($contact_person_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_phone when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['contact_person_phone'] = $contact_person_phone;

        return $this;
    }

    /**
     * Gets corporate_identity_number
     *
     * @return string
     */
    public function getCorporateIdentityNumber()
    {
        return $this->container['corporate_identity_number'];
    }

    /**
     * Sets corporate_identity_number
     *
     * @param string $corporate_identity_number Max length: 20 characters
     *
     * @return $this
     */
    public function setCorporateIdentityNumber($corporate_identity_number)
    {
        if (!is_null($corporate_identity_number) && (mb_strlen($corporate_identity_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identity_number when calling SupplierApi., must be smaller than or equal to 20.');
        }
        if (!is_null($corporate_identity_number) && (mb_strlen($corporate_identity_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $corporate_identity_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['corporate_identity_number'] = $corporate_identity_number;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling SupplierApi., must be smaller than or equal to 2.');
        }
        if (!is_null($country_code) && (mb_strlen($country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Max length: 3 characters. Default value: Currency of the user company
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling SupplierApi., must be smaller than or equal to 3.');
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Max length: 225 characters
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (!is_null($email_address) && (mb_strlen($email_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling SupplierApi., must be smaller than or equal to 255.');
        }
        if (!is_null($email_address) && (mb_strlen($email_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone Max length: 50 characters
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($mobile_phone) && (mb_strlen($mobile_phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Max length: 50 characters
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Max length: 400 characters
     *
     * @return $this
     */
    public function setNote($note)
    {
        if (!is_null($note) && (mb_strlen($note) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $note when calling SupplierApi., must be smaller than or equal to 4000.');
        }
        if (!is_null($note) && (mb_strlen($note) < 0)) {
            throw new \InvalidArgumentException('invalid length for $note when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets plusgiro_number
     *
     * @return string
     */
    public function getPlusgiroNumber()
    {
        return $this->container['plusgiro_number'];
    }

    /**
     * Sets plusgiro_number
     *
     * @param string $plusgiro_number Max length: 10 characters. Purpose: Only used in swedish eAccounting, for swedish suppliers
     *
     * @return $this
     */
    public function setPlusgiroNumber($plusgiro_number)
    {
        if (!is_null($plusgiro_number) && (mb_strlen($plusgiro_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $plusgiro_number when calling SupplierApi., must be smaller than or equal to 10.');
        }
        if (!is_null($plusgiro_number) && (mb_strlen($plusgiro_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $plusgiro_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['plusgiro_number'] = $plusgiro_number;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Max length: 10 characters
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling SupplierApi., must be smaller than or equal to 10.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Max length: 50 characters
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if (!is_null($telephone) && (mb_strlen($telephone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling SupplierApi., must be smaller than or equal to 50.');
        }
        if (!is_null($telephone) && (mb_strlen($telephone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets terms_of_payment_id
     *
     * @return string
     */
    public function getTermsOfPaymentId()
    {
        return $this->container['terms_of_payment_id'];
    }

    /**
     * Sets terms_of_payment_id
     *
     * @param string $terms_of_payment_id Source: Get from /v2/termsofpayment
     *
     * @return $this
     */
    public function setTermsOfPaymentId($terms_of_payment_id)
    {
        $this->container['terms_of_payment_id'] = $terms_of_payment_id;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number Max length: 20 characters. Purpose: Only used in dutch eAccounting, used to check the VAT number before deducting the VAT (legislation) or for 3rd parties to validate supplier invoice information
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling SupplierApi., must be smaller than or equal to 20.');
        }
        if (!is_null($vat_number) && (mb_strlen($vat_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets www_address
     *
     * @return string
     */
    public function getWwwAddress()
    {
        return $this->container['www_address'];
    }

    /**
     * Sets www_address
     *
     * @param string $www_address Max length: 255 characters
     *
     * @return $this
     */
    public function setWwwAddress($www_address)
    {
        if (!is_null($www_address) && (mb_strlen($www_address) > 255)) {
            throw new \InvalidArgumentException('invalid length for $www_address when calling SupplierApi., must be smaller than or equal to 255.');
        }
        if (!is_null($www_address) && (mb_strlen($www_address) < 0)) {
            throw new \InvalidArgumentException('invalid length for $www_address when calling SupplierApi., must be bigger than or equal to 0.');
        }

        $this->container['www_address'] = $www_address;

        return $this;
    }

    /**
     * Gets bank_fee_code
     *
     * @return int
     */
    public function getBankFeeCode()
    {
        return $this->container['bank_fee_code'];
    }

    /**
     * Sets bank_fee_code
     *
     * @param int $bank_fee_code Purpose: Used for foreign payments to determine which party that pays for aditional bank fees. 0 = None, 1 = SenderPaysAllBankCharges, 2 = ReceiverPaysAllBankCharges, 3 = ReceiverPaysForeignCosts
     *
     * @return $this
     */
    public function setBankFeeCode($bank_fee_code)
    {
        $allowedValues = $this->getBankFeeCodeAllowableValues();
        if (!is_null($bank_fee_code) && !in_array($bank_fee_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bank_fee_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bank_fee_code'] = $bank_fee_code;

        return $this;
    }

    /**
     * Gets pay_from_bank_account_id
     *
     * @return string
     */
    public function getPayFromBankAccountId()
    {
        return $this->container['pay_from_bank_account_id'];
    }

    /**
     * Sets pay_from_bank_account_id
     *
     * @param string $pay_from_bank_account_id Source: Get from /v2/bankaccounts. Purpose: Used for foreign payments to determine which bankaccount the payment will be from
     *
     * @return $this
     */
    public function setPayFromBankAccountId($pay_from_bank_account_id)
    {
        $this->container['pay_from_bank_account_id'] = $pay_from_bank_account_id;

        return $this;
    }

    /**
     * Gets foreign_payment_code_id
     *
     * @return string
     */
    public function getForeignPaymentCodeId()
    {
        return $this->container['foreign_payment_code_id'];
    }

    /**
     * Sets foreign_payment_code_id
     *
     * @param string $foreign_payment_code_id Source: Get from /v2/foreignpaymentcodes. Purpose: Used for categorization of foreign purchases (NO and SE only).
     *
     * @return $this
     */
    public function setForeignPaymentCodeId($foreign_payment_code_id)
    {
        $this->container['foreign_payment_code_id'] = $foreign_payment_code_id;

        return $this;
    }

    /**
     * Gets uses_payment_reference_numbers
     *
     * @return bool
     */
    public function getUsesPaymentReferenceNumbers()
    {
        return $this->container['uses_payment_reference_numbers'];
    }

    /**
     * Sets uses_payment_reference_numbers
     *
     * @param bool $uses_payment_reference_numbers Purpose: Used if the supplier uses payment reference numbers, OCR, KID etc. NO and SE only. Default: false
     *
     * @return $this
     */
    public function setUsesPaymentReferenceNumbers($uses_payment_reference_numbers)
    {
        $this->container['uses_payment_reference_numbers'] = $uses_payment_reference_numbers;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Default: true
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets self_employed_without_fixed_address
     *
     * @return bool
     */
    public function getSelfEmployedWithoutFixedAddress()
    {
        return $this->container['self_employed_without_fixed_address'];
    }

    /**
     * Sets self_employed_without_fixed_address
     *
     * @param bool $self_employed_without_fixed_address self_employed_without_fixed_address
     *
     * @return $this
     */
    public function setSelfEmployedWithoutFixedAddress($self_employed_without_fixed_address)
    {
        $this->container['self_employed_without_fixed_address'] = $self_employed_without_fixed_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


