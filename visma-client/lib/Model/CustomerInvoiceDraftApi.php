<?php
/**
 * CustomerInvoiceDraftApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CustomerInvoiceDraftApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceDraftApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerInvoiceDraftApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'customer_id' => 'string',
        'created_utc' => '\DateTime',
        'is_credit_invoice' => 'bool',
        'rot_reduced_invoicing_type' => 'int',
        'rot_reduced_invoicing_property_name' => 'string',
        'rot_reduced_invoicing_org_number' => 'string',
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_automatic_distribution' => 'bool',
        'rot_property_type' => 'int',
        'house_work_other_costs' => 'double',
        'rows' => '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftRowApi[]',
        'persons' => '\Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]',
        'your_reference' => 'string',
        'our_reference' => 'string',
        'buyers_order_reference' => 'string',
        'electronic_reference' => 'string',
        'invoice_customer_name' => 'string',
        'invoice_address1' => 'string',
        'invoice_address2' => 'string',
        'invoice_postal_code' => 'string',
        'invoice_city' => 'string',
        'invoice_country_code' => 'string',
        'invoice_currency_code' => 'string',
        'delivery_customer_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_postal_code' => 'string',
        'delivery_city' => 'string',
        'delivery_country_code' => 'string',
        'delivery_method_name' => 'string',
        'delivery_term_name' => 'string',
        'delivery_method_code' => 'string',
        'delivery_term_code' => 'string',
        'eu_third_party' => 'bool',
        'customer_is_private_person' => 'bool',
        'reverse_charge_on_construction_services' => 'bool',
        'sales_document_attachments' => 'string[]',
        'message_threads' => 'string[]',
        'notes' => 'string[]',
        'invoice_date' => '\DateTime',
        'due_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'total_amount' => 'double',
        'total_vat_amount' => 'double',
        'total_roundings' => 'double',
        'total_amount_base_currency' => 'double',
        'total_vat_amount_base_currency' => 'double',
        'customer_number' => 'string',
        'customer_name' => 'string',
        'includes_vat' => 'bool',
        'replace_unit_price_when_zero' => 'bool',
        'uses_green_technology' => 'bool',
        'contribution_margin' => '\Struqtur\VismaEAccounting\Model\ContributionMarginApi',
        'is_direct_debit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'customer_id' => 'uuid',
        'created_utc' => 'date-time',
        'is_credit_invoice' => null,
        'rot_reduced_invoicing_type' => 'int32',
        'rot_reduced_invoicing_property_name' => null,
        'rot_reduced_invoicing_org_number' => null,
        'rot_reduced_invoicing_amount' => 'double',
        'rot_reduced_invoicing_automatic_distribution' => null,
        'rot_property_type' => 'int32',
        'house_work_other_costs' => 'double',
        'rows' => null,
        'persons' => null,
        'your_reference' => null,
        'our_reference' => null,
        'buyers_order_reference' => null,
        'electronic_reference' => null,
        'invoice_customer_name' => null,
        'invoice_address1' => null,
        'invoice_address2' => null,
        'invoice_postal_code' => null,
        'invoice_city' => null,
        'invoice_country_code' => null,
        'invoice_currency_code' => null,
        'delivery_customer_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_postal_code' => null,
        'delivery_city' => null,
        'delivery_country_code' => null,
        'delivery_method_name' => null,
        'delivery_term_name' => null,
        'delivery_method_code' => null,
        'delivery_term_code' => null,
        'eu_third_party' => null,
        'customer_is_private_person' => null,
        'reverse_charge_on_construction_services' => null,
        'sales_document_attachments' => 'uuid',
        'message_threads' => 'uuid',
        'notes' => 'uuid',
        'invoice_date' => 'date-time',
        'due_date' => 'date-time',
        'delivery_date' => 'date-time',
        'total_amount' => 'double',
        'total_vat_amount' => 'double',
        'total_roundings' => 'double',
        'total_amount_base_currency' => 'double',
        'total_vat_amount_base_currency' => 'double',
        'customer_number' => null,
        'customer_name' => null,
        'includes_vat' => null,
        'replace_unit_price_when_zero' => null,
        'uses_green_technology' => null,
        'contribution_margin' => null,
        'is_direct_debit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'customer_id' => 'CustomerId',
        'created_utc' => 'CreatedUtc',
        'is_credit_invoice' => 'IsCreditInvoice',
        'rot_reduced_invoicing_type' => 'RotReducedInvoicingType',
        'rot_reduced_invoicing_property_name' => 'RotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'RotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'RotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'RotReducedInvoicingAutomaticDistribution',
        'rot_property_type' => 'RotPropertyType',
        'house_work_other_costs' => 'HouseWorkOtherCosts',
        'rows' => 'Rows',
        'persons' => 'Persons',
        'your_reference' => 'YourReference',
        'our_reference' => 'OurReference',
        'buyers_order_reference' => 'BuyersOrderReference',
        'electronic_reference' => 'ElectronicReference',
        'invoice_customer_name' => 'InvoiceCustomerName',
        'invoice_address1' => 'InvoiceAddress1',
        'invoice_address2' => 'InvoiceAddress2',
        'invoice_postal_code' => 'InvoicePostalCode',
        'invoice_city' => 'InvoiceCity',
        'invoice_country_code' => 'InvoiceCountryCode',
        'invoice_currency_code' => 'InvoiceCurrencyCode',
        'delivery_customer_name' => 'DeliveryCustomerName',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_postal_code' => 'DeliveryPostalCode',
        'delivery_city' => 'DeliveryCity',
        'delivery_country_code' => 'DeliveryCountryCode',
        'delivery_method_name' => 'DeliveryMethodName',
        'delivery_term_name' => 'DeliveryTermName',
        'delivery_method_code' => 'DeliveryMethodCode',
        'delivery_term_code' => 'DeliveryTermCode',
        'eu_third_party' => 'EuThirdParty',
        'customer_is_private_person' => 'CustomerIsPrivatePerson',
        'reverse_charge_on_construction_services' => 'ReverseChargeOnConstructionServices',
        'sales_document_attachments' => 'SalesDocumentAttachments',
        'message_threads' => 'MessageThreads',
        'notes' => 'Notes',
        'invoice_date' => 'InvoiceDate',
        'due_date' => 'DueDate',
        'delivery_date' => 'DeliveryDate',
        'total_amount' => 'TotalAmount',
        'total_vat_amount' => 'TotalVatAmount',
        'total_roundings' => 'TotalRoundings',
        'total_amount_base_currency' => 'TotalAmountBaseCurrency',
        'total_vat_amount_base_currency' => 'TotalVatAmountBaseCurrency',
        'customer_number' => 'CustomerNumber',
        'customer_name' => 'CustomerName',
        'includes_vat' => 'IncludesVat',
        'replace_unit_price_when_zero' => 'ReplaceUnitPriceWhenZero',
        'uses_green_technology' => 'UsesGreenTechnology',
        'contribution_margin' => 'ContributionMargin',
        'is_direct_debit' => 'IsDirectDebit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customer_id' => 'setCustomerId',
        'created_utc' => 'setCreatedUtc',
        'is_credit_invoice' => 'setIsCreditInvoice',
        'rot_reduced_invoicing_type' => 'setRotReducedInvoicingType',
        'rot_reduced_invoicing_property_name' => 'setRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'setRotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'setRotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'setRotReducedInvoicingAutomaticDistribution',
        'rot_property_type' => 'setRotPropertyType',
        'house_work_other_costs' => 'setHouseWorkOtherCosts',
        'rows' => 'setRows',
        'persons' => 'setPersons',
        'your_reference' => 'setYourReference',
        'our_reference' => 'setOurReference',
        'buyers_order_reference' => 'setBuyersOrderReference',
        'electronic_reference' => 'setElectronicReference',
        'invoice_customer_name' => 'setInvoiceCustomerName',
        'invoice_address1' => 'setInvoiceAddress1',
        'invoice_address2' => 'setInvoiceAddress2',
        'invoice_postal_code' => 'setInvoicePostalCode',
        'invoice_city' => 'setInvoiceCity',
        'invoice_country_code' => 'setInvoiceCountryCode',
        'invoice_currency_code' => 'setInvoiceCurrencyCode',
        'delivery_customer_name' => 'setDeliveryCustomerName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_postal_code' => 'setDeliveryPostalCode',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country_code' => 'setDeliveryCountryCode',
        'delivery_method_name' => 'setDeliveryMethodName',
        'delivery_term_name' => 'setDeliveryTermName',
        'delivery_method_code' => 'setDeliveryMethodCode',
        'delivery_term_code' => 'setDeliveryTermCode',
        'eu_third_party' => 'setEuThirdParty',
        'customer_is_private_person' => 'setCustomerIsPrivatePerson',
        'reverse_charge_on_construction_services' => 'setReverseChargeOnConstructionServices',
        'sales_document_attachments' => 'setSalesDocumentAttachments',
        'message_threads' => 'setMessageThreads',
        'notes' => 'setNotes',
        'invoice_date' => 'setInvoiceDate',
        'due_date' => 'setDueDate',
        'delivery_date' => 'setDeliveryDate',
        'total_amount' => 'setTotalAmount',
        'total_vat_amount' => 'setTotalVatAmount',
        'total_roundings' => 'setTotalRoundings',
        'total_amount_base_currency' => 'setTotalAmountBaseCurrency',
        'total_vat_amount_base_currency' => 'setTotalVatAmountBaseCurrency',
        'customer_number' => 'setCustomerNumber',
        'customer_name' => 'setCustomerName',
        'includes_vat' => 'setIncludesVat',
        'replace_unit_price_when_zero' => 'setReplaceUnitPriceWhenZero',
        'uses_green_technology' => 'setUsesGreenTechnology',
        'contribution_margin' => 'setContributionMargin',
        'is_direct_debit' => 'setIsDirectDebit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customer_id' => 'getCustomerId',
        'created_utc' => 'getCreatedUtc',
        'is_credit_invoice' => 'getIsCreditInvoice',
        'rot_reduced_invoicing_type' => 'getRotReducedInvoicingType',
        'rot_reduced_invoicing_property_name' => 'getRotReducedInvoicingPropertyName',
        'rot_reduced_invoicing_org_number' => 'getRotReducedInvoicingOrgNumber',
        'rot_reduced_invoicing_amount' => 'getRotReducedInvoicingAmount',
        'rot_reduced_invoicing_automatic_distribution' => 'getRotReducedInvoicingAutomaticDistribution',
        'rot_property_type' => 'getRotPropertyType',
        'house_work_other_costs' => 'getHouseWorkOtherCosts',
        'rows' => 'getRows',
        'persons' => 'getPersons',
        'your_reference' => 'getYourReference',
        'our_reference' => 'getOurReference',
        'buyers_order_reference' => 'getBuyersOrderReference',
        'electronic_reference' => 'getElectronicReference',
        'invoice_customer_name' => 'getInvoiceCustomerName',
        'invoice_address1' => 'getInvoiceAddress1',
        'invoice_address2' => 'getInvoiceAddress2',
        'invoice_postal_code' => 'getInvoicePostalCode',
        'invoice_city' => 'getInvoiceCity',
        'invoice_country_code' => 'getInvoiceCountryCode',
        'invoice_currency_code' => 'getInvoiceCurrencyCode',
        'delivery_customer_name' => 'getDeliveryCustomerName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_postal_code' => 'getDeliveryPostalCode',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country_code' => 'getDeliveryCountryCode',
        'delivery_method_name' => 'getDeliveryMethodName',
        'delivery_term_name' => 'getDeliveryTermName',
        'delivery_method_code' => 'getDeliveryMethodCode',
        'delivery_term_code' => 'getDeliveryTermCode',
        'eu_third_party' => 'getEuThirdParty',
        'customer_is_private_person' => 'getCustomerIsPrivatePerson',
        'reverse_charge_on_construction_services' => 'getReverseChargeOnConstructionServices',
        'sales_document_attachments' => 'getSalesDocumentAttachments',
        'message_threads' => 'getMessageThreads',
        'notes' => 'getNotes',
        'invoice_date' => 'getInvoiceDate',
        'due_date' => 'getDueDate',
        'delivery_date' => 'getDeliveryDate',
        'total_amount' => 'getTotalAmount',
        'total_vat_amount' => 'getTotalVatAmount',
        'total_roundings' => 'getTotalRoundings',
        'total_amount_base_currency' => 'getTotalAmountBaseCurrency',
        'total_vat_amount_base_currency' => 'getTotalVatAmountBaseCurrency',
        'customer_number' => 'getCustomerNumber',
        'customer_name' => 'getCustomerName',
        'includes_vat' => 'getIncludesVat',
        'replace_unit_price_when_zero' => 'getReplaceUnitPriceWhenZero',
        'uses_green_technology' => 'getUsesGreenTechnology',
        'contribution_margin' => 'getContributionMargin',
        'is_direct_debit' => 'getIsDirectDebit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROT_REDUCED_INVOICING_TYPE_0 = 0;
    const ROT_REDUCED_INVOICING_TYPE_1 = 1;
    const ROT_REDUCED_INVOICING_TYPE_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRotReducedInvoicingTypeAllowableValues()
    {
        return [
            self::ROT_REDUCED_INVOICING_TYPE_0,
            self::ROT_REDUCED_INVOICING_TYPE_1,
            self::ROT_REDUCED_INVOICING_TYPE_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['is_credit_invoice'] = isset($data['is_credit_invoice']) ? $data['is_credit_invoice'] : null;
        $this->container['rot_reduced_invoicing_type'] = isset($data['rot_reduced_invoicing_type']) ? $data['rot_reduced_invoicing_type'] : null;
        $this->container['rot_reduced_invoicing_property_name'] = isset($data['rot_reduced_invoicing_property_name']) ? $data['rot_reduced_invoicing_property_name'] : null;
        $this->container['rot_reduced_invoicing_org_number'] = isset($data['rot_reduced_invoicing_org_number']) ? $data['rot_reduced_invoicing_org_number'] : null;
        $this->container['rot_reduced_invoicing_amount'] = isset($data['rot_reduced_invoicing_amount']) ? $data['rot_reduced_invoicing_amount'] : null;
        $this->container['rot_reduced_invoicing_automatic_distribution'] = isset($data['rot_reduced_invoicing_automatic_distribution']) ? $data['rot_reduced_invoicing_automatic_distribution'] : null;
        $this->container['rot_property_type'] = isset($data['rot_property_type']) ? $data['rot_property_type'] : null;
        $this->container['house_work_other_costs'] = isset($data['house_work_other_costs']) ? $data['house_work_other_costs'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
        $this->container['persons'] = isset($data['persons']) ? $data['persons'] : null;
        $this->container['your_reference'] = isset($data['your_reference']) ? $data['your_reference'] : null;
        $this->container['our_reference'] = isset($data['our_reference']) ? $data['our_reference'] : null;
        $this->container['buyers_order_reference'] = isset($data['buyers_order_reference']) ? $data['buyers_order_reference'] : null;
        $this->container['electronic_reference'] = isset($data['electronic_reference']) ? $data['electronic_reference'] : null;
        $this->container['invoice_customer_name'] = isset($data['invoice_customer_name']) ? $data['invoice_customer_name'] : null;
        $this->container['invoice_address1'] = isset($data['invoice_address1']) ? $data['invoice_address1'] : null;
        $this->container['invoice_address2'] = isset($data['invoice_address2']) ? $data['invoice_address2'] : null;
        $this->container['invoice_postal_code'] = isset($data['invoice_postal_code']) ? $data['invoice_postal_code'] : null;
        $this->container['invoice_city'] = isset($data['invoice_city']) ? $data['invoice_city'] : null;
        $this->container['invoice_country_code'] = isset($data['invoice_country_code']) ? $data['invoice_country_code'] : null;
        $this->container['invoice_currency_code'] = isset($data['invoice_currency_code']) ? $data['invoice_currency_code'] : null;
        $this->container['delivery_customer_name'] = isset($data['delivery_customer_name']) ? $data['delivery_customer_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_postal_code'] = isset($data['delivery_postal_code']) ? $data['delivery_postal_code'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_country_code'] = isset($data['delivery_country_code']) ? $data['delivery_country_code'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['delivery_term_name'] = isset($data['delivery_term_name']) ? $data['delivery_term_name'] : null;
        $this->container['delivery_method_code'] = isset($data['delivery_method_code']) ? $data['delivery_method_code'] : null;
        $this->container['delivery_term_code'] = isset($data['delivery_term_code']) ? $data['delivery_term_code'] : null;
        $this->container['eu_third_party'] = isset($data['eu_third_party']) ? $data['eu_third_party'] : null;
        $this->container['customer_is_private_person'] = isset($data['customer_is_private_person']) ? $data['customer_is_private_person'] : null;
        $this->container['reverse_charge_on_construction_services'] = isset($data['reverse_charge_on_construction_services']) ? $data['reverse_charge_on_construction_services'] : null;
        $this->container['sales_document_attachments'] = isset($data['sales_document_attachments']) ? $data['sales_document_attachments'] : null;
        $this->container['message_threads'] = isset($data['message_threads']) ? $data['message_threads'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['total_vat_amount'] = isset($data['total_vat_amount']) ? $data['total_vat_amount'] : null;
        $this->container['total_roundings'] = isset($data['total_roundings']) ? $data['total_roundings'] : null;
        $this->container['total_amount_base_currency'] = isset($data['total_amount_base_currency']) ? $data['total_amount_base_currency'] : null;
        $this->container['total_vat_amount_base_currency'] = isset($data['total_vat_amount_base_currency']) ? $data['total_vat_amount_base_currency'] : null;
        $this->container['customer_number'] = isset($data['customer_number']) ? $data['customer_number'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['includes_vat'] = isset($data['includes_vat']) ? $data['includes_vat'] : null;
        $this->container['replace_unit_price_when_zero'] = isset($data['replace_unit_price_when_zero']) ? $data['replace_unit_price_when_zero'] : null;
        $this->container['uses_green_technology'] = isset($data['uses_green_technology']) ? $data['uses_green_technology'] : null;
        $this->container['contribution_margin'] = isset($data['contribution_margin']) ? $data['contribution_margin'] : null;
        $this->container['is_direct_debit'] = isset($data['is_direct_debit']) ? $data['is_direct_debit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['rot_reduced_invoicing_type'] === null) {
            $invalidProperties[] = "'rot_reduced_invoicing_type' can't be null";
        }
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!is_null($this->container['rot_reduced_invoicing_type']) && !in_array($this->container['rot_reduced_invoicing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rot_reduced_invoicing_property_name']) && (mb_strlen($this->container['rot_reduced_invoicing_property_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_property_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['rot_reduced_invoicing_property_name']) && (mb_strlen($this->container['rot_reduced_invoicing_property_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_property_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['rot_reduced_invoicing_org_number']) && (mb_strlen($this->container['rot_reduced_invoicing_org_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_org_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['rot_reduced_invoicing_org_number']) && (mb_strlen($this->container['rot_reduced_invoicing_org_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'rot_reduced_invoicing_org_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['buyers_order_reference']) && (mb_strlen($this->container['buyers_order_reference']) > 35)) {
            $invalidProperties[] = "invalid value for 'buyers_order_reference', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['buyers_order_reference']) && (mb_strlen($this->container['buyers_order_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'buyers_order_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['electronic_reference']) && (mb_strlen($this->container['electronic_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'electronic_reference', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['electronic_reference']) && (mb_strlen($this->container['electronic_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'electronic_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_customer_name']) && (mb_strlen($this->container['invoice_customer_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_customer_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_customer_name']) && (mb_strlen($this->container['invoice_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_city']) && (mb_strlen($this->container['invoice_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_city']) && (mb_strlen($this->container['invoice_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_method_name']) && (mb_strlen($this->container['delivery_method_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_method_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_method_name']) && (mb_strlen($this->container['delivery_method_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_method_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_term_name']) && (mb_strlen($this->container['delivery_term_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_term_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_term_name']) && (mb_strlen($this->container['delivery_term_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_term_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_method_code']) && (mb_strlen($this->container['delivery_method_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'delivery_method_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['delivery_method_code']) && (mb_strlen($this->container['delivery_method_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_method_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_term_code']) && (mb_strlen($this->container['delivery_term_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'delivery_term_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['delivery_term_code']) && (mb_strlen($this->container['delivery_term_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_term_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['eu_third_party'] === null) {
            $invalidProperties[] = "'eu_third_party' can't be null";
        }
        if (!is_null($this->container['customer_number']) && (mb_strlen($this->container['customer_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['customer_number']) && (mb_strlen($this->container['customer_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Source: Get from /v2/customers
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc Purpose: Is automatically set
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets is_credit_invoice
     *
     * @return bool
     */
    public function getIsCreditInvoice()
    {
        return $this->container['is_credit_invoice'];
    }

    /**
     * Sets is_credit_invoice
     *
     * @param bool $is_credit_invoice is_credit_invoice
     *
     * @return $this
     */
    public function setIsCreditInvoice($is_credit_invoice)
    {
        $this->container['is_credit_invoice'] = $is_credit_invoice;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_type
     *
     * @return int
     */
    public function getRotReducedInvoicingType()
    {
        return $this->container['rot_reduced_invoicing_type'];
    }

    /**
     * Sets rot_reduced_invoicing_type
     *
     * @param int $rot_reduced_invoicing_type 0 = Normal, 1 = Rot, 2 = Rut
     *
     * @return $this
     */
    public function setRotReducedInvoicingType($rot_reduced_invoicing_type)
    {
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!in_array($rot_reduced_invoicing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rot_reduced_invoicing_type'] = $rot_reduced_invoicing_type;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_property_name
     *
     * @return string
     */
    public function getRotReducedInvoicingPropertyName()
    {
        return $this->container['rot_reduced_invoicing_property_name'];
    }

    /**
     * Sets rot_reduced_invoicing_property_name
     *
     * @param string $rot_reduced_invoicing_property_name Max length: 40 characters
     *
     * @return $this
     */
    public function setRotReducedInvoicingPropertyName($rot_reduced_invoicing_property_name)
    {
        if (!is_null($rot_reduced_invoicing_property_name) && (mb_strlen($rot_reduced_invoicing_property_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_property_name when calling CustomerInvoiceDraftApi., must be smaller than or equal to 40.');
        }
        if (!is_null($rot_reduced_invoicing_property_name) && (mb_strlen($rot_reduced_invoicing_property_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_property_name when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['rot_reduced_invoicing_property_name'] = $rot_reduced_invoicing_property_name;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_org_number
     *
     * @return string
     */
    public function getRotReducedInvoicingOrgNumber()
    {
        return $this->container['rot_reduced_invoicing_org_number'];
    }

    /**
     * Sets rot_reduced_invoicing_org_number
     *
     * @param string $rot_reduced_invoicing_org_number Max length: 11 characters
     *
     * @return $this
     */
    public function setRotReducedInvoicingOrgNumber($rot_reduced_invoicing_org_number)
    {
        if (!is_null($rot_reduced_invoicing_org_number) && (mb_strlen($rot_reduced_invoicing_org_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_org_number when calling CustomerInvoiceDraftApi., must be smaller than or equal to 11.');
        }
        if (!is_null($rot_reduced_invoicing_org_number) && (mb_strlen($rot_reduced_invoicing_org_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $rot_reduced_invoicing_org_number when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['rot_reduced_invoicing_org_number'] = $rot_reduced_invoicing_org_number;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_amount
     *
     * @return double
     */
    public function getRotReducedInvoicingAmount()
    {
        return $this->container['rot_reduced_invoicing_amount'];
    }

    /**
     * Sets rot_reduced_invoicing_amount
     *
     * @param double $rot_reduced_invoicing_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setRotReducedInvoicingAmount($rot_reduced_invoicing_amount)
    {
        $this->container['rot_reduced_invoicing_amount'] = $rot_reduced_invoicing_amount;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_automatic_distribution
     *
     * @return bool
     */
    public function getRotReducedInvoicingAutomaticDistribution()
    {
        return $this->container['rot_reduced_invoicing_automatic_distribution'];
    }

    /**
     * Sets rot_reduced_invoicing_automatic_distribution
     *
     * @param bool $rot_reduced_invoicing_automatic_distribution Default: False
     *
     * @return $this
     */
    public function setRotReducedInvoicingAutomaticDistribution($rot_reduced_invoicing_automatic_distribution)
    {
        $this->container['rot_reduced_invoicing_automatic_distribution'] = $rot_reduced_invoicing_automatic_distribution;

        return $this;
    }

    /**
     * Gets rot_property_type
     *
     * @return int
     */
    public function getRotPropertyType()
    {
        return $this->container['rot_property_type'];
    }

    /**
     * Sets rot_property_type
     *
     * @param int $rot_property_type 1 - Apartment  2 - Property  Leave blank or set to null if you do not intend to use ROT or Green Technology functionality
     *
     * @return $this
     */
    public function setRotPropertyType($rot_property_type)
    {
        $this->container['rot_property_type'] = $rot_property_type;

        return $this;
    }

    /**
     * Gets house_work_other_costs
     *
     * @return double
     */
    public function getHouseWorkOtherCosts()
    {
        return $this->container['house_work_other_costs'];
    }

    /**
     * Sets house_work_other_costs
     *
     * @param double $house_work_other_costs house_work_other_costs
     *
     * @return $this
     */
    public function setHouseWorkOtherCosts($house_work_other_costs)
    {
        $this->container['house_work_other_costs'] = $house_work_other_costs;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftRowApi[]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftRowApi[] $rows rows
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets persons
     *
     * @return \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]
     */
    public function getPersons()
    {
        return $this->container['persons'];
    }

    /**
     * Sets persons
     *
     * @param \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons
     *
     * @return $this
     */
    public function setPersons($persons)
    {
        $this->container['persons'] = $persons;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string $your_reference Max length: 100 characters
     *
     * @return $this
     */
    public function setYourReference($your_reference)
    {
        if (!is_null($your_reference) && (mb_strlen($your_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling CustomerInvoiceDraftApi., must be smaller than or equal to 100.');
        }
        if (!is_null($your_reference) && (mb_strlen($your_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets our_reference
     *
     * @return string
     */
    public function getOurReference()
    {
        return $this->container['our_reference'];
    }

    /**
     * Sets our_reference
     *
     * @param string $our_reference Max length: 100 characters
     *
     * @return $this
     */
    public function setOurReference($our_reference)
    {
        if (!is_null($our_reference) && (mb_strlen($our_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling CustomerInvoiceDraftApi., must be smaller than or equal to 100.');
        }
        if (!is_null($our_reference) && (mb_strlen($our_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['our_reference'] = $our_reference;

        return $this;
    }

    /**
     * Gets buyers_order_reference
     *
     * @return string
     */
    public function getBuyersOrderReference()
    {
        return $this->container['buyers_order_reference'];
    }

    /**
     * Sets buyers_order_reference
     *
     * @param string $buyers_order_reference Purpose: Used when sending electronic invoices. Max length: 35 characters. Can be null or empty
     *
     * @return $this
     */
    public function setBuyersOrderReference($buyers_order_reference)
    {
        if (!is_null($buyers_order_reference) && (mb_strlen($buyers_order_reference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $buyers_order_reference when calling CustomerInvoiceDraftApi., must be smaller than or equal to 35.');
        }
        if (!is_null($buyers_order_reference) && (mb_strlen($buyers_order_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $buyers_order_reference when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['buyers_order_reference'] = $buyers_order_reference;

        return $this;
    }

    /**
     * Gets electronic_reference
     *
     * @return string
     */
    public function getElectronicReference()
    {
        return $this->container['electronic_reference'];
    }

    /**
     * Sets electronic_reference
     *
     * @param string $electronic_reference Set this if you later intend to send the invoice electronically. Can only be set for non-private individuals
     *
     * @return $this
     */
    public function setElectronicReference($electronic_reference)
    {
        if (!is_null($electronic_reference) && (mb_strlen($electronic_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $electronic_reference when calling CustomerInvoiceDraftApi., must be smaller than or equal to 100.');
        }
        if (!is_null($electronic_reference) && (mb_strlen($electronic_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $electronic_reference when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['electronic_reference'] = $electronic_reference;

        return $this;
    }

    /**
     * Gets invoice_customer_name
     *
     * @return string
     */
    public function getInvoiceCustomerName()
    {
        return $this->container['invoice_customer_name'];
    }

    /**
     * Sets invoice_customer_name
     *
     * @param string $invoice_customer_name Purpose: Value is automatically set up depending on the selected customer's properties
     *
     * @return $this
     */
    public function setInvoiceCustomerName($invoice_customer_name)
    {
        if (!is_null($invoice_customer_name) && (mb_strlen($invoice_customer_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_customer_name when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_customer_name) && (mb_strlen($invoice_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_customer_name when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_customer_name'] = $invoice_customer_name;

        return $this;
    }

    /**
     * Gets invoice_address1
     *
     * @return string
     */
    public function getInvoiceAddress1()
    {
        return $this->container['invoice_address1'];
    }

    /**
     * Sets invoice_address1
     *
     * @param string $invoice_address1 Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setInvoiceAddress1($invoice_address1)
    {
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address1'] = $invoice_address1;

        return $this;
    }

    /**
     * Gets invoice_address2
     *
     * @return string
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoice_address2'];
    }

    /**
     * Sets invoice_address2
     *
     * @param string $invoice_address2 Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setInvoiceAddress2($invoice_address2)
    {
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address2'] = $invoice_address2;

        return $this;
    }

    /**
     * Gets invoice_postal_code
     *
     * @return string
     */
    public function getInvoicePostalCode()
    {
        return $this->container['invoice_postal_code'];
    }

    /**
     * Sets invoice_postal_code
     *
     * @param string $invoice_postal_code Purpose: Value is automatically set up depending on the selected customer's properties
     *
     * @return $this
     */
    public function setInvoicePostalCode($invoice_postal_code)
    {
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 10.');
        }
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_postal_code'] = $invoice_postal_code;

        return $this;
    }

    /**
     * Gets invoice_city
     *
     * @return string
     */
    public function getInvoiceCity()
    {
        return $this->container['invoice_city'];
    }

    /**
     * Sets invoice_city
     *
     * @param string $invoice_city Purpose: Value is automatically set up depending on the selected customer's properties
     *
     * @return $this
     */
    public function setInvoiceCity($invoice_city)
    {
        if (!is_null($invoice_city) && (mb_strlen($invoice_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_city) && (mb_strlen($invoice_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_city when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_city'] = $invoice_city;

        return $this;
    }

    /**
     * Gets invoice_country_code
     *
     * @return string
     */
    public function getInvoiceCountryCode()
    {
        return $this->container['invoice_country_code'];
    }

    /**
     * Sets invoice_country_code
     *
     * @param string $invoice_country_code Purpose: Value is automatically set up depending on the selected customer's properties
     *
     * @return $this
     */
    public function setInvoiceCountryCode($invoice_country_code)
    {
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 2.');
        }
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_country_code'] = $invoice_country_code;

        return $this;
    }

    /**
     * Gets invoice_currency_code
     *
     * @return string
     */
    public function getInvoiceCurrencyCode()
    {
        return $this->container['invoice_currency_code'];
    }

    /**
     * Sets invoice_currency_code
     *
     * @param string $invoice_currency_code invoice_currency_code
     *
     * @return $this
     */
    public function setInvoiceCurrencyCode($invoice_currency_code)
    {
        $this->container['invoice_currency_code'] = $invoice_currency_code;

        return $this;
    }

    /**
     * Gets delivery_customer_name
     *
     * @return string
     */
    public function getDeliveryCustomerName()
    {
        return $this->container['delivery_customer_name'];
    }

    /**
     * Sets delivery_customer_name
     *
     * @param string $delivery_customer_name Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryCustomerName($delivery_customer_name)
    {
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_customer_name'] = $delivery_customer_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string $delivery_address1 Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string $delivery_address2 Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_postal_code
     *
     * @return string
     */
    public function getDeliveryPostalCode()
    {
        return $this->container['delivery_postal_code'];
    }

    /**
     * Sets delivery_postal_code
     *
     * @param string $delivery_postal_code Max length: 10 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryPostalCode($delivery_postal_code)
    {
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 10.');
        }
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_postal_code'] = $delivery_postal_code;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string $delivery_city Max length: 50 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country_code
     *
     * @return string
     */
    public function getDeliveryCountryCode()
    {
        return $this->container['delivery_country_code'];
    }

    /**
     * Sets delivery_country_code
     *
     * @param string $delivery_country_code Max length: 2 characters  Set a value if you want to override the existing property value taken from the customer
     *
     * @return $this
     */
    public function setDeliveryCountryCode($delivery_country_code)
    {
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 2.');
        }
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_country_code'] = $delivery_country_code;

        return $this;
    }

    /**
     * Gets delivery_method_name
     *
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     *
     * @param string $delivery_method_name Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        if (!is_null($delivery_method_name) && (mb_strlen($delivery_method_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_name when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_method_name) && (mb_strlen($delivery_method_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_name when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets delivery_term_name
     *
     * @return string
     */
    public function getDeliveryTermName()
    {
        return $this->container['delivery_term_name'];
    }

    /**
     * Sets delivery_term_name
     *
     * @param string $delivery_term_name Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryTermName($delivery_term_name)
    {
        if (!is_null($delivery_term_name) && (mb_strlen($delivery_term_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_name when calling CustomerInvoiceDraftApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_term_name) && (mb_strlen($delivery_term_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_name when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_term_name'] = $delivery_term_name;

        return $this;
    }

    /**
     * Gets delivery_method_code
     *
     * @return string
     */
    public function getDeliveryMethodCode()
    {
        return $this->container['delivery_method_code'];
    }

    /**
     * Sets delivery_method_code
     *
     * @param string $delivery_method_code Max length: 20 characters
     *
     * @return $this
     */
    public function setDeliveryMethodCode($delivery_method_code)
    {
        if (!is_null($delivery_method_code) && (mb_strlen($delivery_method_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 20.');
        }
        if (!is_null($delivery_method_code) && (mb_strlen($delivery_method_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_method_code'] = $delivery_method_code;

        return $this;
    }

    /**
     * Gets delivery_term_code
     *
     * @return string
     */
    public function getDeliveryTermCode()
    {
        return $this->container['delivery_term_code'];
    }

    /**
     * Sets delivery_term_code
     *
     * @param string $delivery_term_code Max length: 20 characters
     *
     * @return $this
     */
    public function setDeliveryTermCode($delivery_term_code)
    {
        if (!is_null($delivery_term_code) && (mb_strlen($delivery_term_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_code when calling CustomerInvoiceDraftApi., must be smaller than or equal to 20.');
        }
        if (!is_null($delivery_term_code) && (mb_strlen($delivery_term_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_code when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_term_code'] = $delivery_term_code;

        return $this;
    }

    /**
     * Gets eu_third_party
     *
     * @return bool
     */
    public function getEuThirdParty()
    {
        return $this->container['eu_third_party'];
    }

    /**
     * Sets eu_third_party
     *
     * @param bool $eu_third_party eu_third_party
     *
     * @return $this
     */
    public function setEuThirdParty($eu_third_party)
    {
        $this->container['eu_third_party'] = $eu_third_party;

        return $this;
    }

    /**
     * Gets customer_is_private_person
     *
     * @return bool
     */
    public function getCustomerIsPrivatePerson()
    {
        return $this->container['customer_is_private_person'];
    }

    /**
     * Sets customer_is_private_person
     *
     * @param bool $customer_is_private_person Purpose: Value is automatically set up depending on the selected customer's properties
     *
     * @return $this
     */
    public function setCustomerIsPrivatePerson($customer_is_private_person)
    {
        $this->container['customer_is_private_person'] = $customer_is_private_person;

        return $this;
    }

    /**
     * Gets reverse_charge_on_construction_services
     *
     * @return bool
     */
    public function getReverseChargeOnConstructionServices()
    {
        return $this->container['reverse_charge_on_construction_services'];
    }

    /**
     * Sets reverse_charge_on_construction_services
     *
     * @param bool $reverse_charge_on_construction_services reverse_charge_on_construction_services
     *
     * @return $this
     */
    public function setReverseChargeOnConstructionServices($reverse_charge_on_construction_services)
    {
        $this->container['reverse_charge_on_construction_services'] = $reverse_charge_on_construction_services;

        return $this;
    }

    /**
     * Gets sales_document_attachments
     *
     * @return string[]
     */
    public function getSalesDocumentAttachments()
    {
        return $this->container['sales_document_attachments'];
    }

    /**
     * Sets sales_document_attachments
     *
     * @param string[] $sales_document_attachments sales_document_attachments
     *
     * @return $this
     */
    public function setSalesDocumentAttachments($sales_document_attachments)
    {
        $this->container['sales_document_attachments'] = $sales_document_attachments;

        return $this;
    }

    /**
     * Gets message_threads
     *
     * @return string[]
     */
    public function getMessageThreads()
    {
        return $this->container['message_threads'];
    }

    /**
     * Sets message_threads
     *
     * @param string[] $message_threads Fetch messages via GET /v2/messagethreads/{messageThreadId}
     *
     * @return $this
     */
    public function setMessageThreads($message_threads)
    {
        $this->container['message_threads'] = $message_threads;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes Fetch notes via GET /v2/notes/{noteId}
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Optional invoice date.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Due date of the customer invoice draft.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_vat_amount
     *
     * @return double
     */
    public function getTotalVatAmount()
    {
        return $this->container['total_vat_amount'];
    }

    /**
     * Sets total_vat_amount
     *
     * @param double $total_vat_amount total_vat_amount
     *
     * @return $this
     */
    public function setTotalVatAmount($total_vat_amount)
    {
        $this->container['total_vat_amount'] = $total_vat_amount;

        return $this;
    }

    /**
     * Gets total_roundings
     *
     * @return double
     */
    public function getTotalRoundings()
    {
        return $this->container['total_roundings'];
    }

    /**
     * Sets total_roundings
     *
     * @param double $total_roundings total_roundings
     *
     * @return $this
     */
    public function setTotalRoundings($total_roundings)
    {
        $this->container['total_roundings'] = $total_roundings;

        return $this;
    }

    /**
     * Gets total_amount_base_currency
     *
     * @return double
     */
    public function getTotalAmountBaseCurrency()
    {
        return $this->container['total_amount_base_currency'];
    }

    /**
     * Sets total_amount_base_currency
     *
     * @param double $total_amount_base_currency total_amount_base_currency
     *
     * @return $this
     */
    public function setTotalAmountBaseCurrency($total_amount_base_currency)
    {
        $this->container['total_amount_base_currency'] = $total_amount_base_currency;

        return $this;
    }

    /**
     * Gets total_vat_amount_base_currency
     *
     * @return double
     */
    public function getTotalVatAmountBaseCurrency()
    {
        return $this->container['total_vat_amount_base_currency'];
    }

    /**
     * Sets total_vat_amount_base_currency
     *
     * @param double $total_vat_amount_base_currency total_vat_amount_base_currency
     *
     * @return $this
     */
    public function setTotalVatAmountBaseCurrency($total_vat_amount_base_currency)
    {
        $this->container['total_vat_amount_base_currency'] = $total_vat_amount_base_currency;

        return $this;
    }

    /**
     * Gets customer_number
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customer_number'];
    }

    /**
     * Sets customer_number
     *
     * @param string $customer_number Max length: 16 characters
     *
     * @return $this
     */
    public function setCustomerNumber($customer_number)
    {
        if (!is_null($customer_number) && (mb_strlen($customer_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling CustomerInvoiceDraftApi., must be smaller than or equal to 16.');
        }
        if (!is_null($customer_number) && (mb_strlen($customer_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_number when calling CustomerInvoiceDraftApi., must be bigger than or equal to 0.');
        }

        $this->container['customer_number'] = $customer_number;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Customer's actual name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets includes_vat
     *
     * @return bool
     */
    public function getIncludesVat()
    {
        return $this->container['includes_vat'];
    }

    /**
     * Sets includes_vat
     *
     * @param bool $includes_vat Purpose: If true the unit prices on rows include VAT. The value is set upon creation depending whether \"Show prices excl. VAT for private individuals\" in company settings is marked or not
     *
     * @return $this
     */
    public function setIncludesVat($includes_vat)
    {
        $this->container['includes_vat'] = $includes_vat;

        return $this;
    }

    /**
     * Gets replace_unit_price_when_zero
     *
     * @return bool
     */
    public function getReplaceUnitPriceWhenZero()
    {
        return $this->container['replace_unit_price_when_zero'];
    }

    /**
     * Sets replace_unit_price_when_zero
     *
     * @param bool $replace_unit_price_when_zero When set to true an unit price of zero will be replaced with the unit price on the article register. When set to false it allows creation of drafts with unit price 0 on one or more rows.  Rows with an unit price other than 0 are not affected by this setting. The default value is false.
     *
     * @return $this
     */
    public function setReplaceUnitPriceWhenZero($replace_unit_price_when_zero)
    {
        $this->container['replace_unit_price_when_zero'] = $replace_unit_price_when_zero;

        return $this;
    }

    /**
     * Gets uses_green_technology
     *
     * @return bool
     */
    public function getUsesGreenTechnology()
    {
        return $this->container['uses_green_technology'];
    }

    /**
     * Sets uses_green_technology
     *
     * @param bool $uses_green_technology Set to true if this customer invoice draft benefits from deduction on Green Technology.  If set to true the customer invoice draft must have RotReducedInvoicingType set to normal and contain at least one row with applicable deduction.
     *
     * @return $this
     */
    public function setUsesGreenTechnology($uses_green_technology)
    {
        $this->container['uses_green_technology'] = $uses_green_technology;

        return $this;
    }

    /**
     * Gets contribution_margin
     *
     * @return \Struqtur\VismaEAccounting\Model\ContributionMarginApi
     */
    public function getContributionMargin()
    {
        return $this->container['contribution_margin'];
    }

    /**
     * Sets contribution_margin
     *
     * @param \Struqtur\VismaEAccounting\Model\ContributionMarginApi $contribution_margin Contribution margin variables
     *
     * @return $this
     */
    public function setContributionMargin($contribution_margin)
    {
        $this->container['contribution_margin'] = $contribution_margin;

        return $this;
    }

    /**
     * Gets is_direct_debit
     *
     * @return bool
     */
    public function getIsDirectDebit()
    {
        return $this->container['is_direct_debit'];
    }

    /**
     * Sets is_direct_debit
     *
     * @param bool $is_direct_debit Indicated whether this invoice has direct debit applied  Only applicable for NL
     *
     * @return $this
     */
    public function setIsDirectDebit($is_direct_debit)
    {
        $this->container['is_direct_debit'] = $is_direct_debit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


