<?php
/**
 * ArticleApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.41
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * ArticleApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArticleApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArticleApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'is_active' => 'bool',
        'number' => 'string',
        'name' => 'string',
        'name_english' => 'string',
        'net_price' => 'double',
        'net_price_with_discount' => 'double',
        'gross_price' => 'double',
        'coding_id' => 'string',
        'coding_name' => 'string',
        'unit_id' => 'string',
        'unit_name' => 'string',
        'unit_abbreviation' => 'string',
        'stock_balance' => 'double',
        'stock_balance_manually_changed_utc' => '\DateTime',
        'stock_balance_reserved' => 'double',
        'stock_balance_available' => 'double',
        'created_utc' => '\DateTime',
        'changed_utc' => '\DateTime',
        'house_work_type' => 'int',
        'purchase_price' => 'double',
        'purchase_price_manually_changed_utc' => '\DateTime',
        'send_to_webshop' => 'bool',
        'uses_moss' => 'bool',
        'article_labels' => '\Struqtur\VismaEAccounting\Model\ArticleLabelApi[]',
        'message_threads' => 'string[]',
        'notes' => 'string[]',
        'is_stock' => 'bool',
        'show_stock_information' => 'bool',
        'is_service_article' => 'bool',
        'stock_location_reference' => 'string',
        'freight_costs' => 'double',
        'freight_costs_manually_changed_utc' => '\DateTime',
        'update_stock_prices' => 'bool',
        'barcodes' => '\Struqtur\VismaEAccounting\Model\ArticleBarcodeApi[]',
        'stock_value' => 'double',
        'green_technology_type' => 'int',
        'discount_percentage' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'is_active' => null,
        'number' => null,
        'name' => null,
        'name_english' => null,
        'net_price' => 'double',
        'net_price_with_discount' => 'double',
        'gross_price' => 'double',
        'coding_id' => 'uuid',
        'coding_name' => null,
        'unit_id' => 'uuid',
        'unit_name' => null,
        'unit_abbreviation' => null,
        'stock_balance' => 'double',
        'stock_balance_manually_changed_utc' => 'date-time',
        'stock_balance_reserved' => 'double',
        'stock_balance_available' => 'double',
        'created_utc' => 'date-time',
        'changed_utc' => 'date-time',
        'house_work_type' => 'int32',
        'purchase_price' => 'double',
        'purchase_price_manually_changed_utc' => 'date-time',
        'send_to_webshop' => null,
        'uses_moss' => null,
        'article_labels' => null,
        'message_threads' => 'uuid',
        'notes' => 'uuid',
        'is_stock' => null,
        'show_stock_information' => null,
        'is_service_article' => null,
        'stock_location_reference' => null,
        'freight_costs' => 'double',
        'freight_costs_manually_changed_utc' => 'date-time',
        'update_stock_prices' => null,
        'barcodes' => null,
        'stock_value' => 'double',
        'green_technology_type' => 'int32',
        'discount_percentage' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'is_active' => 'IsActive',
        'number' => 'Number',
        'name' => 'Name',
        'name_english' => 'NameEnglish',
        'net_price' => 'NetPrice',
        'net_price_with_discount' => 'NetPriceWithDiscount',
        'gross_price' => 'GrossPrice',
        'coding_id' => 'CodingId',
        'coding_name' => 'CodingName',
        'unit_id' => 'UnitId',
        'unit_name' => 'UnitName',
        'unit_abbreviation' => 'UnitAbbreviation',
        'stock_balance' => 'StockBalance',
        'stock_balance_manually_changed_utc' => 'StockBalanceManuallyChangedUtc',
        'stock_balance_reserved' => 'StockBalanceReserved',
        'stock_balance_available' => 'StockBalanceAvailable',
        'created_utc' => 'CreatedUtc',
        'changed_utc' => 'ChangedUtc',
        'house_work_type' => 'HouseWorkType',
        'purchase_price' => 'PurchasePrice',
        'purchase_price_manually_changed_utc' => 'PurchasePriceManuallyChangedUtc',
        'send_to_webshop' => 'SendToWebshop',
        'uses_moss' => 'UsesMoss',
        'article_labels' => 'ArticleLabels',
        'message_threads' => 'MessageThreads',
        'notes' => 'Notes',
        'is_stock' => 'IsStock',
        'show_stock_information' => 'ShowStockInformation',
        'is_service_article' => 'IsServiceArticle',
        'stock_location_reference' => 'StockLocationReference',
        'freight_costs' => 'FreightCosts',
        'freight_costs_manually_changed_utc' => 'FreightCostsManuallyChangedUtc',
        'update_stock_prices' => 'UpdateStockPrices',
        'barcodes' => 'Barcodes',
        'stock_value' => 'StockValue',
        'green_technology_type' => 'GreenTechnologyType',
        'discount_percentage' => 'DiscountPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'number' => 'setNumber',
        'name' => 'setName',
        'name_english' => 'setNameEnglish',
        'net_price' => 'setNetPrice',
        'net_price_with_discount' => 'setNetPriceWithDiscount',
        'gross_price' => 'setGrossPrice',
        'coding_id' => 'setCodingId',
        'coding_name' => 'setCodingName',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'unit_abbreviation' => 'setUnitAbbreviation',
        'stock_balance' => 'setStockBalance',
        'stock_balance_manually_changed_utc' => 'setStockBalanceManuallyChangedUtc',
        'stock_balance_reserved' => 'setStockBalanceReserved',
        'stock_balance_available' => 'setStockBalanceAvailable',
        'created_utc' => 'setCreatedUtc',
        'changed_utc' => 'setChangedUtc',
        'house_work_type' => 'setHouseWorkType',
        'purchase_price' => 'setPurchasePrice',
        'purchase_price_manually_changed_utc' => 'setPurchasePriceManuallyChangedUtc',
        'send_to_webshop' => 'setSendToWebshop',
        'uses_moss' => 'setUsesMoss',
        'article_labels' => 'setArticleLabels',
        'message_threads' => 'setMessageThreads',
        'notes' => 'setNotes',
        'is_stock' => 'setIsStock',
        'show_stock_information' => 'setShowStockInformation',
        'is_service_article' => 'setIsServiceArticle',
        'stock_location_reference' => 'setStockLocationReference',
        'freight_costs' => 'setFreightCosts',
        'freight_costs_manually_changed_utc' => 'setFreightCostsManuallyChangedUtc',
        'update_stock_prices' => 'setUpdateStockPrices',
        'barcodes' => 'setBarcodes',
        'stock_value' => 'setStockValue',
        'green_technology_type' => 'setGreenTechnologyType',
        'discount_percentage' => 'setDiscountPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'number' => 'getNumber',
        'name' => 'getName',
        'name_english' => 'getNameEnglish',
        'net_price' => 'getNetPrice',
        'net_price_with_discount' => 'getNetPriceWithDiscount',
        'gross_price' => 'getGrossPrice',
        'coding_id' => 'getCodingId',
        'coding_name' => 'getCodingName',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'unit_abbreviation' => 'getUnitAbbreviation',
        'stock_balance' => 'getStockBalance',
        'stock_balance_manually_changed_utc' => 'getStockBalanceManuallyChangedUtc',
        'stock_balance_reserved' => 'getStockBalanceReserved',
        'stock_balance_available' => 'getStockBalanceAvailable',
        'created_utc' => 'getCreatedUtc',
        'changed_utc' => 'getChangedUtc',
        'house_work_type' => 'getHouseWorkType',
        'purchase_price' => 'getPurchasePrice',
        'purchase_price_manually_changed_utc' => 'getPurchasePriceManuallyChangedUtc',
        'send_to_webshop' => 'getSendToWebshop',
        'uses_moss' => 'getUsesMoss',
        'article_labels' => 'getArticleLabels',
        'message_threads' => 'getMessageThreads',
        'notes' => 'getNotes',
        'is_stock' => 'getIsStock',
        'show_stock_information' => 'getShowStockInformation',
        'is_service_article' => 'getIsServiceArticle',
        'stock_location_reference' => 'getStockLocationReference',
        'freight_costs' => 'getFreightCosts',
        'freight_costs_manually_changed_utc' => 'getFreightCostsManuallyChangedUtc',
        'update_stock_prices' => 'getUpdateStockPrices',
        'barcodes' => 'getBarcodes',
        'stock_value' => 'getStockValue',
        'green_technology_type' => 'getGreenTechnologyType',
        'discount_percentage' => 'getDiscountPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_english'] = isset($data['name_english']) ? $data['name_english'] : null;
        $this->container['net_price'] = isset($data['net_price']) ? $data['net_price'] : null;
        $this->container['net_price_with_discount'] = isset($data['net_price_with_discount']) ? $data['net_price_with_discount'] : null;
        $this->container['gross_price'] = isset($data['gross_price']) ? $data['gross_price'] : null;
        $this->container['coding_id'] = isset($data['coding_id']) ? $data['coding_id'] : null;
        $this->container['coding_name'] = isset($data['coding_name']) ? $data['coding_name'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['unit_abbreviation'] = isset($data['unit_abbreviation']) ? $data['unit_abbreviation'] : null;
        $this->container['stock_balance'] = isset($data['stock_balance']) ? $data['stock_balance'] : null;
        $this->container['stock_balance_manually_changed_utc'] = isset($data['stock_balance_manually_changed_utc']) ? $data['stock_balance_manually_changed_utc'] : null;
        $this->container['stock_balance_reserved'] = isset($data['stock_balance_reserved']) ? $data['stock_balance_reserved'] : null;
        $this->container['stock_balance_available'] = isset($data['stock_balance_available']) ? $data['stock_balance_available'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['changed_utc'] = isset($data['changed_utc']) ? $data['changed_utc'] : null;
        $this->container['house_work_type'] = isset($data['house_work_type']) ? $data['house_work_type'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['purchase_price_manually_changed_utc'] = isset($data['purchase_price_manually_changed_utc']) ? $data['purchase_price_manually_changed_utc'] : null;
        $this->container['send_to_webshop'] = isset($data['send_to_webshop']) ? $data['send_to_webshop'] : null;
        $this->container['uses_moss'] = isset($data['uses_moss']) ? $data['uses_moss'] : null;
        $this->container['article_labels'] = isset($data['article_labels']) ? $data['article_labels'] : null;
        $this->container['message_threads'] = isset($data['message_threads']) ? $data['message_threads'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['is_stock'] = isset($data['is_stock']) ? $data['is_stock'] : null;
        $this->container['show_stock_information'] = isset($data['show_stock_information']) ? $data['show_stock_information'] : null;
        $this->container['is_service_article'] = isset($data['is_service_article']) ? $data['is_service_article'] : null;
        $this->container['stock_location_reference'] = isset($data['stock_location_reference']) ? $data['stock_location_reference'] : null;
        $this->container['freight_costs'] = isset($data['freight_costs']) ? $data['freight_costs'] : null;
        $this->container['freight_costs_manually_changed_utc'] = isset($data['freight_costs_manually_changed_utc']) ? $data['freight_costs_manually_changed_utc'] : null;
        $this->container['update_stock_prices'] = isset($data['update_stock_prices']) ? $data['update_stock_prices'] : null;
        $this->container['barcodes'] = isset($data['barcodes']) ? $data['barcodes'] : null;
        $this->container['stock_value'] = isset($data['stock_value']) ? $data['stock_value'] : null;
        $this->container['green_technology_type'] = isset($data['green_technology_type']) ? $data['green_technology_type'] : null;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_active'] === null) {
            $invalidProperties[] = "'is_active' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ((mb_strlen($this->container['number']) > 40)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['number']) < 0)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name_english']) && (mb_strlen($this->container['name_english']) > 50)) {
            $invalidProperties[] = "invalid value for 'name_english', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name_english']) && (mb_strlen($this->container['name_english']) < 0)) {
            $invalidProperties[] = "invalid value for 'name_english', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_price']) && ($this->container['net_price'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'net_price', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['net_price']) && ($this->container['net_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['net_price_with_discount']) && ($this->container['net_price_with_discount'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'net_price_with_discount', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['net_price_with_discount']) && ($this->container['net_price_with_discount'] < 0)) {
            $invalidProperties[] = "invalid value for 'net_price_with_discount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['gross_price']) && ($this->container['gross_price'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'gross_price', must be smaller than or equal to 10000000.";
        }

        if (!is_null($this->container['gross_price']) && ($this->container['gross_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'gross_price', must be bigger than or equal to 0.";
        }

        if ($this->container['coding_id'] === null) {
            $invalidProperties[] = "'coding_id' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalidProperties[] = "'unit_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Max length: 40 characters
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if ((mb_strlen($number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ArticleApi., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $number when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Max length: 50 characters
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ArticleApi., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_english
     *
     * @return string
     */
    public function getNameEnglish()
    {
        return $this->container['name_english'];
    }

    /**
     * Sets name_english
     *
     * @param string $name_english Max length: 50 characters
     *
     * @return $this
     */
    public function setNameEnglish($name_english)
    {
        if (!is_null($name_english) && (mb_strlen($name_english) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name_english when calling ArticleApi., must be smaller than or equal to 50.');
        }
        if (!is_null($name_english) && (mb_strlen($name_english) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name_english when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['name_english'] = $name_english;

        return $this;
    }

    /**
     * Gets net_price
     *
     * @return double
     */
    public function getNetPrice()
    {
        return $this->container['net_price'];
    }

    /**
     * Sets net_price
     *
     * @param double $net_price Format: Max 2 decimals
     *
     * @return $this
     */
    public function setNetPrice($net_price)
    {

        if (!is_null($net_price) && ($net_price > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $net_price when calling ArticleApi., must be smaller than or equal to 10000000.');
        }
        if (!is_null($net_price) && ($net_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_price when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['net_price'] = $net_price;

        return $this;
    }

    /**
     * Gets net_price_with_discount
     *
     * @return double
     */
    public function getNetPriceWithDiscount()
    {
        return $this->container['net_price_with_discount'];
    }

    /**
     * Sets net_price_with_discount
     *
     * @param double $net_price_with_discount Format: Max 2 decimals
     *
     * @return $this
     */
    public function setNetPriceWithDiscount($net_price_with_discount)
    {

        if (!is_null($net_price_with_discount) && ($net_price_with_discount > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $net_price_with_discount when calling ArticleApi., must be smaller than or equal to 10000000.');
        }
        if (!is_null($net_price_with_discount) && ($net_price_with_discount < 0)) {
            throw new \InvalidArgumentException('invalid value for $net_price_with_discount when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['net_price_with_discount'] = $net_price_with_discount;

        return $this;
    }

    /**
     * Gets gross_price
     *
     * @return double
     */
    public function getGrossPrice()
    {
        return $this->container['gross_price'];
    }

    /**
     * Sets gross_price
     *
     * @param double $gross_price Format: Max 2 decimals
     *
     * @return $this
     */
    public function setGrossPrice($gross_price)
    {

        if (!is_null($gross_price) && ($gross_price > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $gross_price when calling ArticleApi., must be smaller than or equal to 10000000.');
        }
        if (!is_null($gross_price) && ($gross_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $gross_price when calling ArticleApi., must be bigger than or equal to 0.');
        }

        $this->container['gross_price'] = $gross_price;

        return $this;
    }

    /**
     * Gets coding_id
     *
     * @return string
     */
    public function getCodingId()
    {
        return $this->container['coding_id'];
    }

    /**
     * Sets coding_id
     *
     * @param string $coding_id Source: Get from /v2/articleaccountcodings
     *
     * @return $this
     */
    public function setCodingId($coding_id)
    {
        $this->container['coding_id'] = $coding_id;

        return $this;
    }

    /**
     * Gets coding_name
     *
     * @return string
     */
    public function getCodingName()
    {
        return $this->container['coding_name'];
    }

    /**
     * Sets coding_name
     *
     * @param string $coding_name coding_name
     *
     * @return $this
     */
    public function setCodingName($coding_name)
    {
        $this->container['coding_name'] = $coding_name;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id Source: Get from /v2/units
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string $unit_name Purpose: Returns the unit name entered from UnitId
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets unit_abbreviation
     *
     * @return string
     */
    public function getUnitAbbreviation()
    {
        return $this->container['unit_abbreviation'];
    }

    /**
     * Sets unit_abbreviation
     *
     * @param string $unit_abbreviation Purpose: Returns the unit abbreviation entered from UnitId
     *
     * @return $this
     */
    public function setUnitAbbreviation($unit_abbreviation)
    {
        $this->container['unit_abbreviation'] = $unit_abbreviation;

        return $this;
    }

    /**
     * Gets stock_balance
     *
     * @return double
     */
    public function getStockBalance()
    {
        return $this->container['stock_balance'];
    }

    /**
     * Sets stock_balance
     *
     * @param double $stock_balance Default: 0.   Purpose: Sets the stock balance for this article  When stock module is active, this is read only
     *
     * @return $this
     */
    public function setStockBalance($stock_balance)
    {
        $this->container['stock_balance'] = $stock_balance;

        return $this;
    }

    /**
     * Gets stock_balance_manually_changed_utc
     *
     * @return \DateTime
     */
    public function getStockBalanceManuallyChangedUtc()
    {
        return $this->container['stock_balance_manually_changed_utc'];
    }

    /**
     * Sets stock_balance_manually_changed_utc
     *
     * @param \DateTime $stock_balance_manually_changed_utc Purpose: Set when the stock balance is changed manually
     *
     * @return $this
     */
    public function setStockBalanceManuallyChangedUtc($stock_balance_manually_changed_utc)
    {
        $this->container['stock_balance_manually_changed_utc'] = $stock_balance_manually_changed_utc;

        return $this;
    }

    /**
     * Gets stock_balance_reserved
     *
     * @return double
     */
    public function getStockBalanceReserved()
    {
        return $this->container['stock_balance_reserved'];
    }

    /**
     * Sets stock_balance_reserved
     *
     * @param double $stock_balance_reserved Purpose: Returns the reserved stock balance for this article
     *
     * @return $this
     */
    public function setStockBalanceReserved($stock_balance_reserved)
    {
        $this->container['stock_balance_reserved'] = $stock_balance_reserved;

        return $this;
    }

    /**
     * Gets stock_balance_available
     *
     * @return double
     */
    public function getStockBalanceAvailable()
    {
        return $this->container['stock_balance_available'];
    }

    /**
     * Sets stock_balance_available
     *
     * @param double $stock_balance_available Purpose: Returns the available stock balance for this article
     *
     * @return $this
     */
    public function setStockBalanceAvailable($stock_balance_available)
    {
        $this->container['stock_balance_available'] = $stock_balance_available;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc Purpose: Returns the date and time when the article was created
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets changed_utc
     *
     * @return \DateTime
     */
    public function getChangedUtc()
    {
        return $this->container['changed_utc'];
    }

    /**
     * Sets changed_utc
     *
     * @param \DateTime $changed_utc Purpose: Returns the last date and time from when a change was made on the article
     *
     * @return $this
     */
    public function setChangedUtc($changed_utc)
    {
        $this->container['changed_utc'] = $changed_utc;

        return $this;
    }

    /**
     * Gets house_work_type
     *
     * @return int
     */
    public function getHouseWorkType()
    {
        return $this->container['house_work_type'];
    }

    /**
     * Sets house_work_type
     *
     * @param int $house_work_type 0 = None, 1 = RotConstructionWork , 2 = RotElectricalWork , 3 = RotGlassSheetMetalWork , 4 = RotGroundWork , 5 = RotBrickWork , 6 = RotPaintDecorateWork , 7 = RotPlumbWork   9 = RutCleanJobWork , 10 = RutCareClothTextile , 11 = RutCook , 12 = RutSnowRemove , 13 = RutGarden , 14 = RutBabySitt , 15 = RutOtherCare , 17 = RutHouseWorkHelp     18 = RutRemovalServices , 19 = RutITServices , 20 = RotHeatPump , 21 = RotHeatPump2 , 22 = RutHomeAppliances
     *
     * @return $this
     */
    public function setHouseWorkType($house_work_type)
    {
        $this->container['house_work_type'] = $house_work_type;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return double
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param double $purchase_price purchase_price
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets purchase_price_manually_changed_utc
     *
     * @return \DateTime
     */
    public function getPurchasePriceManuallyChangedUtc()
    {
        return $this->container['purchase_price_manually_changed_utc'];
    }

    /**
     * Sets purchase_price_manually_changed_utc
     *
     * @param \DateTime $purchase_price_manually_changed_utc Purpose: Set when the purchase price is changed manually
     *
     * @return $this
     */
    public function setPurchasePriceManuallyChangedUtc($purchase_price_manually_changed_utc)
    {
        $this->container['purchase_price_manually_changed_utc'] = $purchase_price_manually_changed_utc;

        return $this;
    }

    /**
     * Gets send_to_webshop
     *
     * @return bool
     */
    public function getSendToWebshop()
    {
        return $this->container['send_to_webshop'];
    }

    /**
     * Sets send_to_webshop
     *
     * @param bool $send_to_webshop Purpose: If true, will send article to VismaWebShop (If company has the integration).  Default: True
     *
     * @return $this
     */
    public function setSendToWebshop($send_to_webshop)
    {
        $this->container['send_to_webshop'] = $send_to_webshop;

        return $this;
    }

    /**
     * Gets uses_moss
     *
     * @return bool
     */
    public function getUsesMoss()
    {
        return $this->container['uses_moss'];
    }

    /**
     * Sets uses_moss
     *
     * @param bool $uses_moss This property can be set if the OSS setting is checked in company settings. Only applicable if using Accrual accounting.
     *
     * @return $this
     */
    public function setUsesMoss($uses_moss)
    {
        $this->container['uses_moss'] = $uses_moss;

        return $this;
    }

    /**
     * Gets article_labels
     *
     * @return \Struqtur\VismaEAccounting\Model\ArticleLabelApi[]
     */
    public function getArticleLabels()
    {
        return $this->container['article_labels'];
    }

    /**
     * Sets article_labels
     *
     * @param \Struqtur\VismaEAccounting\Model\ArticleLabelApi[] $article_labels article_labels
     *
     * @return $this
     */
    public function setArticleLabels($article_labels)
    {
        $this->container['article_labels'] = $article_labels;

        return $this;
    }

    /**
     * Gets message_threads
     *
     * @return string[]
     */
    public function getMessageThreads()
    {
        return $this->container['message_threads'];
    }

    /**
     * Sets message_threads
     *
     * @param string[] $message_threads Fetch messages via GET /v2/messagethreads/{messageThreadId}
     *
     * @return $this
     */
    public function setMessageThreads($message_threads)
    {
        $this->container['message_threads'] = $message_threads;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes Fetch notes via GET /v2/notes/{noteId}
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets is_stock
     *
     * @return bool
     */
    public function getIsStock()
    {
        return $this->container['is_stock'];
    }

    /**
     * Sets is_stock
     *
     * @param bool $is_stock Article can be stock article if stock module is activated and sales category for the article Goods type
     *
     * @return $this
     */
    public function setIsStock($is_stock)
    {
        $this->container['is_stock'] = $is_stock;

        return $this;
    }

    /**
     * Gets show_stock_information
     *
     * @return bool
     */
    public function getShowStockInformation()
    {
        return $this->container['show_stock_information'];
    }

    /**
     * Sets show_stock_information
     *
     * @param bool $show_stock_information ShowStockInformation = TRUE IF company has active stock module, article is stock article and article is not a service article                              OR company hasn't active stock module and article is not a service article.
     *
     * @return $this
     */
    public function setShowStockInformation($show_stock_information)
    {
        $this->container['show_stock_information'] = $show_stock_information;

        return $this;
    }

    /**
     * Gets is_service_article
     *
     * @return bool
     */
    public function getIsServiceArticle()
    {
        return $this->container['is_service_article'];
    }

    /**
     * Sets is_service_article
     *
     * @param bool $is_service_article IsServiceArticle = FALSE if the sales category for the article is of the type Goods  IsServiceArticle = TRUE if the sales category for the article is of the type Service.  To be able to filter Articles by AccountCodingType, use property called CodingType: 1 = Goods, 2 = Services.
     *
     * @return $this
     */
    public function setIsServiceArticle($is_service_article)
    {
        $this->container['is_service_article'] = $is_service_article;

        return $this;
    }

    /**
     * Gets stock_location_reference
     *
     * @return string
     */
    public function getStockLocationReference()
    {
        return $this->container['stock_location_reference'];
    }

    /**
     * Sets stock_location_reference
     *
     * @param string $stock_location_reference Article stock location reference
     *
     * @return $this
     */
    public function setStockLocationReference($stock_location_reference)
    {
        $this->container['stock_location_reference'] = $stock_location_reference;

        return $this;
    }

    /**
     * Gets freight_costs
     *
     * @return double
     */
    public function getFreightCosts()
    {
        return $this->container['freight_costs'];
    }

    /**
     * Sets freight_costs
     *
     * @param double $freight_costs Freight costs per article unit
     *
     * @return $this
     */
    public function setFreightCosts($freight_costs)
    {
        $this->container['freight_costs'] = $freight_costs;

        return $this;
    }

    /**
     * Gets freight_costs_manually_changed_utc
     *
     * @return \DateTime
     */
    public function getFreightCostsManuallyChangedUtc()
    {
        return $this->container['freight_costs_manually_changed_utc'];
    }

    /**
     * Sets freight_costs_manually_changed_utc
     *
     * @param \DateTime $freight_costs_manually_changed_utc Purpose: Set when the freight costs is changed manually
     *
     * @return $this
     */
    public function setFreightCostsManuallyChangedUtc($freight_costs_manually_changed_utc)
    {
        $this->container['freight_costs_manually_changed_utc'] = $freight_costs_manually_changed_utc;

        return $this;
    }

    /**
     * Gets update_stock_prices
     *
     * @return bool
     */
    public function getUpdateStockPrices()
    {
        return $this->container['update_stock_prices'];
    }

    /**
     * Sets update_stock_prices
     *
     * @param bool $update_stock_prices Purpose: Update article purchase price and freight costs when creating manual stock adjustment
     *
     * @return $this
     */
    public function setUpdateStockPrices($update_stock_prices)
    {
        $this->container['update_stock_prices'] = $update_stock_prices;

        return $this;
    }

    /**
     * Gets barcodes
     *
     * @return \Struqtur\VismaEAccounting\Model\ArticleBarcodeApi[]
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     *
     * @param \Struqtur\VismaEAccounting\Model\ArticleBarcodeApi[] $barcodes Article barcode (currently only one BarcodeType=Default)
     *
     * @return $this
     */
    public function setBarcodes($barcodes)
    {
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets stock_value
     *
     * @return double
     */
    public function getStockValue()
    {
        return $this->container['stock_value'];
    }

    /**
     * Sets stock_value
     *
     * @param double $stock_value Total value of articles currently in stock
     *
     * @return $this
     */
    public function setStockValue($stock_value)
    {
        $this->container['stock_value'] = $stock_value;

        return $this;
    }

    /**
     * Gets green_technology_type
     *
     * @return int
     */
    public function getGreenTechnologyType()
    {
        return $this->container['green_technology_type'];
    }

    /**
     * Sets green_technology_type
     *
     * @param int $green_technology_type The type of green technology deduction that applies for this article.  <list type=\"number\"><listheader><term>Value</term><description>Usage</description></listheader><item><term>0</term><description>This article doesn't benefit from deduction applicable to green technology</description></item><item><term>1</term><description>Installation of solar cells and panels </description></item><item><term>2</term><description>Installation of systems for storing privately produced electricity</description></item><item><term>3</term><description>Installation of charging points for electric vehicles</description></item></list>
     *
     * @return $this
     */
    public function setGreenTechnologyType($green_technology_type)
    {
        $this->container['green_technology_type'] = $green_technology_type;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return double
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param double $discount_percentage Discount from discount agreement
     *
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


