<?php
/**
 * CustomerLedgerItemApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CustomerLedgerItemApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerLedgerItemApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerLedgerItemApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'currency_rate' => 'double',
        'currency_rate_unit' => 'int',
        'customer_id' => 'string',
        'due_date' => '\DateTime',
        'id' => 'string',
        'invoice_date' => '\DateTime',
        'invoice_number' => 'int',
        'is_credit_invoice' => 'bool',
        'payment_reference_number' => 'string',
        'remaining_amount_invoice_currency' => 'double',
        'roundings_amount_invoice_currency' => 'double',
        'total_amount_invoice_currency' => 'double',
        'vat_amount_invoice_currency' => 'double',
        'voucher_id' => 'string',
        'modified_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'currency_rate' => 'double',
        'currency_rate_unit' => 'int32',
        'customer_id' => 'uuid',
        'due_date' => 'date-time',
        'id' => 'uuid',
        'invoice_date' => 'date-time',
        'invoice_number' => 'int32',
        'is_credit_invoice' => null,
        'payment_reference_number' => null,
        'remaining_amount_invoice_currency' => 'double',
        'roundings_amount_invoice_currency' => 'double',
        'total_amount_invoice_currency' => 'double',
        'vat_amount_invoice_currency' => 'double',
        'voucher_id' => 'uuid',
        'modified_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'CurrencyCode',
        'currency_rate' => 'CurrencyRate',
        'currency_rate_unit' => 'CurrencyRateUnit',
        'customer_id' => 'CustomerId',
        'due_date' => 'DueDate',
        'id' => 'Id',
        'invoice_date' => 'InvoiceDate',
        'invoice_number' => 'InvoiceNumber',
        'is_credit_invoice' => 'IsCreditInvoice',
        'payment_reference_number' => 'PaymentReferenceNumber',
        'remaining_amount_invoice_currency' => 'RemainingAmountInvoiceCurrency',
        'roundings_amount_invoice_currency' => 'RoundingsAmountInvoiceCurrency',
        'total_amount_invoice_currency' => 'TotalAmountInvoiceCurrency',
        'vat_amount_invoice_currency' => 'VATAmountInvoiceCurrency',
        'voucher_id' => 'VoucherId',
        'modified_utc' => 'ModifiedUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'currency_rate' => 'setCurrencyRate',
        'currency_rate_unit' => 'setCurrencyRateUnit',
        'customer_id' => 'setCustomerId',
        'due_date' => 'setDueDate',
        'id' => 'setId',
        'invoice_date' => 'setInvoiceDate',
        'invoice_number' => 'setInvoiceNumber',
        'is_credit_invoice' => 'setIsCreditInvoice',
        'payment_reference_number' => 'setPaymentReferenceNumber',
        'remaining_amount_invoice_currency' => 'setRemainingAmountInvoiceCurrency',
        'roundings_amount_invoice_currency' => 'setRoundingsAmountInvoiceCurrency',
        'total_amount_invoice_currency' => 'setTotalAmountInvoiceCurrency',
        'vat_amount_invoice_currency' => 'setVatAmountInvoiceCurrency',
        'voucher_id' => 'setVoucherId',
        'modified_utc' => 'setModifiedUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'currency_rate' => 'getCurrencyRate',
        'currency_rate_unit' => 'getCurrencyRateUnit',
        'customer_id' => 'getCustomerId',
        'due_date' => 'getDueDate',
        'id' => 'getId',
        'invoice_date' => 'getInvoiceDate',
        'invoice_number' => 'getInvoiceNumber',
        'is_credit_invoice' => 'getIsCreditInvoice',
        'payment_reference_number' => 'getPaymentReferenceNumber',
        'remaining_amount_invoice_currency' => 'getRemainingAmountInvoiceCurrency',
        'roundings_amount_invoice_currency' => 'getRoundingsAmountInvoiceCurrency',
        'total_amount_invoice_currency' => 'getTotalAmountInvoiceCurrency',
        'vat_amount_invoice_currency' => 'getVatAmountInvoiceCurrency',
        'voucher_id' => 'getVoucherId',
        'modified_utc' => 'getModifiedUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['currency_rate_unit'] = isset($data['currency_rate_unit']) ? $data['currency_rate_unit'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['is_credit_invoice'] = isset($data['is_credit_invoice']) ? $data['is_credit_invoice'] : null;
        $this->container['payment_reference_number'] = isset($data['payment_reference_number']) ? $data['payment_reference_number'] : null;
        $this->container['remaining_amount_invoice_currency'] = isset($data['remaining_amount_invoice_currency']) ? $data['remaining_amount_invoice_currency'] : null;
        $this->container['roundings_amount_invoice_currency'] = isset($data['roundings_amount_invoice_currency']) ? $data['roundings_amount_invoice_currency'] : null;
        $this->container['total_amount_invoice_currency'] = isset($data['total_amount_invoice_currency']) ? $data['total_amount_invoice_currency'] : null;
        $this->container['vat_amount_invoice_currency'] = isset($data['vat_amount_invoice_currency']) ? $data['vat_amount_invoice_currency'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['invoice_date'] === null) {
            $invalidProperties[] = "'invoice_date' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['is_credit_invoice'] === null) {
            $invalidProperties[] = "'is_credit_invoice' can't be null";
        }
        if (!is_null($this->container['payment_reference_number']) && (mb_strlen($this->container['payment_reference_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'payment_reference_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['payment_reference_number']) && (mb_strlen($this->container['payment_reference_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_reference_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['remaining_amount_invoice_currency'] === null) {
            $invalidProperties[] = "'remaining_amount_invoice_currency' can't be null";
        }
        if (($this->container['remaining_amount_invoice_currency'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'remaining_amount_invoice_currency', must be smaller than or equal to 1000000000.";
        }

        if (($this->container['remaining_amount_invoice_currency'] < -1000000000)) {
            $invalidProperties[] = "invalid value for 'remaining_amount_invoice_currency', must be bigger than or equal to -1000000000.";
        }

        if ($this->container['roundings_amount_invoice_currency'] === null) {
            $invalidProperties[] = "'roundings_amount_invoice_currency' can't be null";
        }
        if (($this->container['roundings_amount_invoice_currency'] > 1)) {
            $invalidProperties[] = "invalid value for 'roundings_amount_invoice_currency', must be smaller than or equal to 1.";
        }

        if (($this->container['roundings_amount_invoice_currency'] < -1)) {
            $invalidProperties[] = "invalid value for 'roundings_amount_invoice_currency', must be bigger than or equal to -1.";
        }

        if ($this->container['total_amount_invoice_currency'] === null) {
            $invalidProperties[] = "'total_amount_invoice_currency' can't be null";
        }
        if (($this->container['total_amount_invoice_currency'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'total_amount_invoice_currency', must be smaller than or equal to 1000000000.";
        }

        if (($this->container['total_amount_invoice_currency'] < -1000000000)) {
            $invalidProperties[] = "invalid value for 'total_amount_invoice_currency', must be bigger than or equal to -1000000000.";
        }

        if ($this->container['vat_amount_invoice_currency'] === null) {
            $invalidProperties[] = "'vat_amount_invoice_currency' can't be null";
        }
        if (($this->container['vat_amount_invoice_currency'] > 1000000000)) {
            $invalidProperties[] = "invalid value for 'vat_amount_invoice_currency', must be smaller than or equal to 1000000000.";
        }

        if (($this->container['vat_amount_invoice_currency'] < -1000000000)) {
            $invalidProperties[] = "invalid value for 'vat_amount_invoice_currency', must be bigger than or equal to -1000000000.";
        }

        if ($this->container['voucher_id'] === null) {
            $invalidProperties[] = "'voucher_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Max length: 3 characters
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerLedgerItemApi., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CustomerLedgerItemApi., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return double
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param double $currency_rate currency_rate
     *
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets currency_rate_unit
     *
     * @return int
     */
    public function getCurrencyRateUnit()
    {
        return $this->container['currency_rate_unit'];
    }

    /**
     * Sets currency_rate_unit
     *
     * @param int $currency_rate_unit currency_rate_unit
     *
     * @return $this
     */
    public function setCurrencyRateUnit($currency_rate_unit)
    {
        $this->container['currency_rate_unit'] = $currency_rate_unit;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Source: Get from /v2/customers.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param int $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets is_credit_invoice
     *
     * @return bool
     */
    public function getIsCreditInvoice()
    {
        return $this->container['is_credit_invoice'];
    }

    /**
     * Sets is_credit_invoice
     *
     * @param bool $is_credit_invoice is_credit_invoice
     *
     * @return $this
     */
    public function setIsCreditInvoice($is_credit_invoice)
    {
        $this->container['is_credit_invoice'] = $is_credit_invoice;

        return $this;
    }

    /**
     * Gets payment_reference_number
     *
     * @return string
     */
    public function getPaymentReferenceNumber()
    {
        return $this->container['payment_reference_number'];
    }

    /**
     * Sets payment_reference_number
     *
     * @param string $payment_reference_number Purpose: Empty if UsesPaymentReferenceNumber not activated on the company. Use /v2/companysettings.
     *
     * @return $this
     */
    public function setPaymentReferenceNumber($payment_reference_number)
    {
        if (!is_null($payment_reference_number) && (mb_strlen($payment_reference_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $payment_reference_number when calling CustomerLedgerItemApi., must be smaller than or equal to 50.');
        }
        if (!is_null($payment_reference_number) && (mb_strlen($payment_reference_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_reference_number when calling CustomerLedgerItemApi., must be bigger than or equal to 0.');
        }

        $this->container['payment_reference_number'] = $payment_reference_number;

        return $this;
    }

    /**
     * Gets remaining_amount_invoice_currency
     *
     * @return double
     */
    public function getRemainingAmountInvoiceCurrency()
    {
        return $this->container['remaining_amount_invoice_currency'];
    }

    /**
     * Sets remaining_amount_invoice_currency
     *
     * @param double $remaining_amount_invoice_currency remaining_amount_invoice_currency
     *
     * @return $this
     */
    public function setRemainingAmountInvoiceCurrency($remaining_amount_invoice_currency)
    {

        if (($remaining_amount_invoice_currency > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $remaining_amount_invoice_currency when calling CustomerLedgerItemApi., must be smaller than or equal to 1000000000.');
        }
        if (($remaining_amount_invoice_currency < -1000000000)) {
            throw new \InvalidArgumentException('invalid value for $remaining_amount_invoice_currency when calling CustomerLedgerItemApi., must be bigger than or equal to -1000000000.');
        }

        $this->container['remaining_amount_invoice_currency'] = $remaining_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets roundings_amount_invoice_currency
     *
     * @return double
     */
    public function getRoundingsAmountInvoiceCurrency()
    {
        return $this->container['roundings_amount_invoice_currency'];
    }

    /**
     * Sets roundings_amount_invoice_currency
     *
     * @param double $roundings_amount_invoice_currency roundings_amount_invoice_currency
     *
     * @return $this
     */
    public function setRoundingsAmountInvoiceCurrency($roundings_amount_invoice_currency)
    {

        if (($roundings_amount_invoice_currency > 1)) {
            throw new \InvalidArgumentException('invalid value for $roundings_amount_invoice_currency when calling CustomerLedgerItemApi., must be smaller than or equal to 1.');
        }
        if (($roundings_amount_invoice_currency < -1)) {
            throw new \InvalidArgumentException('invalid value for $roundings_amount_invoice_currency when calling CustomerLedgerItemApi., must be bigger than or equal to -1.');
        }

        $this->container['roundings_amount_invoice_currency'] = $roundings_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets total_amount_invoice_currency
     *
     * @return double
     */
    public function getTotalAmountInvoiceCurrency()
    {
        return $this->container['total_amount_invoice_currency'];
    }

    /**
     * Sets total_amount_invoice_currency
     *
     * @param double $total_amount_invoice_currency total_amount_invoice_currency
     *
     * @return $this
     */
    public function setTotalAmountInvoiceCurrency($total_amount_invoice_currency)
    {

        if (($total_amount_invoice_currency > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $total_amount_invoice_currency when calling CustomerLedgerItemApi., must be smaller than or equal to 1000000000.');
        }
        if (($total_amount_invoice_currency < -1000000000)) {
            throw new \InvalidArgumentException('invalid value for $total_amount_invoice_currency when calling CustomerLedgerItemApi., must be bigger than or equal to -1000000000.');
        }

        $this->container['total_amount_invoice_currency'] = $total_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets vat_amount_invoice_currency
     *
     * @return double
     */
    public function getVatAmountInvoiceCurrency()
    {
        return $this->container['vat_amount_invoice_currency'];
    }

    /**
     * Sets vat_amount_invoice_currency
     *
     * @param double $vat_amount_invoice_currency vat_amount_invoice_currency
     *
     * @return $this
     */
    public function setVatAmountInvoiceCurrency($vat_amount_invoice_currency)
    {

        if (($vat_amount_invoice_currency > 1000000000)) {
            throw new \InvalidArgumentException('invalid value for $vat_amount_invoice_currency when calling CustomerLedgerItemApi., must be smaller than or equal to 1000000000.');
        }
        if (($vat_amount_invoice_currency < -1000000000)) {
            throw new \InvalidArgumentException('invalid value for $vat_amount_invoice_currency when calling CustomerLedgerItemApi., must be bigger than or equal to -1000000000.');
        }

        $this->container['vat_amount_invoice_currency'] = $vat_amount_invoice_currency;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id Source: Get from /v2/vouchers/{fiscalyearid}.
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


