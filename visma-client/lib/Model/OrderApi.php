<?php
/**
 * OrderApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'amount' => 'double',
        'customer_id' => 'string',
        'currency_code' => 'string',
        'created_utc' => '\DateTime',
        'vat_amount' => 'double',
        'roundings_amount' => 'double',
        'delivered_amount' => 'double',
        'delivered_vat_amount' => 'double',
        'delivered_roundings_amount' => 'double',
        'delivery_customer_name' => 'string',
        'delivery_address1' => 'string',
        'delivery_address2' => 'string',
        'delivery_postal_code' => 'string',
        'delivery_city' => 'string',
        'delivery_country_code' => 'string',
        'your_reference' => 'string',
        'our_reference' => 'string',
        'invoice_address1' => 'string',
        'invoice_address2' => 'string',
        'invoice_city' => 'string',
        'invoice_country_code' => 'string',
        'invoice_customer_name' => 'string',
        'invoice_postal_code' => 'string',
        'delivery_method_name' => 'string',
        'delivery_method_code' => 'string',
        'delivery_term_name' => 'string',
        'delivery_term_code' => 'string',
        'eu_third_party' => 'bool',
        'customer_is_private_person' => 'bool',
        'order_date' => '\DateTime',
        'status' => 'int',
        'number' => 'int',
        'modified_utc' => '\DateTime',
        'delivery_date' => '\DateTime',
        'house_work_amount' => 'double',
        'house_work_automatic_distribution' => 'bool',
        'house_work_corporate_identity_number' => 'string',
        'house_work_property_name' => 'string',
        'rows' => '\Struqtur\VismaEAccounting\Model\OrderRowApi[]',
        'shipped_date_time' => '\DateTime',
        'rot_reduced_invoicing_type' => 'int',
        'rot_property_type' => 'int',
        'persons' => '\Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]',
        'reverse_charge_on_construction_services' => 'bool',
        'uses_green_technology' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'amount' => 'double',
        'customer_id' => 'uuid',
        'currency_code' => null,
        'created_utc' => 'date-time',
        'vat_amount' => 'double',
        'roundings_amount' => 'double',
        'delivered_amount' => 'double',
        'delivered_vat_amount' => 'double',
        'delivered_roundings_amount' => 'double',
        'delivery_customer_name' => null,
        'delivery_address1' => null,
        'delivery_address2' => null,
        'delivery_postal_code' => null,
        'delivery_city' => null,
        'delivery_country_code' => null,
        'your_reference' => null,
        'our_reference' => null,
        'invoice_address1' => null,
        'invoice_address2' => null,
        'invoice_city' => null,
        'invoice_country_code' => null,
        'invoice_customer_name' => null,
        'invoice_postal_code' => null,
        'delivery_method_name' => null,
        'delivery_method_code' => null,
        'delivery_term_name' => null,
        'delivery_term_code' => null,
        'eu_third_party' => null,
        'customer_is_private_person' => null,
        'order_date' => 'date-time',
        'status' => 'int32',
        'number' => 'int32',
        'modified_utc' => 'date-time',
        'delivery_date' => 'date-time',
        'house_work_amount' => 'double',
        'house_work_automatic_distribution' => null,
        'house_work_corporate_identity_number' => null,
        'house_work_property_name' => null,
        'rows' => null,
        'shipped_date_time' => 'date-time',
        'rot_reduced_invoicing_type' => 'int32',
        'rot_property_type' => 'int32',
        'persons' => null,
        'reverse_charge_on_construction_services' => null,
        'uses_green_technology' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'amount' => 'Amount',
        'customer_id' => 'CustomerId',
        'currency_code' => 'CurrencyCode',
        'created_utc' => 'CreatedUtc',
        'vat_amount' => 'VatAmount',
        'roundings_amount' => 'RoundingsAmount',
        'delivered_amount' => 'DeliveredAmount',
        'delivered_vat_amount' => 'DeliveredVatAmount',
        'delivered_roundings_amount' => 'DeliveredRoundingsAmount',
        'delivery_customer_name' => 'DeliveryCustomerName',
        'delivery_address1' => 'DeliveryAddress1',
        'delivery_address2' => 'DeliveryAddress2',
        'delivery_postal_code' => 'DeliveryPostalCode',
        'delivery_city' => 'DeliveryCity',
        'delivery_country_code' => 'DeliveryCountryCode',
        'your_reference' => 'YourReference',
        'our_reference' => 'OurReference',
        'invoice_address1' => 'InvoiceAddress1',
        'invoice_address2' => 'InvoiceAddress2',
        'invoice_city' => 'InvoiceCity',
        'invoice_country_code' => 'InvoiceCountryCode',
        'invoice_customer_name' => 'InvoiceCustomerName',
        'invoice_postal_code' => 'InvoicePostalCode',
        'delivery_method_name' => 'DeliveryMethodName',
        'delivery_method_code' => 'DeliveryMethodCode',
        'delivery_term_name' => 'DeliveryTermName',
        'delivery_term_code' => 'DeliveryTermCode',
        'eu_third_party' => 'EuThirdParty',
        'customer_is_private_person' => 'CustomerIsPrivatePerson',
        'order_date' => 'OrderDate',
        'status' => 'Status',
        'number' => 'Number',
        'modified_utc' => 'ModifiedUtc',
        'delivery_date' => 'DeliveryDate',
        'house_work_amount' => 'HouseWorkAmount',
        'house_work_automatic_distribution' => 'HouseWorkAutomaticDistribution',
        'house_work_corporate_identity_number' => 'HouseWorkCorporateIdentityNumber',
        'house_work_property_name' => 'HouseWorkPropertyName',
        'rows' => 'Rows',
        'shipped_date_time' => 'ShippedDateTime',
        'rot_reduced_invoicing_type' => 'RotReducedInvoicingType',
        'rot_property_type' => 'RotPropertyType',
        'persons' => 'Persons',
        'reverse_charge_on_construction_services' => 'ReverseChargeOnConstructionServices',
        'uses_green_technology' => 'UsesGreenTechnology'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'amount' => 'setAmount',
        'customer_id' => 'setCustomerId',
        'currency_code' => 'setCurrencyCode',
        'created_utc' => 'setCreatedUtc',
        'vat_amount' => 'setVatAmount',
        'roundings_amount' => 'setRoundingsAmount',
        'delivered_amount' => 'setDeliveredAmount',
        'delivered_vat_amount' => 'setDeliveredVatAmount',
        'delivered_roundings_amount' => 'setDeliveredRoundingsAmount',
        'delivery_customer_name' => 'setDeliveryCustomerName',
        'delivery_address1' => 'setDeliveryAddress1',
        'delivery_address2' => 'setDeliveryAddress2',
        'delivery_postal_code' => 'setDeliveryPostalCode',
        'delivery_city' => 'setDeliveryCity',
        'delivery_country_code' => 'setDeliveryCountryCode',
        'your_reference' => 'setYourReference',
        'our_reference' => 'setOurReference',
        'invoice_address1' => 'setInvoiceAddress1',
        'invoice_address2' => 'setInvoiceAddress2',
        'invoice_city' => 'setInvoiceCity',
        'invoice_country_code' => 'setInvoiceCountryCode',
        'invoice_customer_name' => 'setInvoiceCustomerName',
        'invoice_postal_code' => 'setInvoicePostalCode',
        'delivery_method_name' => 'setDeliveryMethodName',
        'delivery_method_code' => 'setDeliveryMethodCode',
        'delivery_term_name' => 'setDeliveryTermName',
        'delivery_term_code' => 'setDeliveryTermCode',
        'eu_third_party' => 'setEuThirdParty',
        'customer_is_private_person' => 'setCustomerIsPrivatePerson',
        'order_date' => 'setOrderDate',
        'status' => 'setStatus',
        'number' => 'setNumber',
        'modified_utc' => 'setModifiedUtc',
        'delivery_date' => 'setDeliveryDate',
        'house_work_amount' => 'setHouseWorkAmount',
        'house_work_automatic_distribution' => 'setHouseWorkAutomaticDistribution',
        'house_work_corporate_identity_number' => 'setHouseWorkCorporateIdentityNumber',
        'house_work_property_name' => 'setHouseWorkPropertyName',
        'rows' => 'setRows',
        'shipped_date_time' => 'setShippedDateTime',
        'rot_reduced_invoicing_type' => 'setRotReducedInvoicingType',
        'rot_property_type' => 'setRotPropertyType',
        'persons' => 'setPersons',
        'reverse_charge_on_construction_services' => 'setReverseChargeOnConstructionServices',
        'uses_green_technology' => 'setUsesGreenTechnology'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'amount' => 'getAmount',
        'customer_id' => 'getCustomerId',
        'currency_code' => 'getCurrencyCode',
        'created_utc' => 'getCreatedUtc',
        'vat_amount' => 'getVatAmount',
        'roundings_amount' => 'getRoundingsAmount',
        'delivered_amount' => 'getDeliveredAmount',
        'delivered_vat_amount' => 'getDeliveredVatAmount',
        'delivered_roundings_amount' => 'getDeliveredRoundingsAmount',
        'delivery_customer_name' => 'getDeliveryCustomerName',
        'delivery_address1' => 'getDeliveryAddress1',
        'delivery_address2' => 'getDeliveryAddress2',
        'delivery_postal_code' => 'getDeliveryPostalCode',
        'delivery_city' => 'getDeliveryCity',
        'delivery_country_code' => 'getDeliveryCountryCode',
        'your_reference' => 'getYourReference',
        'our_reference' => 'getOurReference',
        'invoice_address1' => 'getInvoiceAddress1',
        'invoice_address2' => 'getInvoiceAddress2',
        'invoice_city' => 'getInvoiceCity',
        'invoice_country_code' => 'getInvoiceCountryCode',
        'invoice_customer_name' => 'getInvoiceCustomerName',
        'invoice_postal_code' => 'getInvoicePostalCode',
        'delivery_method_name' => 'getDeliveryMethodName',
        'delivery_method_code' => 'getDeliveryMethodCode',
        'delivery_term_name' => 'getDeliveryTermName',
        'delivery_term_code' => 'getDeliveryTermCode',
        'eu_third_party' => 'getEuThirdParty',
        'customer_is_private_person' => 'getCustomerIsPrivatePerson',
        'order_date' => 'getOrderDate',
        'status' => 'getStatus',
        'number' => 'getNumber',
        'modified_utc' => 'getModifiedUtc',
        'delivery_date' => 'getDeliveryDate',
        'house_work_amount' => 'getHouseWorkAmount',
        'house_work_automatic_distribution' => 'getHouseWorkAutomaticDistribution',
        'house_work_corporate_identity_number' => 'getHouseWorkCorporateIdentityNumber',
        'house_work_property_name' => 'getHouseWorkPropertyName',
        'rows' => 'getRows',
        'shipped_date_time' => 'getShippedDateTime',
        'rot_reduced_invoicing_type' => 'getRotReducedInvoicingType',
        'rot_property_type' => 'getRotPropertyType',
        'persons' => 'getPersons',
        'reverse_charge_on_construction_services' => 'getReverseChargeOnConstructionServices',
        'uses_green_technology' => 'getUsesGreenTechnology'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_1 = 1;
    const STATUS_2 = 2;
    const STATUS_3 = 3;
    const STATUS_4 = 4;
    const ROT_REDUCED_INVOICING_TYPE_0 = 0;
    const ROT_REDUCED_INVOICING_TYPE_1 = 1;
    const ROT_REDUCED_INVOICING_TYPE_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_1,
            self::STATUS_2,
            self::STATUS_3,
            self::STATUS_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRotReducedInvoicingTypeAllowableValues()
    {
        return [
            self::ROT_REDUCED_INVOICING_TYPE_0,
            self::ROT_REDUCED_INVOICING_TYPE_1,
            self::ROT_REDUCED_INVOICING_TYPE_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['created_utc'] = isset($data['created_utc']) ? $data['created_utc'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['roundings_amount'] = isset($data['roundings_amount']) ? $data['roundings_amount'] : null;
        $this->container['delivered_amount'] = isset($data['delivered_amount']) ? $data['delivered_amount'] : null;
        $this->container['delivered_vat_amount'] = isset($data['delivered_vat_amount']) ? $data['delivered_vat_amount'] : null;
        $this->container['delivered_roundings_amount'] = isset($data['delivered_roundings_amount']) ? $data['delivered_roundings_amount'] : null;
        $this->container['delivery_customer_name'] = isset($data['delivery_customer_name']) ? $data['delivery_customer_name'] : null;
        $this->container['delivery_address1'] = isset($data['delivery_address1']) ? $data['delivery_address1'] : null;
        $this->container['delivery_address2'] = isset($data['delivery_address2']) ? $data['delivery_address2'] : null;
        $this->container['delivery_postal_code'] = isset($data['delivery_postal_code']) ? $data['delivery_postal_code'] : null;
        $this->container['delivery_city'] = isset($data['delivery_city']) ? $data['delivery_city'] : null;
        $this->container['delivery_country_code'] = isset($data['delivery_country_code']) ? $data['delivery_country_code'] : null;
        $this->container['your_reference'] = isset($data['your_reference']) ? $data['your_reference'] : null;
        $this->container['our_reference'] = isset($data['our_reference']) ? $data['our_reference'] : null;
        $this->container['invoice_address1'] = isset($data['invoice_address1']) ? $data['invoice_address1'] : null;
        $this->container['invoice_address2'] = isset($data['invoice_address2']) ? $data['invoice_address2'] : null;
        $this->container['invoice_city'] = isset($data['invoice_city']) ? $data['invoice_city'] : null;
        $this->container['invoice_country_code'] = isset($data['invoice_country_code']) ? $data['invoice_country_code'] : null;
        $this->container['invoice_customer_name'] = isset($data['invoice_customer_name']) ? $data['invoice_customer_name'] : null;
        $this->container['invoice_postal_code'] = isset($data['invoice_postal_code']) ? $data['invoice_postal_code'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['delivery_method_code'] = isset($data['delivery_method_code']) ? $data['delivery_method_code'] : null;
        $this->container['delivery_term_name'] = isset($data['delivery_term_name']) ? $data['delivery_term_name'] : null;
        $this->container['delivery_term_code'] = isset($data['delivery_term_code']) ? $data['delivery_term_code'] : null;
        $this->container['eu_third_party'] = isset($data['eu_third_party']) ? $data['eu_third_party'] : null;
        $this->container['customer_is_private_person'] = isset($data['customer_is_private_person']) ? $data['customer_is_private_person'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['modified_utc'] = isset($data['modified_utc']) ? $data['modified_utc'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['house_work_amount'] = isset($data['house_work_amount']) ? $data['house_work_amount'] : null;
        $this->container['house_work_automatic_distribution'] = isset($data['house_work_automatic_distribution']) ? $data['house_work_automatic_distribution'] : null;
        $this->container['house_work_corporate_identity_number'] = isset($data['house_work_corporate_identity_number']) ? $data['house_work_corporate_identity_number'] : null;
        $this->container['house_work_property_name'] = isset($data['house_work_property_name']) ? $data['house_work_property_name'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
        $this->container['shipped_date_time'] = isset($data['shipped_date_time']) ? $data['shipped_date_time'] : null;
        $this->container['rot_reduced_invoicing_type'] = isset($data['rot_reduced_invoicing_type']) ? $data['rot_reduced_invoicing_type'] : null;
        $this->container['rot_property_type'] = isset($data['rot_property_type']) ? $data['rot_property_type'] : null;
        $this->container['persons'] = isset($data['persons']) ? $data['persons'] : null;
        $this->container['reverse_charge_on_construction_services'] = isset($data['reverse_charge_on_construction_services']) ? $data['reverse_charge_on_construction_services'] : null;
        $this->container['uses_green_technology'] = isset($data['uses_green_technology']) ? $data['uses_green_technology'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_customer_name']) && (mb_strlen($this->container['delivery_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address1']) && (mb_strlen($this->container['delivery_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_address2']) && (mb_strlen($this->container['delivery_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_postal_code']) && (mb_strlen($this->container['delivery_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_city']) && (mb_strlen($this->container['delivery_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_country_code']) && (mb_strlen($this->container['delivery_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['your_reference']) && (mb_strlen($this->container['your_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'your_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['our_reference']) && (mb_strlen($this->container['our_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'our_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address1']) && (mb_strlen($this->container['invoice_address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_address2']) && (mb_strlen($this->container['invoice_address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['invoice_country_code']) && (mb_strlen($this->container['invoice_country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_country_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_customer_name']) && (mb_strlen($this->container['invoice_customer_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'invoice_customer_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_customer_name']) && (mb_strlen($this->container['invoice_customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['invoice_postal_code']) && (mb_strlen($this->container['invoice_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_method_name']) && (mb_strlen($this->container['delivery_method_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_method_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_method_name']) && (mb_strlen($this->container['delivery_method_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_method_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_method_code']) && (mb_strlen($this->container['delivery_method_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'delivery_method_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['delivery_method_code']) && (mb_strlen($this->container['delivery_method_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_method_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_term_name']) && (mb_strlen($this->container['delivery_term_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'delivery_term_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['delivery_term_name']) && (mb_strlen($this->container['delivery_term_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_term_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_term_code']) && (mb_strlen($this->container['delivery_term_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'delivery_term_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['delivery_term_code']) && (mb_strlen($this->container['delivery_term_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_term_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['eu_third_party'] === null) {
            $invalidProperties[] = "'eu_third_party' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (($this->container['status'] > 4)) {
            $invalidProperties[] = "invalid value for 'status', must be smaller than or equal to 4.";
        }

        if (($this->container['status'] < 1)) {
            $invalidProperties[] = "invalid value for 'status', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['house_work_corporate_identity_number']) && (mb_strlen($this->container['house_work_corporate_identity_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'house_work_corporate_identity_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['house_work_corporate_identity_number']) && (mb_strlen($this->container['house_work_corporate_identity_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'house_work_corporate_identity_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['house_work_property_name']) && (mb_strlen($this->container['house_work_property_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'house_work_property_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['house_work_property_name']) && (mb_strlen($this->container['house_work_property_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'house_work_property_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['rot_reduced_invoicing_type'] === null) {
            $invalidProperties[] = "'rot_reduced_invoicing_type' can't be null";
        }
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!is_null($this->container['rot_reduced_invoicing_type']) && !in_array($this->container['rot_reduced_invoicing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reverse_charge_on_construction_services'] === null) {
            $invalidProperties[] = "'reverse_charge_on_construction_services' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Purpose: Unique Id provided by eAccounting
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Format: 2 decimals
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code Max length: 3 characters
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling OrderApi., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets created_utc
     *
     * @return \DateTime
     */
    public function getCreatedUtc()
    {
        return $this->container['created_utc'];
    }

    /**
     * Sets created_utc
     *
     * @param \DateTime $created_utc created_utc
     *
     * @return $this
     */
    public function setCreatedUtc($created_utc)
    {
        $this->container['created_utc'] = $created_utc;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return double
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param double $vat_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets roundings_amount
     *
     * @return double
     */
    public function getRoundingsAmount()
    {
        return $this->container['roundings_amount'];
    }

    /**
     * Sets roundings_amount
     *
     * @param double $roundings_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setRoundingsAmount($roundings_amount)
    {
        $this->container['roundings_amount'] = $roundings_amount;

        return $this;
    }

    /**
     * Gets delivered_amount
     *
     * @return double
     */
    public function getDeliveredAmount()
    {
        return $this->container['delivered_amount'];
    }

    /**
     * Sets delivered_amount
     *
     * @param double $delivered_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setDeliveredAmount($delivered_amount)
    {
        $this->container['delivered_amount'] = $delivered_amount;

        return $this;
    }

    /**
     * Gets delivered_vat_amount
     *
     * @return double
     */
    public function getDeliveredVatAmount()
    {
        return $this->container['delivered_vat_amount'];
    }

    /**
     * Sets delivered_vat_amount
     *
     * @param double $delivered_vat_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setDeliveredVatAmount($delivered_vat_amount)
    {
        $this->container['delivered_vat_amount'] = $delivered_vat_amount;

        return $this;
    }

    /**
     * Gets delivered_roundings_amount
     *
     * @return double
     */
    public function getDeliveredRoundingsAmount()
    {
        return $this->container['delivered_roundings_amount'];
    }

    /**
     * Sets delivered_roundings_amount
     *
     * @param double $delivered_roundings_amount Format: 2 decimals
     *
     * @return $this
     */
    public function setDeliveredRoundingsAmount($delivered_roundings_amount)
    {
        $this->container['delivered_roundings_amount'] = $delivered_roundings_amount;

        return $this;
    }

    /**
     * Gets delivery_customer_name
     *
     * @return string
     */
    public function getDeliveryCustomerName()
    {
        return $this->container['delivery_customer_name'];
    }

    /**
     * Sets delivery_customer_name
     *
     * @param string $delivery_customer_name Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCustomerName($delivery_customer_name)
    {
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_customer_name) && (mb_strlen($delivery_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_customer_name when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_customer_name'] = $delivery_customer_name;

        return $this;
    }

    /**
     * Gets delivery_address1
     *
     * @return string
     */
    public function getDeliveryAddress1()
    {
        return $this->container['delivery_address1'];
    }

    /**
     * Sets delivery_address1
     *
     * @param string $delivery_address1 Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryAddress1($delivery_address1)
    {
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address1) && (mb_strlen($delivery_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address1 when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address1'] = $delivery_address1;

        return $this;
    }

    /**
     * Gets delivery_address2
     *
     * @return string
     */
    public function getDeliveryAddress2()
    {
        return $this->container['delivery_address2'];
    }

    /**
     * Sets delivery_address2
     *
     * @param string $delivery_address2 Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryAddress2($delivery_address2)
    {
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_address2) && (mb_strlen($delivery_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_address2 when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_address2'] = $delivery_address2;

        return $this;
    }

    /**
     * Gets delivery_postal_code
     *
     * @return string
     */
    public function getDeliveryPostalCode()
    {
        return $this->container['delivery_postal_code'];
    }

    /**
     * Sets delivery_postal_code
     *
     * @param string $delivery_postal_code Max length: 10 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryPostalCode($delivery_postal_code)
    {
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling OrderApi., must be smaller than or equal to 10.');
        }
        if (!is_null($delivery_postal_code) && (mb_strlen($delivery_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_postal_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_postal_code'] = $delivery_postal_code;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string $delivery_city Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCity($delivery_city)
    {
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_city) && (mb_strlen($delivery_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_city when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_country_code
     *
     * @return string
     */
    public function getDeliveryCountryCode()
    {
        return $this->container['delivery_country_code'];
    }

    /**
     * Sets delivery_country_code
     *
     * @param string $delivery_country_code Max length: 2 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setDeliveryCountryCode($delivery_country_code)
    {
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling OrderApi., must be smaller than or equal to 2.');
        }
        if (!is_null($delivery_country_code) && (mb_strlen($delivery_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_country_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_country_code'] = $delivery_country_code;

        return $this;
    }

    /**
     * Gets your_reference
     *
     * @return string
     */
    public function getYourReference()
    {
        return $this->container['your_reference'];
    }

    /**
     * Sets your_reference
     *
     * @param string $your_reference Max length: 50 characters
     *
     * @return $this
     */
    public function setYourReference($your_reference)
    {
        if (!is_null($your_reference) && (mb_strlen($your_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($your_reference) && (mb_strlen($your_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $your_reference when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['your_reference'] = $your_reference;

        return $this;
    }

    /**
     * Gets our_reference
     *
     * @return string
     */
    public function getOurReference()
    {
        return $this->container['our_reference'];
    }

    /**
     * Sets our_reference
     *
     * @param string $our_reference Max length: 50 characters
     *
     * @return $this
     */
    public function setOurReference($our_reference)
    {
        if (!is_null($our_reference) && (mb_strlen($our_reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($our_reference) && (mb_strlen($our_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $our_reference when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['our_reference'] = $our_reference;

        return $this;
    }

    /**
     * Gets invoice_address1
     *
     * @return string
     */
    public function getInvoiceAddress1()
    {
        return $this->container['invoice_address1'];
    }

    /**
     * Sets invoice_address1
     *
     * @param string $invoice_address1 Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceAddress1($invoice_address1)
    {
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address1) && (mb_strlen($invoice_address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address1 when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address1'] = $invoice_address1;

        return $this;
    }

    /**
     * Gets invoice_address2
     *
     * @return string
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoice_address2'];
    }

    /**
     * Sets invoice_address2
     *
     * @param string $invoice_address2 Max length: 50 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceAddress2($invoice_address2)
    {
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_address2) && (mb_strlen($invoice_address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_address2 when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_address2'] = $invoice_address2;

        return $this;
    }

    /**
     * Gets invoice_city
     *
     * @return string
     */
    public function getInvoiceCity()
    {
        return $this->container['invoice_city'];
    }

    /**
     * Sets invoice_city
     *
     * @param string $invoice_city Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceCity($invoice_city)
    {
        $this->container['invoice_city'] = $invoice_city;

        return $this;
    }

    /**
     * Gets invoice_country_code
     *
     * @return string
     */
    public function getInvoiceCountryCode()
    {
        return $this->container['invoice_country_code'];
    }

    /**
     * Sets invoice_country_code
     *
     * @param string $invoice_country_code Max length: 2 characters  The value on the selected customer
     *
     * @return $this
     */
    public function setInvoiceCountryCode($invoice_country_code)
    {
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling OrderApi., must be smaller than or equal to 2.');
        }
        if (!is_null($invoice_country_code) && (mb_strlen($invoice_country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_country_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_country_code'] = $invoice_country_code;

        return $this;
    }

    /**
     * Gets invoice_customer_name
     *
     * @return string
     */
    public function getInvoiceCustomerName()
    {
        return $this->container['invoice_customer_name'];
    }

    /**
     * Sets invoice_customer_name
     *
     * @param string $invoice_customer_name Readonly  The selected customer's name
     *
     * @return $this
     */
    public function setInvoiceCustomerName($invoice_customer_name)
    {
        if (!is_null($invoice_customer_name) && (mb_strlen($invoice_customer_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $invoice_customer_name when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($invoice_customer_name) && (mb_strlen($invoice_customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_customer_name when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_customer_name'] = $invoice_customer_name;

        return $this;
    }

    /**
     * Gets invoice_postal_code
     *
     * @return string
     */
    public function getInvoicePostalCode()
    {
        return $this->container['invoice_postal_code'];
    }

    /**
     * Sets invoice_postal_code
     *
     * @param string $invoice_postal_code Max length: 10 characters  Default: The value on the selected customer
     *
     * @return $this
     */
    public function setInvoicePostalCode($invoice_postal_code)
    {
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling OrderApi., must be smaller than or equal to 10.');
        }
        if (!is_null($invoice_postal_code) && (mb_strlen($invoice_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoice_postal_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['invoice_postal_code'] = $invoice_postal_code;

        return $this;
    }

    /**
     * Gets delivery_method_name
     *
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     *
     * @param string $delivery_method_name Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        if (!is_null($delivery_method_name) && (mb_strlen($delivery_method_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_name when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_method_name) && (mb_strlen($delivery_method_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_name when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets delivery_method_code
     *
     * @return string
     */
    public function getDeliveryMethodCode()
    {
        return $this->container['delivery_method_code'];
    }

    /**
     * Sets delivery_method_code
     *
     * @param string $delivery_method_code Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryMethodCode($delivery_method_code)
    {
        if (!is_null($delivery_method_code) && (mb_strlen($delivery_method_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_code when calling OrderApi., must be smaller than or equal to 20.');
        }
        if (!is_null($delivery_method_code) && (mb_strlen($delivery_method_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_method_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_method_code'] = $delivery_method_code;

        return $this;
    }

    /**
     * Gets delivery_term_name
     *
     * @return string
     */
    public function getDeliveryTermName()
    {
        return $this->container['delivery_term_name'];
    }

    /**
     * Sets delivery_term_name
     *
     * @param string $delivery_term_name Max length: 50 characters
     *
     * @return $this
     */
    public function setDeliveryTermName($delivery_term_name)
    {
        if (!is_null($delivery_term_name) && (mb_strlen($delivery_term_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_name when calling OrderApi., must be smaller than or equal to 50.');
        }
        if (!is_null($delivery_term_name) && (mb_strlen($delivery_term_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_name when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_term_name'] = $delivery_term_name;

        return $this;
    }

    /**
     * Gets delivery_term_code
     *
     * @return string
     */
    public function getDeliveryTermCode()
    {
        return $this->container['delivery_term_code'];
    }

    /**
     * Sets delivery_term_code
     *
     * @param string $delivery_term_code Max length: 20 characters
     *
     * @return $this
     */
    public function setDeliveryTermCode($delivery_term_code)
    {
        if (!is_null($delivery_term_code) && (mb_strlen($delivery_term_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_code when calling OrderApi., must be smaller than or equal to 20.');
        }
        if (!is_null($delivery_term_code) && (mb_strlen($delivery_term_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_term_code when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['delivery_term_code'] = $delivery_term_code;

        return $this;
    }

    /**
     * Gets eu_third_party
     *
     * @return bool
     */
    public function getEuThirdParty()
    {
        return $this->container['eu_third_party'];
    }

    /**
     * Sets eu_third_party
     *
     * @param bool $eu_third_party eu_third_party
     *
     * @return $this
     */
    public function setEuThirdParty($eu_third_party)
    {
        $this->container['eu_third_party'] = $eu_third_party;

        return $this;
    }

    /**
     * Gets customer_is_private_person
     *
     * @return bool
     */
    public function getCustomerIsPrivatePerson()
    {
        return $this->container['customer_is_private_person'];
    }

    /**
     * Sets customer_is_private_person
     *
     * @param bool $customer_is_private_person Purpose: This property will be set automatically depending on it's value which is set on the customer level
     *
     * @return $this
     */
    public function setCustomerIsPrivatePerson($customer_is_private_person)
    {
        $this->container['customer_is_private_person'] = $customer_is_private_person;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date Format: YYYY-MM-DD
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status 1 = Draft, 2 = Ongoing, 3 = Shipped, 4 = Invoiced
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (($status > 4)) {
            throw new \InvalidArgumentException('invalid value for $status when calling OrderApi., must be smaller than or equal to 4.');
        }
        if (($status < 1)) {
            throw new \InvalidArgumentException('invalid value for $status when calling OrderApi., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Purpose: This property will be set automatically upon creation of an order
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets modified_utc
     *
     * @return \DateTime
     */
    public function getModifiedUtc()
    {
        return $this->container['modified_utc'];
    }

    /**
     * Sets modified_utc
     *
     * @param \DateTime $modified_utc modified_utc
     *
     * @return $this
     */
    public function setModifiedUtc($modified_utc)
    {
        $this->container['modified_utc'] = $modified_utc;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date Format: YYYY-MM-DD.   Default: null
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets house_work_amount
     *
     * @return double
     */
    public function getHouseWorkAmount()
    {
        return $this->container['house_work_amount'];
    }

    /**
     * Sets house_work_amount
     *
     * @param double $house_work_amount house_work_amount
     *
     * @return $this
     */
    public function setHouseWorkAmount($house_work_amount)
    {
        $this->container['house_work_amount'] = $house_work_amount;

        return $this;
    }

    /**
     * Gets house_work_automatic_distribution
     *
     * @return bool
     */
    public function getHouseWorkAutomaticDistribution()
    {
        return $this->container['house_work_automatic_distribution'];
    }

    /**
     * Sets house_work_automatic_distribution
     *
     * @param bool $house_work_automatic_distribution house_work_automatic_distribution
     *
     * @return $this
     */
    public function setHouseWorkAutomaticDistribution($house_work_automatic_distribution)
    {
        $this->container['house_work_automatic_distribution'] = $house_work_automatic_distribution;

        return $this;
    }

    /**
     * Gets house_work_corporate_identity_number
     *
     * @return string
     */
    public function getHouseWorkCorporateIdentityNumber()
    {
        return $this->container['house_work_corporate_identity_number'];
    }

    /**
     * Sets house_work_corporate_identity_number
     *
     * @param string $house_work_corporate_identity_number Max length: 20 characters
     *
     * @return $this
     */
    public function setHouseWorkCorporateIdentityNumber($house_work_corporate_identity_number)
    {
        if (!is_null($house_work_corporate_identity_number) && (mb_strlen($house_work_corporate_identity_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $house_work_corporate_identity_number when calling OrderApi., must be smaller than or equal to 20.');
        }
        if (!is_null($house_work_corporate_identity_number) && (mb_strlen($house_work_corporate_identity_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_work_corporate_identity_number when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['house_work_corporate_identity_number'] = $house_work_corporate_identity_number;

        return $this;
    }

    /**
     * Gets house_work_property_name
     *
     * @return string
     */
    public function getHouseWorkPropertyName()
    {
        return $this->container['house_work_property_name'];
    }

    /**
     * Sets house_work_property_name
     *
     * @param string $house_work_property_name Max length: 100 characters
     *
     * @return $this
     */
    public function setHouseWorkPropertyName($house_work_property_name)
    {
        if (!is_null($house_work_property_name) && (mb_strlen($house_work_property_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $house_work_property_name when calling OrderApi., must be smaller than or equal to 100.');
        }
        if (!is_null($house_work_property_name) && (mb_strlen($house_work_property_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_work_property_name when calling OrderApi., must be bigger than or equal to 0.');
        }

        $this->container['house_work_property_name'] = $house_work_property_name;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \Struqtur\VismaEAccounting\Model\OrderRowApi[]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \Struqtur\VismaEAccounting\Model\OrderRowApi[] $rows rows
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets shipped_date_time
     *
     * @return \DateTime
     */
    public function getShippedDateTime()
    {
        return $this->container['shipped_date_time'];
    }

    /**
     * Sets shipped_date_time
     *
     * @param \DateTime $shipped_date_time Format: YYYY-MM-DD.   Default: null
     *
     * @return $this
     */
    public function setShippedDateTime($shipped_date_time)
    {
        $this->container['shipped_date_time'] = $shipped_date_time;

        return $this;
    }

    /**
     * Gets rot_reduced_invoicing_type
     *
     * @return int
     */
    public function getRotReducedInvoicingType()
    {
        return $this->container['rot_reduced_invoicing_type'];
    }

    /**
     * Sets rot_reduced_invoicing_type
     *
     * @param int $rot_reduced_invoicing_type 0 = None, 1 = Rot, 2 = Rut
     *
     * @return $this
     */
    public function setRotReducedInvoicingType($rot_reduced_invoicing_type)
    {
        $allowedValues = $this->getRotReducedInvoicingTypeAllowableValues();
        if (!in_array($rot_reduced_invoicing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rot_reduced_invoicing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rot_reduced_invoicing_type'] = $rot_reduced_invoicing_type;

        return $this;
    }

    /**
     * Gets rot_property_type
     *
     * @return int
     */
    public function getRotPropertyType()
    {
        return $this->container['rot_property_type'];
    }

    /**
     * Sets rot_property_type
     *
     * @param int $rot_property_type 1 = Apartment, 2 = Property
     *
     * @return $this
     */
    public function setRotPropertyType($rot_property_type)
    {
        $this->container['rot_property_type'] = $rot_property_type;

        return $this;
    }

    /**
     * Gets persons
     *
     * @return \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[]
     */
    public function getPersons()
    {
        return $this->container['persons'];
    }

    /**
     * Sets persons
     *
     * @param \Struqtur\VismaEAccounting\Model\SalesDocumentRotRutReductionPersonApi[] $persons persons
     *
     * @return $this
     */
    public function setPersons($persons)
    {
        $this->container['persons'] = $persons;

        return $this;
    }

    /**
     * Gets reverse_charge_on_construction_services
     *
     * @return bool
     */
    public function getReverseChargeOnConstructionServices()
    {
        return $this->container['reverse_charge_on_construction_services'];
    }

    /**
     * Sets reverse_charge_on_construction_services
     *
     * @param bool $reverse_charge_on_construction_services reverse_charge_on_construction_services
     *
     * @return $this
     */
    public function setReverseChargeOnConstructionServices($reverse_charge_on_construction_services)
    {
        $this->container['reverse_charge_on_construction_services'] = $reverse_charge_on_construction_services;

        return $this;
    }

    /**
     * Gets uses_green_technology
     *
     * @return bool
     */
    public function getUsesGreenTechnology()
    {
        return $this->container['uses_green_technology'];
    }

    /**
     * Sets uses_green_technology
     *
     * @param bool $uses_green_technology Set to true if this order benefits from deduction on Green Technology.  If set to true the order must have RotReducedInvoicingType set to normal and contain at least one row with applicable deduction.
     *
     * @return $this
     */
    public function setUsesGreenTechnology($uses_green_technology)
    {
        $this->container['uses_green_technology'] = $uses_green_technology;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


