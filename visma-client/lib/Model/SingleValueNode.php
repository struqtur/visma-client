<?php
/**
 * SingleValueNode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * SingleValueNode Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleValueNode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SingleValueNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type_reference' => '\Struqtur\VismaEAccounting\Model\IEdmTypeReference',
        'kind' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type_reference' => null,
        'kind' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_reference' => 'TypeReference',
        'kind' => 'Kind'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_reference' => 'setTypeReference',
        'kind' => 'setKind'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_reference' => 'getTypeReference',
        'kind' => 'getKind'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KIND_0 = 0;
    const KIND_1 = 1;
    const KIND_2 = 2;
    const KIND_3 = 3;
    const KIND_4 = 4;
    const KIND_5 = 5;
    const KIND_6 = 6;
    const KIND_7 = 7;
    const KIND_8 = 8;
    const KIND_9 = 9;
    const KIND_10 = 10;
    const KIND_11 = 11;
    const KIND_12 = 12;
    const KIND_13 = 13;
    const KIND_14 = 14;
    const KIND_15 = 15;
    const KIND_16 = 16;
    const KIND_17 = 17;
    const KIND_18 = 18;
    const KIND_19 = 19;
    const KIND_20 = 20;
    const KIND_21 = 21;
    const KIND_22 = 22;
    const KIND_23 = 23;
    const KIND_24 = 24;
    const KIND_25 = 25;
    const KIND_26 = 26;
    const KIND_27 = 27;
    const KIND_28 = 28;
    const KIND_29 = 29;
    const KIND_30 = 30;
    const KIND_31 = 31;
    const KIND_32 = 32;
    const KIND_33 = 33;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKindAllowableValues()
    {
        return [
            self::KIND_0,
            self::KIND_1,
            self::KIND_2,
            self::KIND_3,
            self::KIND_4,
            self::KIND_5,
            self::KIND_6,
            self::KIND_7,
            self::KIND_8,
            self::KIND_9,
            self::KIND_10,
            self::KIND_11,
            self::KIND_12,
            self::KIND_13,
            self::KIND_14,
            self::KIND_15,
            self::KIND_16,
            self::KIND_17,
            self::KIND_18,
            self::KIND_19,
            self::KIND_20,
            self::KIND_21,
            self::KIND_22,
            self::KIND_23,
            self::KIND_24,
            self::KIND_25,
            self::KIND_26,
            self::KIND_27,
            self::KIND_28,
            self::KIND_29,
            self::KIND_30,
            self::KIND_31,
            self::KIND_32,
            self::KIND_33,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type_reference'] = isset($data['type_reference']) ? $data['type_reference'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($this->container['kind']) && !in_array($this->container['kind'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kind', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_reference
     *
     * @return \Struqtur\VismaEAccounting\Model\IEdmTypeReference
     */
    public function getTypeReference()
    {
        return $this->container['type_reference'];
    }

    /**
     * Sets type_reference
     *
     * @param \Struqtur\VismaEAccounting\Model\IEdmTypeReference $type_reference type_reference
     *
     * @return $this
     */
    public function setTypeReference($type_reference)
    {
        $this->container['type_reference'] = $type_reference;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return int
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param int $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $allowedValues = $this->getKindAllowableValues();
        if (!is_null($kind) && !in_array($kind, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kind', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kind'] = $kind;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


