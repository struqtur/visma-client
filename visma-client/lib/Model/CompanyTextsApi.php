<?php
/**
 * CompanyTextsApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Model;

use \ArrayAccess;
use \Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CompanyTextsApi Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyTextsApi implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyTextsApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_invoice_text_domestic' => 'string',
        'customer_invoice_text_foreign' => 'string',
        'order_text_domestic' => 'string',
        'order_text_foreign' => 'string',
        'over_due_text_domestic' => 'string',
        'over_due_text_foreign' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_invoice_text_domestic' => null,
        'customer_invoice_text_foreign' => null,
        'order_text_domestic' => null,
        'order_text_foreign' => null,
        'over_due_text_domestic' => null,
        'over_due_text_foreign' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_invoice_text_domestic' => 'CustomerInvoiceTextDomestic',
        'customer_invoice_text_foreign' => 'CustomerInvoiceTextForeign',
        'order_text_domestic' => 'OrderTextDomestic',
        'order_text_foreign' => 'OrderTextForeign',
        'over_due_text_domestic' => 'OverDueTextDomestic',
        'over_due_text_foreign' => 'OverDueTextForeign'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_invoice_text_domestic' => 'setCustomerInvoiceTextDomestic',
        'customer_invoice_text_foreign' => 'setCustomerInvoiceTextForeign',
        'order_text_domestic' => 'setOrderTextDomestic',
        'order_text_foreign' => 'setOrderTextForeign',
        'over_due_text_domestic' => 'setOverDueTextDomestic',
        'over_due_text_foreign' => 'setOverDueTextForeign'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_invoice_text_domestic' => 'getCustomerInvoiceTextDomestic',
        'customer_invoice_text_foreign' => 'getCustomerInvoiceTextForeign',
        'order_text_domestic' => 'getOrderTextDomestic',
        'order_text_foreign' => 'getOrderTextForeign',
        'over_due_text_domestic' => 'getOverDueTextDomestic',
        'over_due_text_foreign' => 'getOverDueTextForeign'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_invoice_text_domestic'] = isset($data['customer_invoice_text_domestic']) ? $data['customer_invoice_text_domestic'] : null;
        $this->container['customer_invoice_text_foreign'] = isset($data['customer_invoice_text_foreign']) ? $data['customer_invoice_text_foreign'] : null;
        $this->container['order_text_domestic'] = isset($data['order_text_domestic']) ? $data['order_text_domestic'] : null;
        $this->container['order_text_foreign'] = isset($data['order_text_foreign']) ? $data['order_text_foreign'] : null;
        $this->container['over_due_text_domestic'] = isset($data['over_due_text_domestic']) ? $data['over_due_text_domestic'] : null;
        $this->container['over_due_text_foreign'] = isset($data['over_due_text_foreign']) ? $data['over_due_text_foreign'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer_invoice_text_domestic']) && (mb_strlen($this->container['customer_invoice_text_domestic']) > 180)) {
            $invalidProperties[] = "invalid value for 'customer_invoice_text_domestic', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['customer_invoice_text_domestic']) && (mb_strlen($this->container['customer_invoice_text_domestic']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_invoice_text_domestic', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_invoice_text_foreign']) && (mb_strlen($this->container['customer_invoice_text_foreign']) > 180)) {
            $invalidProperties[] = "invalid value for 'customer_invoice_text_foreign', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['customer_invoice_text_foreign']) && (mb_strlen($this->container['customer_invoice_text_foreign']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_invoice_text_foreign', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_text_domestic']) && (mb_strlen($this->container['order_text_domestic']) > 180)) {
            $invalidProperties[] = "invalid value for 'order_text_domestic', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['order_text_domestic']) && (mb_strlen($this->container['order_text_domestic']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_text_domestic', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['order_text_foreign']) && (mb_strlen($this->container['order_text_foreign']) > 180)) {
            $invalidProperties[] = "invalid value for 'order_text_foreign', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['order_text_foreign']) && (mb_strlen($this->container['order_text_foreign']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_text_foreign', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['over_due_text_domestic']) && (mb_strlen($this->container['over_due_text_domestic']) > 180)) {
            $invalidProperties[] = "invalid value for 'over_due_text_domestic', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['over_due_text_domestic']) && (mb_strlen($this->container['over_due_text_domestic']) < 0)) {
            $invalidProperties[] = "invalid value for 'over_due_text_domestic', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['over_due_text_foreign']) && (mb_strlen($this->container['over_due_text_foreign']) > 180)) {
            $invalidProperties[] = "invalid value for 'over_due_text_foreign', the character length must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['over_due_text_foreign']) && (mb_strlen($this->container['over_due_text_foreign']) < 0)) {
            $invalidProperties[] = "invalid value for 'over_due_text_foreign', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_invoice_text_domestic
     *
     * @return string
     */
    public function getCustomerInvoiceTextDomestic()
    {
        return $this->container['customer_invoice_text_domestic'];
    }

    /**
     * Sets customer_invoice_text_domestic
     *
     * @param string $customer_invoice_text_domestic Max length: 180 characters
     *
     * @return $this
     */
    public function setCustomerInvoiceTextDomestic($customer_invoice_text_domestic)
    {
        if (!is_null($customer_invoice_text_domestic) && (mb_strlen($customer_invoice_text_domestic) > 180)) {
            throw new \InvalidArgumentException('invalid length for $customer_invoice_text_domestic when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($customer_invoice_text_domestic) && (mb_strlen($customer_invoice_text_domestic) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_invoice_text_domestic when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['customer_invoice_text_domestic'] = $customer_invoice_text_domestic;

        return $this;
    }

    /**
     * Gets customer_invoice_text_foreign
     *
     * @return string
     */
    public function getCustomerInvoiceTextForeign()
    {
        return $this->container['customer_invoice_text_foreign'];
    }

    /**
     * Sets customer_invoice_text_foreign
     *
     * @param string $customer_invoice_text_foreign Max length: 180 characters
     *
     * @return $this
     */
    public function setCustomerInvoiceTextForeign($customer_invoice_text_foreign)
    {
        if (!is_null($customer_invoice_text_foreign) && (mb_strlen($customer_invoice_text_foreign) > 180)) {
            throw new \InvalidArgumentException('invalid length for $customer_invoice_text_foreign when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($customer_invoice_text_foreign) && (mb_strlen($customer_invoice_text_foreign) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_invoice_text_foreign when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['customer_invoice_text_foreign'] = $customer_invoice_text_foreign;

        return $this;
    }

    /**
     * Gets order_text_domestic
     *
     * @return string
     */
    public function getOrderTextDomestic()
    {
        return $this->container['order_text_domestic'];
    }

    /**
     * Sets order_text_domestic
     *
     * @param string $order_text_domestic Max length: 180 characters
     *
     * @return $this
     */
    public function setOrderTextDomestic($order_text_domestic)
    {
        if (!is_null($order_text_domestic) && (mb_strlen($order_text_domestic) > 180)) {
            throw new \InvalidArgumentException('invalid length for $order_text_domestic when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($order_text_domestic) && (mb_strlen($order_text_domestic) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_text_domestic when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['order_text_domestic'] = $order_text_domestic;

        return $this;
    }

    /**
     * Gets order_text_foreign
     *
     * @return string
     */
    public function getOrderTextForeign()
    {
        return $this->container['order_text_foreign'];
    }

    /**
     * Sets order_text_foreign
     *
     * @param string $order_text_foreign Max length: 180 characters
     *
     * @return $this
     */
    public function setOrderTextForeign($order_text_foreign)
    {
        if (!is_null($order_text_foreign) && (mb_strlen($order_text_foreign) > 180)) {
            throw new \InvalidArgumentException('invalid length for $order_text_foreign when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($order_text_foreign) && (mb_strlen($order_text_foreign) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_text_foreign when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['order_text_foreign'] = $order_text_foreign;

        return $this;
    }

    /**
     * Gets over_due_text_domestic
     *
     * @return string
     */
    public function getOverDueTextDomestic()
    {
        return $this->container['over_due_text_domestic'];
    }

    /**
     * Sets over_due_text_domestic
     *
     * @param string $over_due_text_domestic Max length: 180 characters
     *
     * @return $this
     */
    public function setOverDueTextDomestic($over_due_text_domestic)
    {
        if (!is_null($over_due_text_domestic) && (mb_strlen($over_due_text_domestic) > 180)) {
            throw new \InvalidArgumentException('invalid length for $over_due_text_domestic when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($over_due_text_domestic) && (mb_strlen($over_due_text_domestic) < 0)) {
            throw new \InvalidArgumentException('invalid length for $over_due_text_domestic when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['over_due_text_domestic'] = $over_due_text_domestic;

        return $this;
    }

    /**
     * Gets over_due_text_foreign
     *
     * @return string
     */
    public function getOverDueTextForeign()
    {
        return $this->container['over_due_text_foreign'];
    }

    /**
     * Sets over_due_text_foreign
     *
     * @param string $over_due_text_foreign Max length: 180 characters
     *
     * @return $this
     */
    public function setOverDueTextForeign($over_due_text_foreign)
    {
        if (!is_null($over_due_text_foreign) && (mb_strlen($over_due_text_foreign) > 180)) {
            throw new \InvalidArgumentException('invalid length for $over_due_text_foreign when calling CompanyTextsApi., must be smaller than or equal to 180.');
        }
        if (!is_null($over_due_text_foreign) && (mb_strlen($over_due_text_foreign) < 0)) {
            throw new \InvalidArgumentException('invalid length for $over_due_text_foreign when calling CompanyTextsApi., must be bigger than or equal to 0.');
        }

        $this->container['over_due_text_foreign'] = $over_due_text_foreign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


