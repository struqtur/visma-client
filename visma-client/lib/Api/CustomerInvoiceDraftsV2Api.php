<?php
/**
 * CustomerInvoiceDraftsV2Api
 * PHP version 5
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Visma eAccounting API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.23
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Struqtur\VismaEAccounting\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Struqtur\VismaEAccounting\ApiException;
use Struqtur\VismaEAccounting\Configuration;
use Struqtur\VismaEAccounting\HeaderSelector;
use Struqtur\VismaEAccounting\Model\ODataQueryOptions;
use Struqtur\VismaEAccounting\ObjectSerializer;

/**
 * CustomerInvoiceDraftsV2Api Class Doc Comment
 *
 * @category Class
 * @package  Struqtur\VismaEAccounting
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerInvoiceDraftsV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoice
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftValidationApi $invoice_validations Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#39;s invoice date is used (past or future), or if date misses, the draft&#39;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#39;s invoice date is used if it&#39;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#39;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceApi
     */
    public function customerInvoiceDraftsV2ConvertToInvoice($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        list($response) = $this->customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date, $override_company_keep_original_draft_date);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftValidationApi $invoice_validations Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#39;s invoice date is used (past or future), or if date misses, the draft&#39;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#39;s invoice date is used if it&#39;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#39;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Struqtur\VismaEAccounting\Model\CustomerInvoiceApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceWithHttpInfo($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date, $override_company_keep_original_draft_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Struqtur\VismaEAccounting\Model\CustomerInvoiceApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsync
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftValidationApi $invoice_validations Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#39;s invoice date is used (past or future), or if date misses, the draft&#39;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#39;s invoice date is used if it&#39;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#39;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsync($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        return $this->customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date, $override_company_keep_original_draft_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo
     *
     * Converts a CustomerInvoiceDraft to a CustomerInvoice.
     *
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftValidationApi $invoice_validations Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#39;s invoice date is used (past or future), or if date misses, the draft&#39;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#39;s invoice date is used if it&#39;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#39;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2ConvertToInvoiceAsyncWithHttpInfo($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceApi';
        $request = $this->customerInvoiceDraftsV2ConvertToInvoiceRequest($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date, $override_company_keep_original_draft_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2ConvertToInvoice'
     *
     * @param  string $customer_invoice_draft_id The customer Invoice Draft Id. (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftValidationApi $invoice_validations Optional set of properties to validate. Ignore the properties you do not wish to validate. (required)
     * @param  bool $keep_original_draft_date Optional, false by default.  If this parameter is set to true, or if the same parameter from company settings is set to true, then the draft&#39;s invoice date is used (past or future), or if date misses, the draft&#39;s creation date is used  If this parameter is omitted, and the same parameter from company settings is not set or is set to false, then the draft&#39;s invoice date is used if it&#39;s in future, or if that date misses or is in past, today date is used (optional)
     * @param  bool $override_company_keep_original_draft_date Optional, false by default.  If this parameter is set to true, use keepOriginalDraftDate parameter value to decide whether to use draft&#39;s invoice date or not regardless of company settings value. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2ConvertToInvoiceRequest($customer_invoice_draft_id, $invoice_validations, $keep_original_draft_date = null, $override_company_keep_original_draft_date = null)
    {
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }
        // verify the required parameter 'invoice_validations' is set
        if ($invoice_validations === null || (is_array($invoice_validations) && count($invoice_validations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_validations when calling customerInvoiceDraftsV2ConvertToInvoice'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}/convert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keep_original_draft_date !== null) {
            $queryParams['keepOriginalDraftDate'] = ObjectSerializer::toQueryValue($keep_original_draft_date);
        }
        // query params
        if ($override_company_keep_original_draft_date !== null) {
            $queryParams['overrideCompanyKeepOriginalDraftDate'] = ObjectSerializer::toQueryValue($override_company_keep_original_draft_date);
        }

        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($invoice_validations)) {
            $_tempBody = $invoice_validations;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Delete
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerInvoiceDraftsV2Delete($customer_invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2DeleteWithHttpInfo($customer_invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteWithHttpInfo
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2DeleteWithHttpInfo($customer_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteAsync
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2DeleteAsync($customer_invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2DeleteAsyncWithHttpInfo($customer_invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2DeleteAsyncWithHttpInfo
     *
     * Delete a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2DeleteAsyncWithHttpInfo($customer_invoice_draft_id)
    {
        $returnType = 'object';
        $request = $this->customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Delete'
     *
     * @param  string $customer_invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2DeleteRequest($customer_invoice_draft_id)
    {
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2Delete'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Get
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Struqtur\VismaEAccounting\Model\PaginatedResponseCustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Get(ODataQueryOptions $odataQueryOptions = null)
    {
        list($response) = $this->customerInvoiceDraftsV2GetWithHttpInfo($odataQueryOptions);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2GetWithHttpInfo
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Struqtur\VismaEAccounting\Model\PaginatedResponseCustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2GetWithHttpInfo(ODataQueryOptions $odataQueryOptions = null)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\PaginatedResponseCustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2GetRequest($odataQueryOptions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Struqtur\VismaEAccounting\Model\PaginatedResponseCustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2GetAsync
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2GetAsync()
    {
        return $this->customerInvoiceDraftsV2GetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2GetAsyncWithHttpInfo
     *
     * Get all customer invoice drafts.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2GetAsyncWithHttpInfo()
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\PaginatedResponseCustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2GetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Get'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2GetRequest(ODataQueryOptions $odataQueryOptions = null)
    {
        $resourcePath = '/v2/customerinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($odataQueryOptions !== null) {
            if ($odataQueryOptions->filter) {
                $queryParams[$odataQueryOptions->filter->param] = $odataQueryOptions->filter->filter;
            }
            if ($odataQueryOptions->paging) {
                foreach ($odataQueryOptions->paging->getParams() as $param => $value) {
                    $queryParams[$param] = $value;
                }
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Get_0($invoice_draft_id)
    {
        list($response) = $this->customerInvoiceDraftsV2Get_0WithHttpInfo($invoice_draft_id);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0WithHttpInfo
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2Get_0WithHttpInfo($invoice_draft_id)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2Get_0Request($invoice_draft_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0Async
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2Get_0Async($invoice_draft_id)
    {
        return $this->customerInvoiceDraftsV2Get_0AsyncWithHttpInfo($invoice_draft_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2Get_0AsyncWithHttpInfo
     *
     * Gets a customer invoice draft by id.
     *
     * @param  string $invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2Get_0AsyncWithHttpInfo($invoice_draft_id)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2Get_0Request($invoice_draft_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Get_0'
     *
     * @param  string $invoice_draft_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2Get_0Request($invoice_draft_id)
    {
        // verify the required parameter 'invoice_draft_id' is set
        if ($invoice_draft_id === null || (is_array($invoice_draft_id) && count($invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_draft_id when calling customerInvoiceDraftsV2Get_0'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{invoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceDraftId' . '}',
                ObjectSerializer::toPathValue($invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Post
     *
     * Create a single customer invoice draft.
     *
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Post($customer_invoice_draft)
    {
        list($response) = $this->customerInvoiceDraftsV2PostWithHttpInfo($customer_invoice_draft);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PostWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PostWithHttpInfo($customer_invoice_draft)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($customer_invoice_draft);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsync
     *
     * Create a single customer invoice draft.
     *
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsync($customer_invoice_draft)
    {
        return $this->customerInvoiceDraftsV2PostAsyncWithHttpInfo($customer_invoice_draft)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PostAsyncWithHttpInfo
     *
     * Create a single customer invoice draft.
     *
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PostAsyncWithHttpInfo($customer_invoice_draft)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PostRequest($customer_invoice_draft);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Post'
     *
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PostRequest($customer_invoice_draft)
    {
        // verify the required parameter 'customer_invoice_draft' is set
        if ($customer_invoice_draft === null || (is_array($customer_invoice_draft) && count($customer_invoice_draft) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft when calling customerInvoiceDraftsV2Post'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($customer_invoice_draft)) {
            $_tempBody = $customer_invoice_draft;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerInvoiceDraftsV2Put
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi
     */
    public function customerInvoiceDraftsV2Put($customer_invoice_draft_id, $customer_invoice_draft)
    {
        list($response) = $this->customerInvoiceDraftsV2PutWithHttpInfo($customer_invoice_draft_id, $customer_invoice_draft);
        return $response;
    }

    /**
     * Operation customerInvoiceDraftsV2PutWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \Struqtur\VismaEAccounting\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerInvoiceDraftsV2PutWithHttpInfo($customer_invoice_draft_id, $customer_invoice_draft)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($customer_invoice_draft_id, $customer_invoice_draft);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsync
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsync($customer_invoice_draft_id, $customer_invoice_draft)
    {
        return $this->customerInvoiceDraftsV2PutAsyncWithHttpInfo($customer_invoice_draft_id, $customer_invoice_draft)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customerInvoiceDraftsV2PutAsyncWithHttpInfo
     *
     * Replace the data in a customer invoice draft.
     *
     * @param  string $customer_invoice_draft_id  (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerInvoiceDraftsV2PutAsyncWithHttpInfo($customer_invoice_draft_id, $customer_invoice_draft)
    {
        $returnType = '\Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi';
        $request = $this->customerInvoiceDraftsV2PutRequest($customer_invoice_draft_id, $customer_invoice_draft);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customerInvoiceDraftsV2Put'
     *
     * @param  string $customer_invoice_draft_id  (required)
     * @param  \Struqtur\VismaEAccounting\Model\CustomerInvoiceDraftApi $customer_invoice_draft  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerInvoiceDraftsV2PutRequest($customer_invoice_draft_id, $customer_invoice_draft)
    {
        // verify the required parameter 'customer_invoice_draft_id' is set
        if ($customer_invoice_draft_id === null || (is_array($customer_invoice_draft_id) && count($customer_invoice_draft_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft_id when calling customerInvoiceDraftsV2Put'
            );
        }
        // verify the required parameter 'customer_invoice_draft' is set
        if ($customer_invoice_draft === null || (is_array($customer_invoice_draft) && count($customer_invoice_draft) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_invoice_draft when calling customerInvoiceDraftsV2Put'
            );
        }

        $resourcePath = '/v2/customerinvoicedrafts/{customerInvoiceDraftId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($customer_invoice_draft_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customerInvoiceDraftId' . '}',
                ObjectSerializer::toPathValue($customer_invoice_draft_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($customer_invoice_draft)) {
            $_tempBody = $customer_invoice_draft;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
